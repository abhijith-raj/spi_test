HwAccDmaCh_SetControl_EnScatterGatherProcessing (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, boolean LocValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetAuxiliary_EnScatterGatherProcessing (pxLocTcd_4(D), LocValue_5(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetControl_ScatterGatherAddress (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, uint32 LocValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetControl_ScatterGatherAddress (pxLocTcd_4(D), LocValue_5(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_LoadSoftwareTcdIntoHardwareTcd (const struct Dma_Ip_LogicChannelIdType * const pxLocLogicCh, const struct Dma_Ip_ScatterGatherConfigType * const pxLocScatterGather)
{
  uint32 LocHwCh;
  uint32 LocHwInst;
  uint32 LocHwVers;
  unsigned char _1;
  unsigned char _2;
  unsigned char _3;
  struct Dma_Ip_Hwv3ChTcdRegType * _4;
  struct Dma_Ip_ChRegType * _5;
  struct Dma_Ip_SwTcdRegType * _6;
  struct Dma_Ip_Hwv3ChTcdRegType * _7;
  long unsigned int _8;
  struct Dma_Ip_SwTcdRegType * _9;
  struct Dma_Ip_Hwv3ChTcdRegType * _10;
  short unsigned int _11;
  struct Dma_Ip_SwTcdRegType * _12;
  struct Dma_Ip_Hwv3ChTcdRegType * _13;
  short unsigned int _14;
  struct Dma_Ip_SwTcdRegType * _15;
  struct Dma_Ip_Hwv3ChTcdRegType * _16;
  long unsigned int _17;
  struct Dma_Ip_SwTcdRegType * _18;
  struct Dma_Ip_Hwv3ChTcdRegType * _19;
  long unsigned int _20;
  struct Dma_Ip_SwTcdRegType * _21;
  struct Dma_Ip_Hwv3ChTcdRegType * _22;
  long unsigned int _23;
  struct Dma_Ip_SwTcdRegType * _24;
  struct Dma_Ip_Hwv3ChTcdRegType * _25;
  short unsigned int _26;
  struct Dma_Ip_SwTcdRegType * _27;
  struct Dma_Ip_Hwv3ChTcdRegType * _28;
  short unsigned int _29;
  struct Dma_Ip_SwTcdRegType * _30;
  struct Dma_Ip_Hwv3ChTcdRegType * _31;
  long unsigned int _32;
  struct Dma_Ip_SwTcdRegType * _33;
  struct Dma_Ip_Hwv3ChTcdRegType * _34;
  short unsigned int _35;
  struct Dma_Ip_SwTcdRegType * _36;
  struct Dma_Ip_Hwv3ChTcdRegType * _37;
  short unsigned int _38;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = pxLocLogicCh_41(D)->HwVersId;
  LocHwVers_42 = (uint32) _1;
  # DEBUG LocHwVers => LocHwVers_42
  # DEBUG BEGIN_STMT
  _2 = pxLocLogicCh_41(D)->HwInstId;
  LocHwInst_43 = (uint32) _2;
  # DEBUG LocHwInst => LocHwInst_43
  # DEBUG BEGIN_STMT
  _3 = pxLocLogicCh_41(D)->HwChId;
  LocHwCh_44 = (uint32) _3;
  # DEBUG LocHwCh => LocHwCh_44
  # DEBUG BEGIN_STMT
  if (LocHwVers_42 == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _4 = g_ptHwChTcdPtrArray[LocHwInst_43][LocHwCh_44];
  _5 = &_4->tChReg;
  hwv3AccInlineDmaCh_CmdClearDone (_5);
  # DEBUG BEGIN_STMT
  _6 = pxLocScatterGather_46(D)->Stcd;
  _7 = g_ptHwChTcdPtrArray[LocHwInst_43][LocHwCh_44];
  _8 = _6->reg_SADDR;
  _7->tTcdReg.reg_SADDR = _8;
  # DEBUG BEGIN_STMT
  _9 = pxLocScatterGather_46(D)->Stcd;
  _10 = g_ptHwChTcdPtrArray[LocHwInst_43][LocHwCh_44];
  _11 = _9->reg_SOFF;
  _10->tTcdReg.reg_SOFF = _11;
  # DEBUG BEGIN_STMT
  _12 = pxLocScatterGather_46(D)->Stcd;
  _13 = g_ptHwChTcdPtrArray[LocHwInst_43][LocHwCh_44];
  _14 = _12->reg_ATTR;
  _13->tTcdReg.reg_ATTR = _14;
  # DEBUG BEGIN_STMT
  _15 = pxLocScatterGather_46(D)->Stcd;
  _16 = g_ptHwChTcdPtrArray[LocHwInst_43][LocHwCh_44];
  _17 = _15->reg_NBYTES.reg_MLOFFYES;
  _16->tTcdReg.reg_NBYTES.reg_MLOFFYES = _17;
  # DEBUG BEGIN_STMT
  _18 = pxLocScatterGather_46(D)->Stcd;
  _19 = g_ptHwChTcdPtrArray[LocHwInst_43][LocHwCh_44];
  _20 = _18->reg_SLAST_SDA;
  _19->tTcdReg.reg_SLAST_SDA = _20;
  # DEBUG BEGIN_STMT
  _21 = pxLocScatterGather_46(D)->Stcd;
  _22 = g_ptHwChTcdPtrArray[LocHwInst_43][LocHwCh_44];
  _23 = _21->reg_DADDR;
  _22->tTcdReg.reg_DADDR = _23;
  # DEBUG BEGIN_STMT
  _24 = pxLocScatterGather_46(D)->Stcd;
  _25 = g_ptHwChTcdPtrArray[LocHwInst_43][LocHwCh_44];
  _26 = _24->reg_DOFF;
  _25->tTcdReg.reg_DOFF = _26;
  # DEBUG BEGIN_STMT
  _27 = pxLocScatterGather_46(D)->Stcd;
  _28 = g_ptHwChTcdPtrArray[LocHwInst_43][LocHwCh_44];
  _29 = _27->reg_CITER.reg_ELINKYES;
  _28->tTcdReg.reg_CITER.reg_ELINKYES = _29;
  # DEBUG BEGIN_STMT
  _30 = pxLocScatterGather_46(D)->Stcd;
  _31 = g_ptHwChTcdPtrArray[LocHwInst_43][LocHwCh_44];
  _32 = _30->reg_DLAST_SGA;
  _31->tTcdReg.reg_DLAST_SGA = _32;
  # DEBUG BEGIN_STMT
  _33 = pxLocScatterGather_46(D)->Stcd;
  _34 = g_ptHwChTcdPtrArray[LocHwInst_43][LocHwCh_44];
  _35 = _33->reg_BITER.reg_ELINKYES;
  _34->tTcdReg.reg_BITER.reg_ELINKYES = _35;
  # DEBUG BEGIN_STMT
  _36 = pxLocScatterGather_46(D)->Stcd;
  _37 = g_ptHwChTcdPtrArray[LocHwInst_43][LocHwCh_44];
  _38 = _36->reg_CSR;
  _37->tTcdReg.reg_CSR = _38;

  <bb 4> :
  # DEBUG BEGIN_STMT
  return;

}


HwAccDmaCh_LoadConfigIntoSoftwareTcd (uint32 HwVersId, const struct Dma_Ip_ScatterGatherConfigType * const pxLocScatterGather, const uint32 ElementId, const boolean NotLastElement)
{
  uint32 hwLinkCh;
  struct Dma_Ip_SwTcdRegType * _1;
  struct Dma_Ip_ScatterGatherConfigType * _2;
  struct Dma_Ip_SwTcdRegType * _3;
  long unsigned int _4;
  struct Dma_Ip_SwTcdRegType * _5;
  struct Dma_Ip_SwTcdRegType * _6;
  struct Dma_Ip_TransferConfigType * _7;
  struct Dma_Ip_SwTcdRegType * _8;
  struct Dma_Ip_SwTcdRegType * _9;
  struct Dma_Ip_TransferConfigType * _10;
  long unsigned int _11;
  struct Dma_Ip_SwTcdRegType * _12;
  struct Dma_Ip_TransferConfigType * _13;
  short int _14;
  long unsigned int _15;
  struct Dma_Ip_SwTcdRegType * _16;
  struct Dma_Ip_TransferConfigType * _17;
  long unsigned int _18;
  struct Dma_Ip_SwTcdRegType * _19;
  struct Dma_Ip_TransferConfigType * _20;
  short int _21;
  long unsigned int _22;
  struct Dma_Ip_SwTcdRegType * _23;
  struct Dma_Ip_SwTcdRegType * _24;
  struct Dma_Ip_SwTcdRegType * _25;
  struct Dma_Ip_TransferConfigType * _26;
  _Bool _27;
  struct Dma_Ip_TransferConfigType * _28;
  unsigned char _29;
  long unsigned int _30;
  struct Dma_Ip_SwTcdRegType * _31;
  struct Dma_Ip_SwTcdRegType * _32;
  struct Dma_Ip_TransferConfigType * _33;
  long unsigned int _34;
  struct Dma_Ip_SwTcdRegType * _35;
  struct Dma_Ip_TransferConfigType * _36;
  _Bool _37;
  struct Dma_Ip_TransferConfigType * _38;
  _Bool _39;
  struct Dma_Ip_TransferConfigType * _40;
  unsigned char _41;
  long unsigned int _42;
  struct Dma_Ip_SwTcdRegType * _43;
  struct Dma_Ip_SwTcdRegType * _44;
  struct Dma_Ip_SwTcdRegType * _45;
  struct Dma_Ip_TransferConfigType * _46;
  long unsigned int _47;
  struct Dma_Ip_SwTcdRegType * _48;
  struct Dma_Ip_TransferConfigType * _49;
  long int _50;
  long unsigned int _51;
  const uint32 iftmp.10_52;
  const uint32 iftmp.11_53;
  const uint32 iftmp.10_71;
  const uint32 iftmp.10_72;
  const uint32 iftmp.11_78;
  const uint32 iftmp.11_79;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (HwVersId_57(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  if (NotLastElement_59(D) != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = pxLocScatterGather_60(D)->Stcd;
  _2 = pxLocScatterGather_60(D)->NextConfig;
  _3 = _2->Stcd;
  _4 = (long unsigned int) _3;
  hwv3AccInlineDmaCh_SetControl_ScatterGatherAddress (_1, _4);
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _5 = pxLocScatterGather_60(D)->Stcd;
  hwv3AccInlineDmaCh_SetControl_ScatterGatherAddress (_5, 0);

  <bb 6> :
  # DEBUG BEGIN_STMT
  _6 = pxLocScatterGather_60(D)->Stcd;
  hwv3AccInlineDmaCh_SetAuxiliary_EnScatterGatherProcessing (_6, NotLastElement_59(D));
  # DEBUG BEGIN_STMT
  _7 = pxLocScatterGather_60(D)->TransferConfig;
  if (_7 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _8 = pxLocScatterGather_60(D)->Stcd;
  hwv3AccInlineDmaCh_SetControlAndStatus (_8, pxLocScatterGather_60(D));
  # DEBUG BEGIN_STMT
  _9 = pxLocScatterGather_60(D)->Stcd;
  _10 = pxLocScatterGather_60(D)->TransferConfig;
  _11 = _10->Source.Addr;
  hwv3AccInlineDmaCh_SetSource_Address (_9, _11);
  # DEBUG BEGIN_STMT
  _12 = pxLocScatterGather_60(D)->Stcd;
  _13 = pxLocScatterGather_60(D)->TransferConfig;
  _14 = _13->Source.SignedOffset;
  _15 = (long unsigned int) _14;
  hwv3AccInlineDmaCh_SetSource_SignedOffset (_12, _15);
  # DEBUG BEGIN_STMT
  _16 = pxLocScatterGather_60(D)->Stcd;
  _17 = pxLocScatterGather_60(D)->TransferConfig;
  _18 = _17->Destination.Addr;
  hwv3AccInlineDmaCh_SetDestination_Address (_16, _18);
  # DEBUG BEGIN_STMT
  _19 = pxLocScatterGather_60(D)->Stcd;
  _20 = pxLocScatterGather_60(D)->TransferConfig;
  _21 = _20->Destination.SignedOffset;
  _22 = (long unsigned int) _21;
  hwv3AccInlineDmaCh_SetDestination_SignedOffset (_19, _22);
  # DEBUG BEGIN_STMT
  _23 = pxLocScatterGather_60(D)->Stcd;
  hwv3AccInlineDmaCh_SetTransferAttributes (_23, pxLocScatterGather_60(D));
  # DEBUG BEGIN_STMT
  _24 = pxLocScatterGather_60(D)->Stcd;
  hwv3AccInlineDmaCh_SetSignedMinorLoopOffset (_24, pxLocScatterGather_60(D));
  # DEBUG BEGIN_STMT
  _25 = pxLocScatterGather_60(D)->Stcd;
  _26 = pxLocScatterGather_60(D)->TransferConfig;
  _27 = _26->MinorLoop.EnLink;
  if (_27 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  iftmp.10_72 = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  iftmp.10_71 = 0;

  <bb 10> :
  # iftmp.10_52 = PHI <iftmp.10_72(8), iftmp.10_71(9)>
  hwv3AccInlineDmaCh_SetMinorLoop_EnLink (_25, iftmp.10_52);
  # DEBUG BEGIN_STMT
  _28 = pxLocScatterGather_60(D)->TransferConfig;
  _29 = _28->MinorLoop.LogicLinkCh;
  _30 = (long unsigned int) _29;
  hwLinkCh_75 = Dma_Ip_ConvertLogicChToHwCh (_30);
  # DEBUG hwLinkCh => hwLinkCh_75
  # DEBUG BEGIN_STMT
  _31 = pxLocScatterGather_60(D)->Stcd;
  hwv3AccInlineDmaCh_SetMinorLoop_LinkCh (_31, hwLinkCh_75);
  # DEBUG BEGIN_STMT
  _32 = pxLocScatterGather_60(D)->Stcd;
  _33 = pxLocScatterGather_60(D)->TransferConfig;
  _34 = _33->MinorLoop.Size;
  hwv3AccInlineDmaCh_SetMinorLoop_Size (_32, _34);
  # DEBUG BEGIN_STMT
  _35 = pxLocScatterGather_60(D)->Stcd;
  _36 = pxLocScatterGather_60(D)->TransferConfig;
  _37 = _36->MajorLoop.EnLink;
  if (_37 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  iftmp.11_79 = 1;
  goto <bb 13>; [INV]

  <bb 12> :
  iftmp.11_78 = 0;

  <bb 13> :
  # iftmp.11_53 = PHI <iftmp.11_79(11), iftmp.11_78(12)>
  hwv3AccInlineDmaCh_SetMajorLoop_EnLink (_35, iftmp.11_53);
  # DEBUG BEGIN_STMT
  _38 = pxLocScatterGather_60(D)->TransferConfig;
  _39 = _38->MajorLoop.EnLink;
  if (_39 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _40 = pxLocScatterGather_60(D)->TransferConfig;
  _41 = _40->MajorLoop.LogicLinkCh;
  _42 = (long unsigned int) _41;
  hwLinkCh_84 = Dma_Ip_ConvertLogicChToHwCh (_42);
  # DEBUG hwLinkCh => hwLinkCh_84
  # DEBUG BEGIN_STMT
  _43 = pxLocScatterGather_60(D)->Stcd;
  hwv3AccInlineDmaCh_SetMajorLoop_LinkCh (_43, hwLinkCh_84);
  goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _44 = pxLocScatterGather_60(D)->Stcd;
  hwv3AccInlineDmaCh_SetMajorLoop_LinkCh (_44, ElementId_81(D));

  <bb 16> :
  # DEBUG BEGIN_STMT
  _45 = pxLocScatterGather_60(D)->Stcd;
  _46 = pxLocScatterGather_60(D)->TransferConfig;
  _47 = _46->MajorLoop.Count;
  hwv3AccInlineDmaCh_SetMajorLoop_Count (_45, _47);
  # DEBUG BEGIN_STMT
  _48 = pxLocScatterGather_60(D)->Stcd;
  _49 = pxLocScatterGather_60(D)->TransferConfig;
  _50 = _49->Source.LastAddrAdj;
  _51 = (long unsigned int) _50;
  hwv3AccInlineDmaCh_SetSource_SignedLastAddrAdj (_48, _51);

  <bb 17> :
  # DEBUG BEGIN_STMT
  return;

}


HwAccDmaCh_GetParam (const uint32 Parameter, const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, uint32 * const retValue)
{
  static void (*<T6b0>) (const uint32, const uint32, const uint32, uint32 * const) fpHwAcc_DmaCh_GetParam[9] = {HwAccDmaCh_GetSourceAddress, HwAccDmaCh_GetDestinationAddress, HwAccDmaCh_GetBeginIterCount, HwAccDmaCh_GetCurrentIterCount, HwAccDmaCh_GetStoreDstAddress, HwAccDmaCh_GetMasterId, HwAccDmaCh_GetIntMajor, HwAccDmaCh_GetIntHalfMajor, HwAccDmaCh_GetParamDummyFunction};
  void (*<T6ac>) (const uint32, const uint32, const uint32, uint32 * const) _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = fpHwAcc_DmaCh_GetParam[Parameter_3(D)];
  _1 (LocHwVers_4(D), LocHwInst_5(D), LocHwCh_6(D), retValue_7(D));
  return;

}


HwAccDmaCh_GetIntHalfMajor (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, uint32 * const retValue)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_TcdRegType * _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_6(D)][LocHwCh_7(D)];
  _2 = &_1->tTcdReg;
  hwv3AccInlineDmaCh_GetIntHalfMajor (_2, retValue_8(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_GetIntMajor (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, uint32 * const retValue)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_TcdRegType * _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_6(D)][LocHwCh_7(D)];
  _2 = &_1->tTcdReg;
  hwv3AccInlineDmaCh_GetIntMajor (_2, retValue_8(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_GetMasterId (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, uint32 * const retValue)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_ChRegType * _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_6(D)][LocHwCh_7(D)];
  _2 = &_1->tChReg;
  hwv3AccInlineDmaCh_GetMasterId (_2, retValue_8(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_GetStoreDstAddress (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, uint32 * const retValue)
{
  uint32 LocPhysicalAddress;
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_TcdRegType * _2;
  long unsigned int LocPhysicalAddress.8_3;
  uint32 * LocPhysicalAddress.9_4;
  long unsigned int _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (LocHwVers_7(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_9(D)][LocHwCh_10(D)];
  _2 = &_1->tTcdReg;
  hwv3AccInlineDmaCh_GetStoreDstAddress (_2, &LocPhysicalAddress);
  # DEBUG BEGIN_STMT
  LocPhysicalAddress.8_3 = LocPhysicalAddress;
  LocPhysicalAddress.9_4 = (uint32 *) LocPhysicalAddress.8_3;
  _5 = *LocPhysicalAddress.9_4;
  *retValue_12(D) = _5;
  # DEBUG BEGIN_STMT

  <bb 4> :
  LocPhysicalAddress ={v} {CLOBBER};
  return;

}


HwAccDmaCh_GetCurrentIterCount (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, uint32 * const retValue)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_TcdRegType * _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_6(D)][LocHwCh_7(D)];
  _2 = &_1->tTcdReg;
  hwv3AccInlineDmaCh_GetCurrentIterCount (_2, retValue_8(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_GetBeginIterCount (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, uint32 * const retValue)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_TcdRegType * _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_6(D)][LocHwCh_7(D)];
  _2 = &_1->tTcdReg;
  hwv3AccInlineDmaCh_GetBeginIterCount (_2, retValue_8(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_GetDestinationAddress (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, uint32 * const retValue)
{
  uint32 LocPhysicalAddress;
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_TcdRegType * _2;
  long unsigned int LocPhysicalAddress.7_3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (LocHwVers_5(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_7(D)][LocHwCh_8(D)];
  _2 = &_1->tTcdReg;
  hwv3AccInlineDmaCh_GetDestinationAddress (_2, &LocPhysicalAddress);
  # DEBUG BEGIN_STMT
  LocPhysicalAddress.7_3 = LocPhysicalAddress;
  *retValue_10(D) = LocPhysicalAddress.7_3;
  # DEBUG BEGIN_STMT

  <bb 4> :
  LocPhysicalAddress ={v} {CLOBBER};
  return;

}


HwAccDmaCh_GetSourceAddress (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, uint32 * const retValue)
{
  uint32 LocPhysicalAddress;
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_TcdRegType * _2;
  long unsigned int LocPhysicalAddress.6_3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (LocHwVers_5(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_7(D)][LocHwCh_8(D)];
  _2 = &_1->tTcdReg;
  hwv3AccInlineDmaCh_GetSourceAddress (_2, &LocPhysicalAddress);
  # DEBUG BEGIN_STMT
  LocPhysicalAddress.6_3 = LocPhysicalAddress;
  *retValue_10(D) = LocPhysicalAddress.6_3;
  # DEBUG BEGIN_STMT

  <bb 4> :
  LocPhysicalAddress ={v} {CLOBBER};
  return;

}


HwAccDmaCh_SetTransferParam (const uint32 Parameter, const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  static void (*<T6a1>) (const uint32, struct Dma_Ip_TcdRegType *, const uint32) fpHwAcc_DmaCh_SetTransferParam[26] = {HwAccDmaCh_SetSource_Address, HwAccDmaCh_SetSource_SignedOffset, HwAccDmaCh_SetSource_LastAddrAdj, HwAccDmaCh_SetSource_TransferSize, HwAccDmaCh_SetSource_Modulo, HwAccDmaCh_SetDestination_Address, HwAccDmaCh_SetDestination_SignedOffset, HwAccDmaCh_SetDestination_LastAddrAdj, HwAccDmaCh_SetDestination_TransferSize, HwAccDmaCh_SetDestination_Modulo, HwAccDmaCh_SetMinorLoop_enSrcOffset, HwAccDmaCh_SetMinorLoop_enDstOffset, HwAccDmaCh_SetMinorLoop_Offset, HwAccDmaCh_SetMinorLoop_EnLink, HwAccDmaCh_SetMinorLoop_LogicLinkCh, HwAccDmaCh_SetMinorLoop_Size, HwAccDmaCh_SetMajorLoop_EnLink, HwAccDmaCh_SetMajorLoop_LogicLinkCh, HwAccDmaCh_SetMajorLoop_Count, HwAccDmaCh_SetControl_StoreDestinationAddress, HwAccDmaCh_SetControl_EnStart, HwAccDmaCh_SetControl_EnMajor, HwAccDmaCh_SetControl_EnHalfMajor, HwAccDmaCh_SetControl_DisAutoHwRequest, HwAccDmaCh_SetControl_EnEndOfPacketSignal, HwAccDmaCh_SetControl_BandwidthControl};
  void (*<T69d>) (const uint32, struct Dma_Ip_TcdRegType *, const uint32) _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = fpHwAcc_DmaCh_SetTransferParam[Parameter_3(D)];
  _1 (LocHwVers_4(D), pxLocTcd_5(D), LocValue_6(D));
  return;

}


HwAccDmaCh_SetControl_BandwidthControl (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetControl_BandwidthControl (pxLocTcd_4(D), LocValue_5(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetControl_EnEndOfPacketSignal (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetControl_EnEndOfPacketSignal (pxLocTcd_4(D), LocValue_5(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetControl_DisAutoHwRequest (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetControl_DisAutoHwRequest (pxLocTcd_4(D), LocValue_5(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetControl_EnHalfMajor (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetControl_EnHalfMajor (pxLocTcd_4(D), LocValue_5(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetControl_EnMajor (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetControl_EnMajor (pxLocTcd_4(D), LocValue_5(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetControl_EnStart (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  _Bool _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_3(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = LocValue_5(D) != 0;
  hwv3AccInlineDmaCh_SetControl_EnStart (pxLocTcd_6(D), _1);
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetControl_StoreDestinationAddress (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetControl_StoreDestinationAddress (pxLocTcd_4(D), LocValue_5(D));
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetAuxiliary_EnDestinationStoreAddress (pxLocTcd_4(D), 1);
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetMajorLoop_Count (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetMajorLoop_Count (pxLocTcd_4(D), LocValue_5(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetMajorLoop_LogicLinkCh (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  uint32 hwLinkCh;

  <bb 2> :
  # DEBUG BEGIN_STMT
  hwLinkCh_5 = Dma_Ip_ConvertLogicChToHwCh (LocValue_3(D));
  # DEBUG hwLinkCh => hwLinkCh_5
  # DEBUG BEGIN_STMT
  if (LocHwVers_6(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetMajorLoop_LinkCh (pxLocTcd_7(D), hwLinkCh_5);
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetMajorLoop_EnLink (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetMajorLoop_EnLink (pxLocTcd_4(D), LocValue_5(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetMinorLoop_Size (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetMinorLoop_Size (pxLocTcd_4(D), LocValue_5(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetMinorLoop_LogicLinkCh (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  uint32 hwLinkCh;

  <bb 2> :
  # DEBUG BEGIN_STMT
  hwLinkCh_5 = Dma_Ip_ConvertLogicChToHwCh (LocValue_3(D));
  # DEBUG hwLinkCh => hwLinkCh_5
  # DEBUG BEGIN_STMT
  if (LocHwVers_6(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetMinorLoop_LinkCh (pxLocTcd_7(D), hwLinkCh_5);
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetMinorLoop_EnLink (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetMinorLoop_EnLink (pxLocTcd_4(D), LocValue_5(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetMinorLoop_Offset (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetMinorLoop_SignedOffset (pxLocTcd_4(D), LocValue_5(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetMinorLoop_enDstOffset (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetMinorLoop_enDstOffset (pxLocTcd_4(D), LocValue_5(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetMinorLoop_enSrcOffset (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetMinorLoop_enSrcOffset (pxLocTcd_4(D), LocValue_5(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetDestination_Modulo (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetDestination_Modulo (pxLocTcd_4(D), LocValue_5(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetDestination_TransferSize (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetDestination_TransferSize (pxLocTcd_4(D), LocValue_5(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetDestination_LastAddrAdj (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetDestination_LastAddrAdj (pxLocTcd_4(D), LocValue_5(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetDestination_SignedOffset (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetDestination_SignedOffset (pxLocTcd_4(D), LocValue_5(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetDestination_Address (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetDestination_Address (pxLocTcd_4(D), LocValue_5(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetSource_Modulo (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetSource_Modulo (pxLocTcd_4(D), LocValue_5(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetSource_TransferSize (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetSource_TransferSize (pxLocTcd_4(D), LocValue_5(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetSource_LastAddrAdj (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetAuxiliary_EnDestinationStoreAddress (pxLocTcd_4(D), 0);
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetSource_SignedLastAddrAdj (pxLocTcd_4(D), LocValue_6(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetSource_SignedOffset (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetSource_SignedOffset (pxLocTcd_4(D), LocValue_5(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetSource_Address (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetSource_Address (pxLocTcd_4(D), LocValue_5(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetGlobalParam (const uint32 Parameter, const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, const uint32 LocValue)
{
  static void (*<T68d>) (const uint32, const uint32, const uint32, const uint32) fpHwAcc_DmaCh_SetGlobalParam[11] = {HwAccDmaCh_SetControl_EnMasterIdReplication, HwAccDmaCh_SetControl_EnBufferedWrites, HwAccDmaCh_SetRequest_EnMuxSource, HwAccDmaCh_SetRequest_MuxSource, HwAccDmaCh_SetRequest_EnMuxTrigger, HwAccDmaCh_SetRequest_EnRequest, HwAccDmaCh_SetInterrupt_EnError, HwAccDmaCh_SetPriority_Group, HwAccDmaCh_SetPriority_Level, HwAccDmaCh_SetPriority_EnPreemption, HwAccDmaCh_SetPriority_DisPreempt};
  void (*<T689>) (const uint32, const uint32, const uint32, const uint32) _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = fpHwAcc_DmaCh_SetGlobalParam[Parameter_3(D)];
  _1 (LocHwVers_4(D), LocHwInst_5(D), LocHwCh_6(D), LocValue_7(D));
  return;

}


HwAccDmaCh_SetPriority_DisPreempt (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, const uint32 LocValue)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_ChRegType * _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_6(D)][LocHwCh_7(D)];
  _2 = &_1->tChReg;
  hwv3AccInlineDmaCh_SetPriority_DisPreempt (_2, LocValue_8(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetPriority_EnPreemption (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, const uint32 LocValue)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_ChRegType * _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_6(D)][LocHwCh_7(D)];
  _2 = &_1->tChReg;
  hwv3AccInlineDmaCh_SetPriority_EnPreemption (_2, LocValue_8(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetPriority_Level (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, const uint32 LocValue)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_ChRegType * _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_6(D)][LocHwCh_7(D)];
  _2 = &_1->tChReg;
  hwv3AccInlineDmaCh_SetPriority_Level (_2, LocValue_8(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetPriority_Group (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, const uint32 LocValue)
{
  struct Dma_Ip_Hwv3InstRegType * _1;
  volatile uint32 * _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = 1075888128B;
  _2 = &_1->reg_CH_GRPRI[LocHwCh_6(D)];
  hwv3AccInlineDmaCh_SetPriority_Group (_2, LocValue_7(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetInterrupt_EnError (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, const uint32 LocValue)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_ChRegType * _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_6(D)][LocHwCh_7(D)];
  _2 = &_1->tChReg;
  hwv3AccInlineDmaCh_SetInterrupt_EnError (_2, LocValue_8(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetRequest_EnRequest (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, const uint32 LocValue)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_ChRegType * _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_6(D)][LocHwCh_7(D)];
  _2 = &_1->tChReg;
  hwv3AccInlineDmaCh_SetRequest_EnHwRequest (_2, LocValue_8(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetRequest_EnMuxTrigger (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, const uint32 LocValue)
{
  uint32 LocDmaMuxCh;
  uint32 LocDmaMuxInst;
  uint32 LocDmaCh;
  long unsigned int _1;
  long unsigned int _2;
  struct DMAMUX_Type * _3;
  volatile uint8_t * _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  LocDmaCh_6 = 0;
  # DEBUG LocDmaCh => LocDmaCh_6
  # DEBUG BEGIN_STMT
  LocDmaMuxInst_7 = 0;
  # DEBUG LocDmaMuxInst => LocDmaMuxInst_7
  # DEBUG BEGIN_STMT
  LocDmaMuxCh_8 = 0;
  # DEBUG LocDmaMuxCh => LocDmaMuxCh_8
  # DEBUG BEGIN_STMT
  if (LocHwVers_9(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = LocHwInst_11(D) * 32;
  LocDmaCh_13 = LocHwCh_12(D) + _1;
  # DEBUG LocDmaCh => LocDmaCh_13
  # DEBUG BEGIN_STMT
  LocDmaMuxInst_14 = LocDmaCh_13 / 6;
  # DEBUG LocDmaMuxInst => LocDmaMuxInst_14
  # DEBUG BEGIN_STMT
  _2 = LocDmaCh_13 % 6;
  LocDmaMuxCh_15 = _2 ^ 3;
  # DEBUG LocDmaMuxCh => LocDmaMuxCh_15
  # DEBUG BEGIN_STMT
  _3 = Dma_Ip_paxHwv3MuxBase[LocDmaMuxInst_14];
  _4 = &_3->CHCFG[LocDmaMuxCh_15];
  hwv3AccInlineDmaCh_SetRequest_EnTriggerMux (_4, LocValue_16(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetRequest_MuxSource (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, const uint32 LocValue)
{
  uint32 LocDmaMuxCh;
  uint32 LocDmaMuxInst;
  uint32 LocDmaCh;
  long unsigned int _1;
  long unsigned int _2;
  struct DMAMUX_Type * _3;
  volatile uint8_t * _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  LocDmaCh_6 = 0;
  # DEBUG LocDmaCh => LocDmaCh_6
  # DEBUG BEGIN_STMT
  LocDmaMuxInst_7 = 0;
  # DEBUG LocDmaMuxInst => LocDmaMuxInst_7
  # DEBUG BEGIN_STMT
  LocDmaMuxCh_8 = 0;
  # DEBUG LocDmaMuxCh => LocDmaMuxCh_8
  # DEBUG BEGIN_STMT
  if (LocHwVers_9(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = LocHwInst_11(D) * 32;
  LocDmaCh_13 = LocHwCh_12(D) + _1;
  # DEBUG LocDmaCh => LocDmaCh_13
  # DEBUG BEGIN_STMT
  LocDmaMuxInst_14 = LocDmaCh_13 / 6;
  # DEBUG LocDmaMuxInst => LocDmaMuxInst_14
  # DEBUG BEGIN_STMT
  _2 = LocDmaCh_13 % 6;
  LocDmaMuxCh_15 = _2 ^ 3;
  # DEBUG LocDmaMuxCh => LocDmaMuxCh_15
  # DEBUG BEGIN_STMT
  _3 = Dma_Ip_paxHwv3MuxBase[LocDmaMuxInst_14];
  _4 = &_3->CHCFG[LocDmaMuxCh_15];
  hwv3AccInlineDmaCh_SetRequest_SourceMux (_4, LocValue_16(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetRequest_EnMuxSource (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, const uint32 LocValue)
{
  uint32 LocDmaMuxCh;
  uint32 LocDmaMuxInst;
  uint32 LocDmaCh;
  long unsigned int _1;
  long unsigned int _2;
  struct DMAMUX_Type * _3;
  volatile uint8_t * _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  LocDmaCh_6 = 0;
  # DEBUG LocDmaCh => LocDmaCh_6
  # DEBUG BEGIN_STMT
  LocDmaMuxInst_7 = 0;
  # DEBUG LocDmaMuxInst => LocDmaMuxInst_7
  # DEBUG BEGIN_STMT
  LocDmaMuxCh_8 = 0;
  # DEBUG LocDmaMuxCh => LocDmaMuxCh_8
  # DEBUG BEGIN_STMT
  if (LocHwVers_9(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = LocHwInst_11(D) * 32;
  LocDmaCh_13 = LocHwCh_12(D) + _1;
  # DEBUG LocDmaCh => LocDmaCh_13
  # DEBUG BEGIN_STMT
  LocDmaMuxInst_14 = LocDmaCh_13 / 6;
  # DEBUG LocDmaMuxInst => LocDmaMuxInst_14
  # DEBUG BEGIN_STMT
  _2 = LocDmaCh_13 % 6;
  LocDmaMuxCh_15 = _2 ^ 3;
  # DEBUG LocDmaMuxCh => LocDmaMuxCh_15
  # DEBUG BEGIN_STMT
  _3 = Dma_Ip_paxHwv3MuxBase[LocDmaMuxInst_14];
  _4 = &_3->CHCFG[LocDmaMuxCh_15];
  hwv3AccInlineDmaCh_SetRequest_EnHwRequestMux (_4, LocValue_16(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetControl_EnBufferedWrites (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, const uint32 LocValue)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_ChRegType * _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_6(D)][LocHwCh_7(D)];
  _2 = &_1->tChReg;
  hwv3AccInlineDmaCh_SetControl_EnBufferedWrites (_2, LocValue_8(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetControl_EnMasterIdReplication (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, const uint32 LocValue)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_ChRegType * _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_6(D)][LocHwCh_7(D)];
  _2 = &_1->tChReg;
  hwv3AccInlineDmaCh_SetControl_EnMasterIdReplication (_2, LocValue_8(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_GetStatus_Error (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, uint32 * const pLocError)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_ChRegType * _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_6(D)][LocHwCh_7(D)];
  _2 = &_1->tChReg;
  hwv3AccInlineDmaCh_GetErrorStatus (_2, pLocError_8(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_GetStatus (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, struct Dma_Ip_LogicChannelStatusType * const pChStatus)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_ChRegType * _2;
  boolean * _3;
  struct Dma_Ip_Hwv3ChTcdRegType * _4;
  struct Dma_Ip_ChRegType * _5;
  boolean * _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_8(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_10(D)][LocHwCh_11(D)];
  _2 = &_1->tChReg;
  _3 = &pChStatus_12(D)->Active;
  hwv3AccInlineDmaCh_GetActiveStatus (_2, _3);
  # DEBUG BEGIN_STMT
  _4 = g_ptHwChTcdPtrArray[LocHwInst_10(D)][LocHwCh_11(D)];
  _5 = &_4->tChReg;
  _6 = &pChStatus_12(D)->Done;
  hwv3AccInlineDmaCh_GetDoneStatus (_5, _6);
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_SetCommand (const uint32 Command, const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh)
{
  static void (*<T673>) (const uint32, const uint32, const uint32) fpHwAcc_DmaCh_Command[5] = {HwAccDmaCh_CmdSetHwRequest, HwAccDmaCh_CmdClearHwRequest, HwAccDmaCh_CmdSetSwRequest, HwAccDmaCh_CmdClearDone, HwAccDmaCh_CmdClearError};
  void (*<T66f>) (const uint32, const uint32, const uint32) _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = fpHwAcc_DmaCh_Command[Command_3(D)];
  _1 (LocHwVers_4(D), LocHwInst_5(D), LocHwCh_6(D));
  return;

}


HwAccDmaCh_CmdClearError (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_ChRegType * _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_6(D)][LocHwCh_7(D)];
  _2 = &_1->tChReg;
  hwv3AccInlineDmaCh_CmdClearError (_2);
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_CmdClearDone (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_ChRegType * _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_6(D)][LocHwCh_7(D)];
  _2 = &_1->tChReg;
  hwv3AccInlineDmaCh_CmdClearDone (_2);
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_CmdSetSwRequest (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_TcdRegType * _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_6(D)][LocHwCh_7(D)];
  _2 = &_1->tTcdReg;
  hwv3AccInlineDmaCh_CmdSwReqStart (_2);
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_CmdClearHwRequest (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_ChRegType * _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_6(D)][LocHwCh_7(D)];
  _2 = &_1->tChReg;
  hwv3AccInlineDmaCh_CmdClearRequest (_2);
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_CmdSetHwRequest (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_ChRegType * _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_6(D)][LocHwCh_7(D)];
  _2 = &_1->tChReg;
  hwv3AccInlineDmaCh_CmdSetRequest (_2);
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaInst_GetStatus (const struct Dma_Ip_LogicInstanceIdType * const pxLocLogicInst, struct Dma_Ip_LogicInstanceStatusType * const Status)
{
  uint32 LocHwInst;
  uint32 LocHwVers;
  unsigned char _1;
  unsigned char _2;
  struct Dma_Ip_Hwv3InstRegType * _3;
  uint32 * _4;
  struct Dma_Ip_Hwv3InstRegType * _5;
  uint8 * _6;
  struct Dma_Ip_Hwv3InstRegType * _7;
  boolean * _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = pxLocLogicInst_11(D)->HwVersId;
  LocHwVers_12 = (uint32) _1;
  # DEBUG LocHwVers => LocHwVers_12
  # DEBUG BEGIN_STMT
  _2 = pxLocLogicInst_11(D)->HwInstId;
  LocHwInst_13 = (uint32) _2;
  # DEBUG LocHwInst => LocHwInst_13
  # DEBUG BEGIN_STMT
  if (LocHwVers_12 == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = 1075888128B;
  _4 = &Status_14(D)->Errors;
  hwv3AccInlineDmaInst_GetErrorStatus (_3, _4);
  # DEBUG BEGIN_STMT
  _5 = 1075888128B;
  _6 = &Status_14(D)->ActiveId;
  hwv3AccInlineDmaInst_GetActiveIdStatus (_5, _6);
  # DEBUG BEGIN_STMT
  _7 = 1075888128B;
  _8 = &Status_14(D)->Active;
  hwv3AccInlineDmaInst_GetActiveStatus (_7, _8);
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaInst_SetCommand (const uint32 Command, const struct Dma_Ip_LogicInstanceIdType * const pxLocLogicInst)
{
  static void (*<T65c>) (const struct Dma_Ip_LogicInstanceIdType * const) fpHwAcc_DmaInst_Command[4] = {hwAccDmaInst_CmdCancelTransfer, hwAccDmaInst_CmdCancelTransferWithError, hwAccDmaInst_CmdHalt, hwAccDmaInst_CmdResume};
  void (*<T658>) (const struct Dma_Ip_LogicInstanceIdType * const) _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = fpHwAcc_DmaInst_Command[Command_3(D)];
  _1 (pxLocLogicInst_4(D));
  return;

}


hwAccDmaInst_CmdResume (const struct Dma_Ip_LogicInstanceIdType * const pxLocLogicInst)
{
  uint32 LocHwInst;
  uint32 LocHwVers;
  unsigned char _1;
  unsigned char _2;
  struct Dma_Ip_Hwv3InstRegType * _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = pxLocLogicInst_6(D)->HwVersId;
  LocHwVers_7 = (uint32) _1;
  # DEBUG LocHwVers => LocHwVers_7
  # DEBUG BEGIN_STMT
  _2 = pxLocLogicInst_6(D)->HwInstId;
  LocHwInst_8 = (uint32) _2;
  # DEBUG LocHwInst => LocHwInst_8
  # DEBUG BEGIN_STMT
  if (LocHwVers_7 == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _3 = 1075888128B;
  hwv3AccInlineDmaInst_CmdResume (_3);
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


hwAccDmaInst_CmdHalt (const struct Dma_Ip_LogicInstanceIdType * const pxLocLogicInst)
{
  uint32 LocHwInst;
  uint32 LocHwVers;
  unsigned char _1;
  unsigned char _2;
  struct Dma_Ip_Hwv3InstRegType * _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = pxLocLogicInst_6(D)->HwVersId;
  LocHwVers_7 = (uint32) _1;
  # DEBUG LocHwVers => LocHwVers_7
  # DEBUG BEGIN_STMT
  _2 = pxLocLogicInst_6(D)->HwInstId;
  LocHwInst_8 = (uint32) _2;
  # DEBUG LocHwInst => LocHwInst_8
  # DEBUG BEGIN_STMT
  if (LocHwVers_7 == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _3 = 1075888128B;
  hwv3AccInlineDmaInst_CmdHalt (_3);
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


hwAccDmaInst_CmdCancelTransferWithError (const struct Dma_Ip_LogicInstanceIdType * const pxLocLogicInst)
{
  uint32 LocHwInst;
  uint32 LocHwVers;
  unsigned char _1;
  unsigned char _2;
  struct Dma_Ip_Hwv3InstRegType * _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = pxLocLogicInst_6(D)->HwVersId;
  LocHwVers_7 = (uint32) _1;
  # DEBUG LocHwVers => LocHwVers_7
  # DEBUG BEGIN_STMT
  _2 = pxLocLogicInst_6(D)->HwInstId;
  LocHwInst_8 = (uint32) _2;
  # DEBUG LocHwInst => LocHwInst_8
  # DEBUG BEGIN_STMT
  if (LocHwVers_7 == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _3 = 1075888128B;
  hwv3AccInlineDmaInst_CmdCancelTransferWithError (_3);
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


hwAccDmaInst_CmdCancelTransfer (const struct Dma_Ip_LogicInstanceIdType * const pxLocLogicInst)
{
  uint32 LocHwInst;
  uint32 LocHwVers;
  unsigned char _1;
  unsigned char _2;
  struct Dma_Ip_Hwv3InstRegType * _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = pxLocLogicInst_6(D)->HwVersId;
  LocHwVers_7 = (uint32) _1;
  # DEBUG LocHwVers => LocHwVers_7
  # DEBUG BEGIN_STMT
  _2 = pxLocLogicInst_6(D)->HwInstId;
  LocHwInst_8 = (uint32) _2;
  # DEBUG LocHwInst => LocHwInst_8
  # DEBUG BEGIN_STMT
  if (LocHwVers_7 == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _3 = 1075888128B;
  hwv3AccInlineDmaInst_CmdCancelTransfer (_3);
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaInst_SetConfig (const struct Dma_Ip_LogicInstanceIdType * const pxLocLogicInst, const struct Dma_Ip_LogicInstanceConfigType * const pxLocInstConfig)
{
  uint32 LocHwInst;
  uint32 LocHwVers;
  unsigned char _1;
  unsigned char _2;
  struct Dma_Ip_Hwv3InstRegType * _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = pxLocLogicInst_6(D)->HwVersId;
  LocHwVers_7 = (uint32) _1;
  # DEBUG LocHwVers => LocHwVers_7
  # DEBUG BEGIN_STMT
  _2 = pxLocLogicInst_6(D)->HwInstId;
  LocHwInst_8 = (uint32) _2;
  # DEBUG LocHwInst => LocHwInst_8
  # DEBUG BEGIN_STMT
  if (LocHwVers_7 == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _3 = 1075888128B;
  hwv3AccInlineDmaInst_SetConfig (_3, pxLocInstConfig_9(D));
  # DEBUG BEGIN_STMT

  <bb 4> :
  return;

}


HwAccDmaCh_GetParamDummyFunction (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, uint32 * const retValue)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


hwv3AccInlineDmaCh_SetSignedMinorLoopOffset (struct Dma_Ip_TcdRegType * ptTcd, const struct Dma_Ip_ScatterGatherConfigType * const pxLocScatterGather)
{
  uint32 reg;
  long unsigned int _1;
  struct Dma_Ip_TransferConfigType * _2;
  _Bool _3;
  long unsigned int _4;
  struct Dma_Ip_TransferConfigType * _5;
  _Bool _6;
  long unsigned int _7;
  struct Dma_Ip_TransferConfigType * _8;
  long int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int iftmp.17_13;
  long unsigned int iftmp.18_14;
  long unsigned int iftmp.17_19;
  long unsigned int iftmp.17_20;
  long unsigned int iftmp.18_22;
  long unsigned int iftmp.18_23;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_17 = ptTcd_16(D)->reg_NBYTES.reg_MLOFFYES;
  # DEBUG reg => reg_17
  # DEBUG BEGIN_STMT
  _1 = reg_17 & 2147483647;
  _2 = pxLocScatterGather_18(D)->TransferConfig;
  _3 = _2->MinorLoop.EnSrcOffset;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.17_20 = 2147483648;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.17_19 = 0;

  <bb 5> :
  # iftmp.17_13 = PHI <iftmp.17_20(3), iftmp.17_19(4)>
  reg_21 = iftmp.17_13 | _1;
  # DEBUG reg => reg_21
  # DEBUG BEGIN_STMT
  _4 = reg_21 & 3221225471;
  _5 = pxLocScatterGather_18(D)->TransferConfig;
  _6 = _5->MinorLoop.EnDstOffset;
  if (_6 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.18_23 = 1073741824;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.18_22 = 0;

  <bb 8> :
  # iftmp.18_14 = PHI <iftmp.18_23(6), iftmp.18_22(7)>
  reg_24 = iftmp.18_14 | _4;
  # DEBUG reg => reg_24
  # DEBUG BEGIN_STMT
  _7 = reg_24 & 3221226495;
  _8 = pxLocScatterGather_18(D)->TransferConfig;
  _9 = _8->MinorLoop.Offset;
  _10 = (long unsigned int) _9;
  _11 = _10 << 10;
  _12 = _11 & 1073740800;
  reg_25 = _7 | _12;
  # DEBUG reg => reg_25
  # DEBUG BEGIN_STMT
  ptTcd_16(D)->reg_NBYTES.reg_MLOFFYES = reg_25;
  return;

}


hwv3AccInlineDmaCh_SetTransferAttributes (struct Dma_Ip_TcdRegType * ptTcd, const struct Dma_Ip_ScatterGatherConfigType * const pxLocScatterGather)
{
  uint16 reg;
  short unsigned int _1;
  struct Dma_Ip_TransferConfigType * _2;
  unsigned char _3;
  short unsigned int _4;
  short unsigned int _5;
  short unsigned int _6;
  short unsigned int _7;
  struct Dma_Ip_TransferConfigType * _8;
  unsigned char _9;
  short unsigned int _10;
  short unsigned int _11;
  short unsigned int _12;
  struct Dma_Ip_TransferConfigType * _13;
  unsigned char _14;
  short unsigned int _15;
  short unsigned int _16;
  short unsigned int _17;
  struct Dma_Ip_TransferConfigType * _18;
  unsigned char _19;
  short unsigned int _20;
  short unsigned int _21;
  short unsigned int _22;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_25 = ptTcd_24(D)->reg_ATTR;
  # DEBUG reg => reg_25
  # DEBUG BEGIN_STMT
  _1 = reg_25 & 63743;
  _2 = pxLocScatterGather_26(D)->TransferConfig;
  _3 = _2->Source.TransferSize;
  _4 = (short unsigned int) _3;
  _5 = _4 << 8;
  _6 = _5 & 1792;
  reg_27 = _1 | _6;
  # DEBUG reg => reg_27
  # DEBUG BEGIN_STMT
  _7 = reg_27 & 2047;
  _8 = pxLocScatterGather_26(D)->TransferConfig;
  _9 = _8->Source.Modulo;
  _10 = (short unsigned int) _9;
  _11 = _10 << 11;
  reg_28 = _7 | _11;
  # DEBUG reg => reg_28
  # DEBUG BEGIN_STMT
  _12 = reg_28 & 65528;
  _13 = pxLocScatterGather_26(D)->TransferConfig;
  _14 = _13->Destination.TransferSize;
  _15 = (short unsigned int) _14;
  _16 = _15 & 7;
  reg_29 = _12 | _16;
  # DEBUG reg => reg_29
  # DEBUG BEGIN_STMT
  _17 = reg_29 & 65287;
  _18 = pxLocScatterGather_26(D)->TransferConfig;
  _19 = _18->Destination.Modulo;
  _20 = (short unsigned int) _19;
  _21 = _20 << 3;
  _22 = _21 & 255;
  reg_30 = _17 | _22;
  # DEBUG reg => reg_30
  # DEBUG BEGIN_STMT
  ptTcd_24(D)->reg_ATTR = reg_30;
  return;

}


hwv3AccInlineDmaCh_SetControlAndStatus (struct Dma_Ip_TcdRegType * ptTcd, const struct Dma_Ip_ScatterGatherConfigType * const pxLocScatterGather)
{
  uint16 reg;
  short unsigned int _1;
  struct Dma_Ip_TransferConfigType * _2;
  _Bool _3;
  _Bool _4;
  short unsigned int _5;
  short unsigned int _6;
  struct Dma_Ip_TransferConfigType * _7;
  _Bool _8;
  short unsigned int _9;
  struct Dma_Ip_TransferConfigType * _10;
  _Bool _11;
  short unsigned int _12;
  struct Dma_Ip_TransferConfigType * _13;
  _Bool _14;
  short unsigned int _15;
  struct Dma_Ip_TransferConfigType * _16;
  _Bool _17;
  short unsigned int _18;
  struct Dma_Ip_TransferConfigType * _19;
  unsigned char _20;
  short unsigned int _21;
  short unsigned int _22;
  uint16 iftmp.13_23;
  uint16 iftmp.14_24;
  uint16 iftmp.15_25;
  uint16 iftmp.16_26;
  uint16 iftmp.13_32;
  uint16 iftmp.13_33;
  uint16 iftmp.14_35;
  uint16 iftmp.14_36;
  uint16 iftmp.15_38;
  uint16 iftmp.15_39;
  uint16 iftmp.16_41;
  uint16 iftmp.16_42;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_29 = ptTcd_28(D)->reg_CSR;
  # DEBUG reg => reg_29
  # DEBUG BEGIN_STMT
  _1 = reg_29 & 65534;
  _2 = pxLocScatterGather_30(D)->TransferConfig;
  _3 = _2->Control.EnStart;
  _4 = _3;
  _5 = (short unsigned int) _4;
  reg_31 = _1 | _5;
  # DEBUG reg => reg_31
  # DEBUG BEGIN_STMT
  _6 = reg_31 & 65533;
  _7 = pxLocScatterGather_30(D)->TransferConfig;
  _8 = _7->Control.EnMajorInt;
  if (_8 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.13_33 = 2;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.13_32 = 0;

  <bb 5> :
  # iftmp.13_23 = PHI <iftmp.13_33(3), iftmp.13_32(4)>
  reg_34 = iftmp.13_23 | _6;
  # DEBUG reg => reg_34
  # DEBUG BEGIN_STMT
  _9 = reg_34 & 65531;
  _10 = pxLocScatterGather_30(D)->TransferConfig;
  _11 = _10->Control.EnHalfMajorInt;
  if (_11 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.14_36 = 4;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.14_35 = 0;

  <bb 8> :
  # iftmp.14_24 = PHI <iftmp.14_36(6), iftmp.14_35(7)>
  reg_37 = iftmp.14_24 | _9;
  # DEBUG reg => reg_37
  # DEBUG BEGIN_STMT
  _12 = reg_37 & 65527;
  _13 = pxLocScatterGather_30(D)->TransferConfig;
  _14 = _13->Control.DisAutoHwRequest;
  if (_14 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  iftmp.15_39 = 8;
  goto <bb 11>; [INV]

  <bb 10> :
  iftmp.15_38 = 0;

  <bb 11> :
  # iftmp.15_25 = PHI <iftmp.15_39(9), iftmp.15_38(10)>
  reg_40 = iftmp.15_25 | _12;
  # DEBUG reg => reg_40
  # DEBUG BEGIN_STMT
  _15 = reg_40 & 65471;
  _16 = pxLocScatterGather_30(D)->TransferConfig;
  _17 = _16->Control.EnEndOfPacketSignal;
  if (_17 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  iftmp.16_42 = 64;
  goto <bb 14>; [INV]

  <bb 13> :
  iftmp.16_41 = 0;

  <bb 14> :
  # iftmp.16_26 = PHI <iftmp.16_42(12), iftmp.16_41(13)>
  reg_43 = iftmp.16_26 | _15;
  # DEBUG reg => reg_43
  # DEBUG BEGIN_STMT
  _18 = reg_43 & 16383;
  _19 = pxLocScatterGather_30(D)->TransferConfig;
  _20 = _19->Control.BandwidthControl;
  _21 = (short unsigned int) _20;
  _22 = _21 << 14;
  reg_44 = _18 | _22;
  # DEBUG reg => reg_44
  # DEBUG BEGIN_STMT
  reg_45 = reg_44 & 65407;
  # DEBUG reg => reg_45
  # DEBUG BEGIN_STMT
  ptTcd_28(D)->reg_CSR = reg_45;
  return;

}


hwv3AccInlineDmaCh_SetAuxiliary_EnDestinationStoreAddress (struct Dma_Ip_TcdRegType * ptTcd, boolean Value)
{
  uint16 reg;
  short unsigned int _1;
  short unsigned int _2;
  uint16 iftmp.5_3;
  uint16 iftmp.5_8;
  uint16 iftmp.5_9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_6 = ptTcd_5(D)->reg_CSR;
  # DEBUG reg => reg_6
  # DEBUG BEGIN_STMT
  _1 = reg_6 & 65407;
  if (Value_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.5_9 = 128;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.5_8 = 0;

  <bb 5> :
  # iftmp.5_3 = PHI <iftmp.5_9(3), iftmp.5_8(4)>
  _2 = iftmp.5_3 | _1;
  ptTcd_5(D)->reg_CSR = _2;
  return;

}


hwv3AccInlineDmaCh_SetAuxiliary_EnScatterGatherProcessing (struct Dma_Ip_TcdRegType * ptTcd, boolean Value)
{
  uint16 reg;
  short unsigned int _1;
  short unsigned int _2;
  uint16 iftmp.12_3;
  uint16 iftmp.12_8;
  uint16 iftmp.12_9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_6 = ptTcd_5(D)->reg_CSR;
  # DEBUG reg => reg_6
  # DEBUG BEGIN_STMT
  _1 = reg_6 & 65519;
  if (Value_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.12_9 = 16;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.12_8 = 0;

  <bb 5> :
  # iftmp.12_3 = PHI <iftmp.12_9(3), iftmp.12_8(4)>
  _2 = iftmp.12_3 | _1;
  ptTcd_5(D)->reg_CSR = _2;
  return;

}


hwv3AccInlineDmaCh_GetIntHalfMajor (const struct Dma_Ip_TcdRegType * ptTcd, uint32 * const retValue)
{
  short unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = ptTcd_6(D)->reg_CSR;
  _2 = (long unsigned int) _1;
  _3 = _2 >> 2;
  _4 = _3 & 1;
  *retValue_7(D) = _4;
  return;

}


hwv3AccInlineDmaCh_GetIntMajor (const struct Dma_Ip_TcdRegType * ptTcd, uint32 * const retValue)
{
  short unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = ptTcd_6(D)->reg_CSR;
  _2 = (long unsigned int) _1;
  _3 = _2 >> 1;
  _4 = _3 & 1;
  *retValue_7(D) = _4;
  return;

}


hwv3AccInlineDmaCh_GetMasterId (const struct Dma_Ip_ChRegType * ptCh, uint32 * const retValue)
{
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = ptCh_4(D)->reg_CH_SBR;
  _2 = _1 & 63;
  *retValue_5(D) = _2;
  return;

}


hwv3AccInlineDmaCh_GetStoreDstAddress (const struct Dma_Ip_TcdRegType * ptTcd, uint32 * const retValue)
{
  long unsigned int _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = ptTcd_3(D)->reg_SLAST_SDA;
  *retValue_4(D) = _1;
  return;

}


hwv3AccInlineDmaCh_GetCurrentIterCount (const struct Dma_Ip_TcdRegType * ptTcd, uint32 * const retValue)
{
  uint16 reg;
  short unsigned int _1;
  short unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  short unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = ptTcd_10(D)->reg_CITER.reg_ELINKYES;
  reg_11 = _1 & 32768;
  # DEBUG reg => reg_11
  # DEBUG BEGIN_STMT
  if (reg_11 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = ptTcd_10(D)->reg_CITER.reg_ELINKYES;
  _3 = (long unsigned int) _2;
  _4 = _3 & 511;
  *retValue_12(D) = _4;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _5 = ptTcd_10(D)->reg_CITER.reg_ELINKNO;
  _6 = (long unsigned int) _5;
  _7 = _6 & 32767;
  *retValue_12(D) = _7;

  <bb 5> :
  return;

}


hwv3AccInlineDmaCh_GetBeginIterCount (const struct Dma_Ip_TcdRegType * ptTcd, uint32 * const retValue)
{
  uint16 reg;
  short unsigned int _1;
  short unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  short unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = ptTcd_10(D)->reg_BITER.reg_ELINKYES;
  reg_11 = _1 & 32768;
  # DEBUG reg => reg_11
  # DEBUG BEGIN_STMT
  if (reg_11 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = ptTcd_10(D)->reg_BITER.reg_ELINKYES;
  _3 = (long unsigned int) _2;
  _4 = _3 & 511;
  *retValue_12(D) = _4;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _5 = ptTcd_10(D)->reg_BITER.reg_ELINKYES;
  _6 = (long unsigned int) _5;
  _7 = _6 & 32767;
  *retValue_12(D) = _7;

  <bb 5> :
  return;

}


hwv3AccInlineDmaCh_GetDestinationAddress (const struct Dma_Ip_TcdRegType * ptTcd, uint32 * const retValue)
{
  long unsigned int _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = ptTcd_3(D)->reg_DADDR;
  *retValue_4(D) = _1;
  return;

}


hwv3AccInlineDmaCh_GetSourceAddress (const struct Dma_Ip_TcdRegType * ptTcd, uint32 * const retValue)
{
  long unsigned int _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = ptTcd_3(D)->reg_SADDR;
  *retValue_4(D) = _1;
  return;

}


hwv3AccInlineDmaCh_SetControl_BandwidthControl (struct Dma_Ip_TcdRegType * ptTcd, const uint32 Value)
{
  uint16 reg;
  short unsigned int _1;
  short unsigned int _2;
  short unsigned int _3;
  short unsigned int _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_7 = ptTcd_6(D)->reg_CSR;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  _1 = reg_7 & 16383;
  _2 = (short unsigned int) Value_8(D);
  _3 = _2 << 14;
  _4 = _1 | _3;
  ptTcd_6(D)->reg_CSR = _4;
  return;

}


hwv3AccInlineDmaCh_SetControl_EnEndOfPacketSignal (struct Dma_Ip_TcdRegType * ptTcd, const uint32 Value)
{
  uint16 reg;
  short unsigned int _1;
  short unsigned int _2;
  short unsigned int _3;
  short unsigned int _4;
  short unsigned int _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_8 = ptTcd_7(D)->reg_CSR;
  # DEBUG reg => reg_8
  # DEBUG BEGIN_STMT
  _1 = reg_8 & 65471;
  _2 = (short unsigned int) Value_9(D);
  _3 = _2 << 6;
  _4 = _3 & 64;
  _5 = _1 | _4;
  ptTcd_7(D)->reg_CSR = _5;
  return;

}


hwv3AccInlineDmaCh_SetControl_DisAutoHwRequest (struct Dma_Ip_TcdRegType * ptTcd, const uint32 Value)
{
  uint16 reg;
  short unsigned int _1;
  short unsigned int _2;
  short unsigned int _3;
  short unsigned int _4;
  short unsigned int _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_8 = ptTcd_7(D)->reg_CSR;
  # DEBUG reg => reg_8
  # DEBUG BEGIN_STMT
  _1 = reg_8 & 65527;
  _2 = (short unsigned int) Value_9(D);
  _3 = _2 << 3;
  _4 = _3 & 8;
  _5 = _1 | _4;
  ptTcd_7(D)->reg_CSR = _5;
  return;

}


hwv3AccInlineDmaCh_SetControl_EnHalfMajor (struct Dma_Ip_TcdRegType * ptTcd, const uint32 Value)
{
  uint16 reg;
  short unsigned int _1;
  short unsigned int _2;
  short unsigned int _3;
  short unsigned int _4;
  short unsigned int _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_8 = ptTcd_7(D)->reg_CSR;
  # DEBUG reg => reg_8
  # DEBUG BEGIN_STMT
  _1 = reg_8 & 65531;
  _2 = (short unsigned int) Value_9(D);
  _3 = _2 << 2;
  _4 = _3 & 4;
  _5 = _1 | _4;
  ptTcd_7(D)->reg_CSR = _5;
  return;

}


hwv3AccInlineDmaCh_SetControl_EnMajor (struct Dma_Ip_TcdRegType * ptTcd, const uint32 Value)
{
  uint16 reg;
  short unsigned int _1;
  short unsigned int _2;
  short unsigned int _3;
  short unsigned int _4;
  short unsigned int _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_8 = ptTcd_7(D)->reg_CSR;
  # DEBUG reg => reg_8
  # DEBUG BEGIN_STMT
  _1 = reg_8 & 65533;
  _2 = (short unsigned int) Value_9(D);
  _3 = _2 << 1;
  _4 = _3 & 2;
  _5 = _1 | _4;
  ptTcd_7(D)->reg_CSR = _5;
  return;

}


hwv3AccInlineDmaCh_SetControl_EnStart (struct Dma_Ip_TcdRegType * ptTcd, const boolean Value)
{
  uint16 reg;
  short unsigned int _1;
  _Bool _2;
  short unsigned int _3;
  short unsigned int _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_7 = ptTcd_6(D)->reg_CSR;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  _1 = reg_7 & 65534;
  _2 = Value_8(D);
  _3 = (short unsigned int) _2;
  _4 = _1 | _3;
  ptTcd_6(D)->reg_CSR = _4;
  return;

}


hwv3AccInlineDmaCh_SetControl_StoreDestinationAddress (struct Dma_Ip_TcdRegType * ptTcd, const uint32 Value)
{
  uint32 reg;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_3 = ptTcd_2(D)->reg_SLAST_SDA;
  # DEBUG reg => reg_3
  # DEBUG BEGIN_STMT
  ptTcd_2(D)->reg_SLAST_SDA = Value_4(D);
  return;

}


hwv3AccInlineDmaCh_SetControl_ScatterGatherAddress (struct Dma_Ip_TcdRegType * ptTcd, const uint32 Value)
{
  uint32 reg;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_3 = ptTcd_2(D)->reg_DLAST_SGA;
  # DEBUG reg => reg_3
  # DEBUG BEGIN_STMT
  ptTcd_2(D)->reg_DLAST_SGA = Value_4(D);
  return;

}


hwv3AccInlineDmaCh_SetMajorLoop_Count (struct Dma_Ip_TcdRegType * ptTcd, const uint32 Value)
{
  uint16 reg;
  short unsigned int _1;
  short unsigned int _2;
  short unsigned int _3;
  short unsigned int _4;
  short unsigned int _5;
  short unsigned int _6;
  short unsigned int _7;
  short unsigned int _8;
  short unsigned int _9;
  short unsigned int _10;
  short unsigned int _11;
  short unsigned int _12;
  short unsigned int _13;
  short unsigned int _14;
  short unsigned int _15;
  short unsigned int _16;
  short unsigned int _17;
  short unsigned int _18;
  short unsigned int _19;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = ptTcd_22(D)->reg_BITER.reg_ELINKYES;
  _2 = ptTcd_22(D)->reg_CITER.reg_ELINKYES;
  _3 = _1 | _2;
  reg_23 = _3 & 32768;
  # DEBUG reg => reg_23
  # DEBUG BEGIN_STMT
  if (reg_23 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  reg_29 = ptTcd_22(D)->reg_BITER.reg_ELINKYES;
  # DEBUG reg => reg_29
  # DEBUG BEGIN_STMT
  _4 = reg_29 & 65024;
  _5 = (short unsigned int) Value_25(D);
  _6 = _5 & 511;
  _7 = _4 | _6;
  ptTcd_22(D)->reg_BITER.reg_ELINKYES = _7;
  # DEBUG BEGIN_STMT
  reg_31 = ptTcd_22(D)->reg_CITER.reg_ELINKYES;
  # DEBUG reg => reg_31
  # DEBUG BEGIN_STMT
  _8 = reg_31 & 65024;
  _9 = (short unsigned int) Value_25(D);
  _10 = _9 & 511;
  _11 = _8 | _10;
  ptTcd_22(D)->reg_CITER.reg_ELINKYES = _11;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  reg_24 = ptTcd_22(D)->reg_BITER.reg_ELINKNO;
  # DEBUG reg => reg_24
  # DEBUG BEGIN_STMT
  _12 = reg_24 & 32768;
  _13 = (short unsigned int) Value_25(D);
  _14 = _13 & 32767;
  _15 = _12 | _14;
  ptTcd_22(D)->reg_BITER.reg_ELINKNO = _15;
  # DEBUG BEGIN_STMT
  reg_27 = ptTcd_22(D)->reg_CITER.reg_ELINKNO;
  # DEBUG reg => reg_27
  # DEBUG BEGIN_STMT
  _16 = reg_27 & 32768;
  _17 = (short unsigned int) Value_25(D);
  _18 = _17 & 32767;
  _19 = _16 | _18;
  ptTcd_22(D)->reg_CITER.reg_ELINKNO = _19;

  <bb 5> :
  return;

}


hwv3AccInlineDmaCh_SetMajorLoop_LinkCh (struct Dma_Ip_TcdRegType * ptTcd, const uint32 Value)
{
  uint16 reg;
  short unsigned int _1;
  short unsigned int _2;
  short unsigned int _3;
  short unsigned int _4;
  short unsigned int _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_8 = ptTcd_7(D)->reg_CSR;
  # DEBUG reg => reg_8
  # DEBUG BEGIN_STMT
  _1 = reg_8 & 57599;
  _2 = (short unsigned int) Value_9(D);
  _3 = _2 << 8;
  _4 = _3 & 7936;
  _5 = _1 | _4;
  ptTcd_7(D)->reg_CSR = _5;
  return;

}


hwv3AccInlineDmaCh_SetMajorLoop_EnLink (struct Dma_Ip_TcdRegType * ptTcd, const uint32 Value)
{
  uint16 reg;
  short unsigned int _1;
  short unsigned int _2;
  short unsigned int _3;
  short unsigned int _4;
  short unsigned int _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_8 = ptTcd_7(D)->reg_CSR;
  # DEBUG reg => reg_8
  # DEBUG BEGIN_STMT
  _1 = reg_8 & 65503;
  _2 = (short unsigned int) Value_9(D);
  _3 = _2 << 5;
  _4 = _3 & 32;
  _5 = _1 | _4;
  ptTcd_7(D)->reg_CSR = _5;
  return;

}


hwv3AccInlineDmaCh_SetMinorLoop_Size (struct Dma_Ip_TcdRegType * ptTcd, const uint32 Value)
{
  uint32 reg;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_11 = ptTcd_10(D)->reg_NBYTES.reg_MLOFFNO;
  # DEBUG reg => reg_11
  # DEBUG BEGIN_STMT
  _1 = reg_11 & 3221225472;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = reg_11 & 4294966272;
  _3 = Value_12(D) & 1023;
  _4 = _2 | _3;
  ptTcd_10(D)->reg_NBYTES.reg_MLOFFNO = _4;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _5 = reg_11 & 3221225472;
  _6 = Value_12(D) & 1073741823;
  _7 = _5 | _6;
  ptTcd_10(D)->reg_NBYTES.reg_MLOFFNO = _7;

  <bb 5> :
  return;

}


hwv3AccInlineDmaCh_SetMinorLoop_LinkCh (struct Dma_Ip_TcdRegType * ptTcd, const uint32 Value)
{
  uint16 reg;
  short unsigned int _1;
  short unsigned int _2;
  short unsigned int _3;
  short unsigned int _4;
  short unsigned int _5;
  short unsigned int _6;
  short unsigned int _7;
  short unsigned int _8;
  short unsigned int _9;
  short unsigned int _10;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_13 = ptTcd_12(D)->reg_BITER.reg_ELINKYES;
  # DEBUG reg => reg_13
  # DEBUG BEGIN_STMT
  _1 = reg_13 & 49663;
  _2 = (short unsigned int) Value_14(D);
  _3 = _2 << 9;
  _4 = _3 & 15872;
  _5 = _1 | _4;
  ptTcd_12(D)->reg_BITER.reg_ELINKYES = _5;
  # DEBUG BEGIN_STMT
  reg_16 = ptTcd_12(D)->reg_CITER.reg_ELINKYES;
  # DEBUG reg => reg_16
  # DEBUG BEGIN_STMT
  _6 = reg_16 & 49663;
  _7 = (short unsigned int) Value_14(D);
  _8 = _7 << 9;
  _9 = _8 & 15872;
  _10 = _6 | _9;
  ptTcd_12(D)->reg_CITER.reg_ELINKYES = _10;
  return;

}


hwv3AccInlineDmaCh_SetMinorLoop_EnLink (struct Dma_Ip_TcdRegType * ptTcd, const uint32 Value)
{
  uint16 reg;
  short unsigned int _1;
  short unsigned int _2;
  short unsigned int _3;
  short unsigned int _4;
  short unsigned int _5;
  short unsigned int _6;
  short unsigned int _7;
  short unsigned int _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_11 = ptTcd_10(D)->reg_BITER.reg_ELINKYES;
  # DEBUG reg => reg_11
  # DEBUG BEGIN_STMT
  _1 = reg_11 & 32767;
  _2 = (short unsigned int) Value_12(D);
  _3 = _2 << 15;
  _4 = _1 | _3;
  ptTcd_10(D)->reg_BITER.reg_ELINKYES = _4;
  # DEBUG BEGIN_STMT
  reg_14 = ptTcd_10(D)->reg_CITER.reg_ELINKYES;
  # DEBUG reg => reg_14
  # DEBUG BEGIN_STMT
  _5 = reg_14 & 32767;
  _6 = (short unsigned int) Value_12(D);
  _7 = _6 << 15;
  _8 = _5 | _7;
  ptTcd_10(D)->reg_CITER.reg_ELINKYES = _8;
  return;

}


hwv3AccInlineDmaCh_SetMinorLoop_SignedOffset (struct Dma_Ip_TcdRegType * ptTcd, const uint32 Value)
{
  uint32 reg;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_7 = ptTcd_6(D)->reg_NBYTES.reg_MLOFFYES;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  _1 = reg_7 & 3221226495;
  _2 = Value_8(D) << 10;
  _3 = _2 & 1073740800;
  _4 = _1 | _3;
  ptTcd_6(D)->reg_NBYTES.reg_MLOFFYES = _4;
  return;

}


hwv3AccInlineDmaCh_SetMinorLoop_enDstOffset (struct Dma_Ip_TcdRegType * ptTcd, const uint32 Value)
{
  uint32 reg;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_7 = ptTcd_6(D)->reg_NBYTES.reg_MLOFFYES;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  _1 = reg_7 & 3221225471;
  _2 = Value_8(D) << 30;
  _3 = _2 & 1073741824;
  _4 = _1 | _3;
  ptTcd_6(D)->reg_NBYTES.reg_MLOFFYES = _4;
  return;

}


hwv3AccInlineDmaCh_SetMinorLoop_enSrcOffset (struct Dma_Ip_TcdRegType * ptTcd, const uint32 Value)
{
  uint32 reg;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_6 = ptTcd_5(D)->reg_NBYTES.reg_MLOFFYES;
  # DEBUG reg => reg_6
  # DEBUG BEGIN_STMT
  _1 = reg_6 & 2147483647;
  _2 = Value_7(D) << 31;
  _3 = _1 | _2;
  ptTcd_5(D)->reg_NBYTES.reg_MLOFFYES = _3;
  return;

}


hwv3AccInlineDmaCh_SetDestination_Modulo (struct Dma_Ip_TcdRegType * ptTcd, const uint32 Value)
{
  uint16 reg;
  short unsigned int _1;
  short unsigned int _2;
  short unsigned int _3;
  short unsigned int _4;
  short unsigned int _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_8 = ptTcd_7(D)->reg_ATTR;
  # DEBUG reg => reg_8
  # DEBUG BEGIN_STMT
  _1 = reg_8 & 65287;
  _2 = (short unsigned int) Value_9(D);
  _3 = _2 << 3;
  _4 = _3 & 255;
  _5 = _1 | _4;
  ptTcd_7(D)->reg_ATTR = _5;
  return;

}


hwv3AccInlineDmaCh_SetDestination_TransferSize (struct Dma_Ip_TcdRegType * ptTcd, const uint32 Value)
{
  uint16 reg;
  short unsigned int _1;
  short unsigned int _2;
  short unsigned int _3;
  short unsigned int _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_7 = ptTcd_6(D)->reg_ATTR;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  _1 = reg_7 & 65528;
  _2 = (short unsigned int) Value_8(D);
  _3 = _2 & 7;
  _4 = _1 | _3;
  ptTcd_6(D)->reg_ATTR = _4;
  return;

}


hwv3AccInlineDmaCh_SetDestination_LastAddrAdj (struct Dma_Ip_TcdRegType * ptTcd, const uint32 Value)
{
  uint32 reg;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_3 = ptTcd_2(D)->reg_DLAST_SGA;
  # DEBUG reg => reg_3
  # DEBUG BEGIN_STMT
  ptTcd_2(D)->reg_DLAST_SGA = Value_4(D);
  return;

}


hwv3AccInlineDmaCh_SetDestination_SignedOffset (struct Dma_Ip_TcdRegType * ptTcd, const uint32 Value)
{
  uint16 reg;
  short unsigned int _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_4 = ptTcd_3(D)->reg_DOFF;
  # DEBUG reg => reg_4
  # DEBUG BEGIN_STMT
  _1 = (short unsigned int) Value_5(D);
  ptTcd_3(D)->reg_DOFF = _1;
  return;

}


hwv3AccInlineDmaCh_SetDestination_Address (struct Dma_Ip_TcdRegType * ptTcd, const uint32 Value)
{
  uint32 reg;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_3 = ptTcd_2(D)->reg_DADDR;
  # DEBUG reg => reg_3
  # DEBUG BEGIN_STMT
  ptTcd_2(D)->reg_DADDR = Value_4(D);
  return;

}


hwv3AccInlineDmaCh_SetSource_Modulo (struct Dma_Ip_TcdRegType * ptTcd, const uint32 Value)
{
  uint32 reg;
  short unsigned int _1;
  short unsigned int _2;
  short unsigned int _3;
  short unsigned int _4;
  short unsigned int _5;
  short unsigned int _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = ptTcd_8(D)->reg_ATTR;
  reg_9 = (uint32) _1;
  # DEBUG reg => reg_9
  # DEBUG BEGIN_STMT
  _2 = (short unsigned int) reg_9;
  _3 = _2 & 2047;
  _4 = (short unsigned int) Value_10(D);
  _5 = _4 << 11;
  _6 = _3 | _5;
  ptTcd_8(D)->reg_ATTR = _6;
  return;

}


hwv3AccInlineDmaCh_SetSource_TransferSize (struct Dma_Ip_TcdRegType * ptTcd, const uint32 Value)
{
  uint32 reg;
  short unsigned int _1;
  short unsigned int _2;
  short unsigned int _3;
  short unsigned int _4;
  short unsigned int _5;
  short unsigned int _6;
  short unsigned int _7;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = ptTcd_9(D)->reg_ATTR;
  reg_10 = (uint32) _1;
  # DEBUG reg => reg_10
  # DEBUG BEGIN_STMT
  _2 = (short unsigned int) reg_10;
  _3 = _2 & 63743;
  _4 = (short unsigned int) Value_11(D);
  _5 = _4 << 8;
  _6 = _5 & 1792;
  _7 = _3 | _6;
  ptTcd_9(D)->reg_ATTR = _7;
  return;

}


hwv3AccInlineDmaCh_SetSource_SignedLastAddrAdj (struct Dma_Ip_TcdRegType * ptTcd, const uint32 Value)
{
  uint32 reg;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_3 = ptTcd_2(D)->reg_SLAST_SDA;
  # DEBUG reg => reg_3
  # DEBUG BEGIN_STMT
  ptTcd_2(D)->reg_SLAST_SDA = Value_4(D);
  return;

}


hwv3AccInlineDmaCh_SetSource_SignedOffset (struct Dma_Ip_TcdRegType * ptTcd, const uint32 Value)
{
  uint32 reg;
  short unsigned int _1;
  short unsigned int _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = ptTcd_4(D)->reg_SOFF;
  reg_5 = (uint32) _1;
  # DEBUG reg => reg_5
  # DEBUG BEGIN_STMT
  _2 = (short unsigned int) Value_6(D);
  ptTcd_4(D)->reg_SOFF = _2;
  return;

}


hwv3AccInlineDmaCh_SetSource_Address (struct Dma_Ip_TcdRegType * ptTcd, const uint32 Value)
{
  uint32 reg;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_3 = ptTcd_2(D)->reg_SADDR;
  # DEBUG reg => reg_3
  # DEBUG BEGIN_STMT
  ptTcd_2(D)->reg_SADDR = Value_4(D);
  return;

}


hwv3AccInlineDmaCh_SetPriority_DisPreempt (struct Dma_Ip_ChRegType * ptCh, uint32 Value)
{
  uint32 reg;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_7 = ptCh_6(D)->reg_CH_PRI;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  _1 = reg_7 & 3221225471;
  _2 = Value_8(D) << 30;
  _3 = _2 & 1073741824;
  _4 = _1 | _3;
  ptCh_6(D)->reg_CH_PRI = _4;
  return;

}


hwv3AccInlineDmaCh_SetPriority_EnPreemption (struct Dma_Ip_ChRegType * ptCh, uint32 Value)
{
  uint32 reg;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_6 = ptCh_5(D)->reg_CH_PRI;
  # DEBUG reg => reg_6
  # DEBUG BEGIN_STMT
  _1 = reg_6 & 2147483647;
  _2 = Value_7(D) << 31;
  _3 = _1 | _2;
  ptCh_5(D)->reg_CH_PRI = _3;
  return;

}


hwv3AccInlineDmaCh_SetPriority_Level (struct Dma_Ip_ChRegType * ptCh, uint32 Value)
{
  uint32 reg;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_6 = ptCh_5(D)->reg_CH_PRI;
  # DEBUG reg => reg_6
  # DEBUG BEGIN_STMT
  _1 = reg_6 & 4294967288;
  _2 = Value_7(D) & 7;
  _3 = _1 | _2;
  ptCh_5(D)->reg_CH_PRI = _3;
  return;

}


hwv3AccInlineDmaCh_SetPriority_Group (volatile uint32 * const pGrpri, uint32 Value)
{
  uint32 reg;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_6 ={v} *pGrpri_5(D);
  # DEBUG reg => reg_6
  # DEBUG BEGIN_STMT
  _1 = reg_6 & 4294967264;
  _2 = Value_7(D) & 31;
  _3 = _1 | _2;
  *pGrpri_5(D) ={v} _3;
  return;

}


hwv3AccInlineDmaCh_SetInterrupt_EnError (struct Dma_Ip_ChRegType * ptCh, uint32 Value)
{
  uint32 reg;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_7 = ptCh_6(D)->reg_CH_CSR;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  _1 = reg_7 & 4294967291;
  _2 = Value_8(D) << 2;
  _3 = _2 & 4;
  _4 = _1 | _3;
  ptCh_6(D)->reg_CH_CSR = _4;
  return;

}


hwv3AccInlineDmaCh_SetRequest_EnHwRequest (struct Dma_Ip_ChRegType * ptCh, uint32 Value)
{
  uint32 reg;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_6 = ptCh_5(D)->reg_CH_CSR;
  # DEBUG reg => reg_6
  # DEBUG BEGIN_STMT
  _1 = reg_6 & 4294967294;
  _2 = Value_7(D) & 1;
  _3 = _1 | _2;
  ptCh_5(D)->reg_CH_CSR = _3;
  return;

}


hwv3AccInlineDmaCh_SetRequest_EnHwRequestMux (volatile Dma_Ip_MuxRegType * pMuxChCfg, const uint32 Value)
{
  Dma_Ip_MuxRegType reg;
  unsigned char _1;
  unsigned char _2;
  unsigned char _3;
  unsigned char _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_7 ={v} *pMuxChCfg_6(D);
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  _1 = reg_7 & 127;
  _2 = (unsigned char) Value_8(D);
  _3 = _2 << 7;
  _4 = _1 | _3;
  *pMuxChCfg_6(D) ={v} _4;
  return;

}


hwv3AccInlineDmaCh_SetRequest_EnTriggerMux (volatile Dma_Ip_MuxRegType * pMuxChCfg, uint32 Value)
{
  Dma_Ip_MuxRegType reg;
  unsigned char _1;
  unsigned char _2;
  unsigned char _3;
  unsigned char _4;
  unsigned char _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_8 ={v} *pMuxChCfg_7(D);
  # DEBUG reg => reg_8
  # DEBUG BEGIN_STMT
  _1 = reg_8 & 191;
  _2 = (unsigned char) Value_9(D);
  _3 = _2 << 6;
  _4 = _3 & 64;
  _5 = _1 | _4;
  *pMuxChCfg_7(D) ={v} _5;
  return;

}


hwv3AccInlineDmaCh_SetRequest_SourceMux (volatile Dma_Ip_MuxRegType * pMuxChCfg, const uint32 Value)
{
  Dma_Ip_MuxRegType reg;
  unsigned char _1;
  unsigned char _2;
  unsigned char _3;
  unsigned char _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_7 ={v} *pMuxChCfg_6(D);
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  _1 = reg_7 & 192;
  _2 = (unsigned char) Value_8(D);
  _3 = _2 & 63;
  _4 = _1 | _3;
  *pMuxChCfg_6(D) ={v} _4;
  return;

}


hwv3AccInlineDmaCh_SetControl_EnBufferedWrites (struct Dma_Ip_ChRegType * ptCh, uint32 Value)
{
  uint32 reg;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_7 = ptCh_6(D)->reg_CH_CSR;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  _1 = reg_7 & 4294967287;
  _2 = Value_8(D) << 3;
  _3 = _2 & 8;
  _4 = _1 | _3;
  ptCh_6(D)->reg_CH_CSR = _4;
  return;

}


hwv3AccInlineDmaCh_SetControl_EnMasterIdReplication (struct Dma_Ip_ChRegType * ptCh, uint32 Value)
{
  uint32 reg;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_7 = ptCh_6(D)->reg_CH_SBR;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  _1 = reg_7 & 4294901759;
  _2 = Value_8(D) << 16;
  _3 = _2 & 65536;
  _4 = _1 | _3;
  ptCh_6(D)->reg_CH_SBR = _4;
  return;

}


hwv3AccInlineDmaCh_GetDoneStatus (const struct Dma_Ip_ChRegType * ptCh, boolean * const pBool)
{
  long unsigned int _1;
  long unsigned int _2;
  _Bool _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = ptCh_5(D)->reg_CH_CSR;
  _2 = _1 & 1073741824;
  _3 = _2 != 0;
  *pBool_6(D) = _3;
  return;

}


hwv3AccInlineDmaCh_GetActiveStatus (const struct Dma_Ip_ChRegType * ptCh, boolean * const pBool)
{
  long unsigned int _1;
  signed int _2;
  _Bool _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = ptCh_5(D)->reg_CH_CSR;
  _2 = (signed int) _1;
  _3 = _2 < 0;
  *pBool_6(D) = _3;
  return;

}


hwv3AccInlineDmaCh_GetErrorStatus (const struct Dma_Ip_ChRegType * ptCh, uint32 * const pValue)
{
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = ptCh_4(D)->reg_CH_ES;
  _2 = _1 & 2147483903;
  *pValue_5(D) = _2;
  return;

}


hwv3AccInlineDmaCh_CmdClearError (struct Dma_Ip_ChRegType * ptCh)
{
  uint32 reg;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_3 = ptCh_2(D)->reg_CH_ES;
  # DEBUG reg => reg_3
  # DEBUG BEGIN_STMT
  reg_4 = reg_3 | 2147483648;
  # DEBUG reg => reg_4
  # DEBUG BEGIN_STMT
  ptCh_2(D)->reg_CH_ES = reg_4;
  return;

}


hwv3AccInlineDmaCh_CmdClearDone (struct Dma_Ip_ChRegType * ptCh)
{
  uint32 reg;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_3 = ptCh_2(D)->reg_CH_CSR;
  # DEBUG reg => reg_3
  # DEBUG BEGIN_STMT
  reg_4 = reg_3 | 1073741824;
  # DEBUG reg => reg_4
  # DEBUG BEGIN_STMT
  ptCh_2(D)->reg_CH_CSR = reg_4;
  return;

}


hwv3AccInlineDmaCh_CmdSwReqStart (struct Dma_Ip_TcdRegType * ptTcd)
{
  uint16 reg;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_3 = ptTcd_2(D)->reg_CSR;
  # DEBUG reg => reg_3
  # DEBUG BEGIN_STMT
  reg_4 = reg_3 | 1;
  # DEBUG reg => reg_4
  # DEBUG BEGIN_STMT
  ptTcd_2(D)->reg_CSR = reg_4;
  return;

}


hwv3AccInlineDmaCh_CmdClearRequest (struct Dma_Ip_ChRegType * ptCh)
{
  uint32 reg;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_3 = ptCh_2(D)->reg_CH_CSR;
  # DEBUG reg => reg_3
  # DEBUG BEGIN_STMT
  reg_4 = reg_3 & 4294967294;
  # DEBUG reg => reg_4
  # DEBUG BEGIN_STMT
  ptCh_2(D)->reg_CH_CSR = reg_4;
  return;

}


hwv3AccInlineDmaCh_CmdSetRequest (struct Dma_Ip_ChRegType * ptCh)
{
  uint32 reg;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_3 = ptCh_2(D)->reg_CH_CSR;
  # DEBUG reg => reg_3
  # DEBUG BEGIN_STMT
  reg_4 = reg_3 | 1;
  # DEBUG reg => reg_4
  # DEBUG BEGIN_STMT
  ptCh_2(D)->reg_CH_CSR = reg_4;
  return;

}


hwv3AccInlineDmaInst_GetActiveStatus (const struct Dma_Ip_Hwv3InstRegType * const ptInst, boolean * const pBool)
{
  long unsigned int _1;
  signed int _2;
  _Bool _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} ptInst_5(D)->reg_CSR;
  _2 = (signed int) _1;
  _3 = _2 < 0;
  *pBool_6(D) = _3;
  return;

}


hwv3AccInlineDmaInst_GetActiveIdStatus (const struct Dma_Ip_Hwv3InstRegType * const ptInst, uint8 * const pValue)
{
  long unsigned int _1;
  long unsigned int _2;
  unsigned char _3;
  unsigned char _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} ptInst_6(D)->reg_CSR;
  _2 = _1 >> 24;
  _3 = (unsigned char) _2;
  _4 = _3 & 31;
  *pValue_7(D) = _4;
  return;

}


hwv3AccInlineDmaInst_GetErrorStatus (const struct Dma_Ip_Hwv3InstRegType * const ptInst, uint32 * const pValue)
{
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} ptInst_4(D)->reg_ES;
  _2 = _1 & 2667578367;
  *pValue_5(D) = _2;
  return;

}


hwv3AccInlineDmaInst_CmdResume (struct Dma_Ip_Hwv3InstRegType * const ptInst)
{
  uint32 reg;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_3 ={v} ptInst_2(D)->reg_CSR;
  # DEBUG reg => reg_3
  # DEBUG BEGIN_STMT
  reg_4 = reg_3 & 4294967263;
  # DEBUG reg => reg_4
  # DEBUG BEGIN_STMT
  ptInst_2(D)->reg_CSR ={v} reg_4;
  return;

}


hwv3AccInlineDmaInst_CmdHalt (struct Dma_Ip_Hwv3InstRegType * const ptInst)
{
  uint32 reg;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_3 ={v} ptInst_2(D)->reg_CSR;
  # DEBUG reg => reg_3
  # DEBUG BEGIN_STMT
  reg_4 = reg_3 | 32;
  # DEBUG reg => reg_4
  # DEBUG BEGIN_STMT
  ptInst_2(D)->reg_CSR ={v} reg_4;
  return;

}


hwv3AccInlineDmaInst_CmdCancelTransferWithError (struct Dma_Ip_Hwv3InstRegType * const ptInst)
{
  uint32 reg;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_3 ={v} ptInst_2(D)->reg_CSR;
  # DEBUG reg => reg_3
  # DEBUG BEGIN_STMT
  reg_4 = reg_3 | 256;
  # DEBUG reg => reg_4
  # DEBUG BEGIN_STMT
  ptInst_2(D)->reg_CSR ={v} reg_4;
  return;

}


hwv3AccInlineDmaInst_CmdCancelTransfer (struct Dma_Ip_Hwv3InstRegType * const ptInst)
{
  uint32 reg;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_3 ={v} ptInst_2(D)->reg_CSR;
  # DEBUG reg => reg_3
  # DEBUG BEGIN_STMT
  reg_4 = reg_3 | 512;
  # DEBUG reg => reg_4
  # DEBUG BEGIN_STMT
  ptInst_2(D)->reg_CSR ={v} reg_4;
  return;

}


hwv3AccInlineDmaInst_SetConfig (struct Dma_Ip_Hwv3InstRegType * const ptInst, const struct Dma_Ip_LogicInstanceConfigType * const pxConfig)
{
  uint32 reg;
  long unsigned int _1;
  _Bool _2;
  long unsigned int _3;
  _Bool _4;
  long unsigned int _5;
  _Bool _6;
  long unsigned int _7;
  _Bool _8;
  long unsigned int _9;
  _Bool _10;
  long unsigned int iftmp.0_11;
  long unsigned int iftmp.1_12;
  long unsigned int iftmp.2_13;
  long unsigned int iftmp.3_14;
  long unsigned int iftmp.4_15;
  long unsigned int iftmp.0_20;
  long unsigned int iftmp.0_21;
  long unsigned int iftmp.1_23;
  long unsigned int iftmp.1_24;
  long unsigned int iftmp.2_26;
  long unsigned int iftmp.2_27;
  long unsigned int iftmp.3_29;
  long unsigned int iftmp.3_30;
  long unsigned int iftmp.4_32;
  long unsigned int iftmp.4_33;

  <bb 2> :
  # DEBUG BEGIN_STMT
  reg_18 ={v} ptInst_17(D)->reg_CSR;
  # DEBUG reg => reg_18
  # DEBUG BEGIN_STMT
  _1 = reg_18 & 4294967293;
  _2 = pxConfig_19(D)->EnDebug;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.0_21 = 2;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.0_20 = 0;

  <bb 5> :
  # iftmp.0_11 = PHI <iftmp.0_21(3), iftmp.0_20(4)>
  reg_22 = iftmp.0_11 | _1;
  # DEBUG reg => reg_22
  # DEBUG BEGIN_STMT
  _3 = reg_22 & 4294967291;
  _4 = pxConfig_19(D)->EnRoundRobin;
  if (_4 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.1_24 = 4;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.1_23 = 0;

  <bb 8> :
  # iftmp.1_12 = PHI <iftmp.1_24(6), iftmp.1_23(7)>
  reg_25 = iftmp.1_12 | _3;
  # DEBUG reg => reg_25
  # DEBUG BEGIN_STMT
  _5 = reg_25 & 4294967279;
  _6 = pxConfig_19(D)->EnHaltAfterError;
  if (_6 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  iftmp.2_27 = 16;
  goto <bb 11>; [INV]

  <bb 10> :
  iftmp.2_26 = 0;

  <bb 11> :
  # iftmp.2_13 = PHI <iftmp.2_27(9), iftmp.2_26(10)>
  reg_28 = iftmp.2_13 | _5;
  # DEBUG reg => reg_28
  # DEBUG BEGIN_STMT
  _7 = reg_28 & 4294967231;
  _8 = pxConfig_19(D)->EnChLinking;
  if (_8 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  iftmp.3_30 = 64;
  goto <bb 14>; [INV]

  <bb 13> :
  iftmp.3_29 = 0;

  <bb 14> :
  # iftmp.3_14 = PHI <iftmp.3_30(12), iftmp.3_29(13)>
  reg_31 = iftmp.3_14 | _7;
  # DEBUG reg => reg_31
  # DEBUG BEGIN_STMT
  _9 = reg_31 & 4294967167;
  _10 = pxConfig_19(D)->EnGlMasterIdReplication;
  if (_10 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  iftmp.4_33 = 128;
  goto <bb 17>; [INV]

  <bb 16> :
  iftmp.4_32 = 0;

  <bb 17> :
  # iftmp.4_15 = PHI <iftmp.4_33(15), iftmp.4_32(16)>
  reg_34 = iftmp.4_15 | _9;
  # DEBUG reg => reg_34
  # DEBUG BEGIN_STMT
  ptInst_17(D)->reg_CSR ={v} reg_34;
  return;

}


