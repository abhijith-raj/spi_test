IPA function summary for hwv3AccInlineDmaCh_GetBeginIterCount.isra/167 inlinable
  global time:     6.410000
  self size:       9
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 240] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op0[ref offset: 240] changed)
    size:0.500000, time:0.295000,  executed if:(op0[ref offset: 240],((signed short) #) >= 0) && (not inlined)
    size:0.500000, time:0.295000,  executed if:(op0[ref offset: 240],((signed short) #) >= 0)
    size:1.000000, time:0.410000,  executed if:(op0[ref offset: 240],((signed short) #) < 0),  nonconst if:(op0[ref offset: 240] changed) && (op0[ref offset: 240],((signed short) #) < 0)
    size:0.500000, time:0.205000,  executed if:(op0[ref offset: 240],((signed short) #) < 0) && (not inlined)
    size:0.500000, time:0.205000,  executed if:(op0[ref offset: 240],((signed short) #) < 0)
  calls:

IPA function summary for hwv3AccInlineDmaCh_GetCurrentIterCount.isra/166 inlinable
  global time:     6.410000
  self size:       9
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 176] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op0[ref offset: 176] changed)
    size:0.500000, time:0.295000,  executed if:(op0[ref offset: 176],((signed short) #) >= 0) && (not inlined)
    size:0.500000, time:0.295000,  executed if:(op0[ref offset: 176],((signed short) #) >= 0)
    size:1.000000, time:0.410000,  executed if:(op0[ref offset: 176],((signed short) #) < 0),  nonconst if:(op0[ref offset: 176] changed) && (op0[ref offset: 176],((signed short) #) < 0)
    size:0.500000, time:0.205000,  executed if:(op0[ref offset: 176],((signed short) #) < 0) && (not inlined)
    size:0.500000, time:0.205000,  executed if:(op0[ref offset: 176],((signed short) #) < 0)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetControlAndStatus.isra/165 inlinable
  global time:     33.000000
  self size:       34
  global size:     34
  min size:       28
  self stack:      0
  global stack:    0
    size:27.500000, time:27.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 224] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 224] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 0] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op1[ref offset: 0] changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetTransferAttributes.isra/164 inlinable
  global time:     23.000000
  self size:       24
  global size:     24
  min size:       18
  self stack:      0
  global stack:    0
    size:17.500000, time:17.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 48] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 48] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 0] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op1[ref offset: 0] changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetSignedMinorLoopOffset.isra/163 inlinable
  global time:     20.000000
  self size:       21
  global size:     21
  min size:       15
  self stack:      0
  global stack:    0
    size:14.500000, time:14.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 64] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 64] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 0] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op1[ref offset: 0] changed)
  calls:

IPA function summary for hwv3AccInlineDmaInst_SetConfig.constprop/162 inlinable
  global time:     29.000000
  self size:       30
  global size:     30
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 0] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 64] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op1[ref offset: 64] changed)
    size:2.000000, time:2.000000,  nonconst if:(op0[ref offset: 0] changed || op1[ref offset: 64] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 72] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op1[ref offset: 72] changed)
    size:2.000000, time:2.000000,  nonconst if:(op0[ref offset: 0] changed || op1[ref offset: 64] changed || op1[ref offset: 72] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 80] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op1[ref offset: 80] changed)
    size:2.000000, time:2.000000,  nonconst if:(op0[ref offset: 0] changed || op1[ref offset: 64] changed || op1[ref offset: 72] changed || op1[ref offset: 80] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 88] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op1[ref offset: 88] changed)
    size:2.000000, time:2.000000,  nonconst if:(op0[ref offset: 0] changed || op1[ref offset: 64] changed || op1[ref offset: 72] changed || op1[ref offset: 80] changed || op1[ref offset: 88] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 96] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op1[ref offset: 96] changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 0] changed || op1[ref offset: 64] changed || op1[ref offset: 72] changed || op1[ref offset: 80] changed || op1[ref offset: 88] changed || op1[ref offset: 96] changed)
  calls:

IPA function summary for HwAccDmaCh_SetControl_EnStart.part.0/159 inlinable
  global time:     7.000000
  self size:       8
  global size:     8
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op1 changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 224] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 224] changed)
    size:1.000000, time:1.000000,  nonconst if:(op1 changed || op0[ref offset: 224] changed)
  calls:

IPA function summary for HwAccDmaCh_SetControl_StoreDestinationAddress.part.0/158 inlinable
  global time:     7.000000
  self size:       8
  global size:     8
  min size:       1
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:4.000000, time:3.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 224] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op0[ref offset: 224] changed)
  calls:

IPA function summary for HwAccDmaCh_SetRequest_EnMuxTrigger.part.0/151 inlinable
  global time:     21.000000
  self size:       13
  global size:     13
  min size:       4
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:5.000000, time:5.000000,  nonconst if:(op0 changed || op1 changed)
  calls:
    hwv3AccInlineDmaCh_SetRequest_EnTriggerMux/20 function not considered for inlining
      freq:1.00 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0

IPA function summary for HwAccDmaCh_SetRequest_MuxSource.part.0/150 inlinable
  global time:     21.000000
  self size:       13
  global size:     13
  min size:       4
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:5.000000, time:5.000000,  nonconst if:(op0 changed || op1 changed)
  calls:
    hwv3AccInlineDmaCh_SetRequest_SourceMux/19 function not considered for inlining
      freq:1.00 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0

IPA function summary for HwAccDmaCh_SetRequest_EnMuxSource.part.0/149 inlinable
  global time:     21.000000
  self size:       13
  global size:     13
  min size:       4
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:5.000000, time:5.000000,  nonconst if:(op0 changed || op1 changed)
  calls:
    hwv3AccInlineDmaCh_SetRequest_EnHwRequestMux/21 function not considered for inlining
      freq:1.00 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0

IPA function summary for hwAccDmaInst_CmdResume.part.0/147 inlinable
  global time:     5.000000
  self size:       6
  global size:     6
  min size:       3
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for hwAccDmaInst_CmdHalt.part.0/146 inlinable
  global time:     5.000000
  self size:       6
  global size:     6
  min size:       3
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for hwAccDmaInst_CmdCancelTransferWithError.part.0/145 inlinable
  global time:     5.000000
  self size:       6
  global size:     6
  min size:       3
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for hwAccDmaInst_CmdCancelTransfer.part.0/144 inlinable
  global time:     5.000000
  self size:       6
  global size:     6
  min size:       3
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for HwAccDmaCh_SetControl_EnScatterGatherProcessing/137 inlinable
  global time:     6.428800
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    hwv3AccInlineDmaCh_SetAuxiliary_EnScatterGatherProcessing/63 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetControl_ScatterGatherAddress/136 inlinable
  global time:     4.340000
  self size:       6
  global size:     6
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.170000,  executed if:(op0 == 3) && (not inlined)
    size:0.500000, time:0.170000,  executed if:(op0 == 3)
  calls:

IPA function summary for HwAccDmaCh_LoadSoftwareTcdIntoHardwareTcd/135 inlinable
  global time:     16.860000
  self size:       37
  global size:     37
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op0[ref offset: 32] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 40] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 40] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 48] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 48] changed)
    size:26.000000, time:8.840000,  executed if:(op0[ref offset: 32] == 3)
    size:1.000000, time:0.340000,  executed if:(op0[ref offset: 32] == 3),  nonconst if:(op0[ref offset: 48] changed) && (op0[ref offset: 32] == 3)
    size:1.000000, time:0.340000,  executed if:(op0[ref offset: 32] == 3),  nonconst if:(op0[ref offset: 40] changed) && (op0[ref offset: 32] == 3)
    size:0.500000, time:0.170000,  executed if:(op0[ref offset: 32] == 3) && (not inlined),  nonconst if:(op1[ref offset: 32] changed) && (op0[ref offset: 32] == 3) && (not inlined)
    size:0.500000, time:0.170000,  executed if:(op0[ref offset: 32] == 3),  nonconst if:(op1[ref offset: 32] changed) && (op0[ref offset: 32] == 3)
  calls:

IPA function summary for HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 inlinable
  global time:     41.409367
  self size:       98
  global size:     98
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:2.000000, time:0.680000,  executed if:(op0 == 3),  nonconst if:(op3 changed) && (op0 == 3)
    size:0.500000, time:0.085000,  executed if:(op3 == 0) && (op0 == 3) && (not inlined),  nonconst if:(op1[ref offset: 32] changed) && (op3 == 0) && (op0 == 3) && (not inlined)
    size:0.500000, time:0.085000,  executed if:(op3 == 0) && (op0 == 3),  nonconst if:(op1[ref offset: 32] changed) && (op3 == 0) && (op0 == 3)
    size:1.000000, time:0.170000,  executed if:(op3 == 0) && (op0 == 3)
    size:0.500000, time:0.085000,  executed if:(op3 != 0) && (op0 == 3) && (not inlined),  nonconst if:(op1[ref offset: 32] changed) && (op3 != 0) && (op0 == 3) && (not inlined)
    size:0.500000, time:0.085000,  executed if:(op3 != 0) && (op0 == 3),  nonconst if:(op1[ref offset: 32] changed) && (op3 != 0) && (op0 == 3)
    size:0.500000, time:0.085000,  executed if:(op3 != 0) && (op0 == 3) && (not inlined),  nonconst if:(op1[ref offset: 96] changed) && (op3 != 0) && (op0 == 3) && (not inlined)
    size:0.500000, time:0.085000,  executed if:(op3 != 0) && (op0 == 3),  nonconst if:(op1[ref offset: 96] changed) && (op3 != 0) && (op0 == 3)
    size:2.000000, time:0.340000,  executed if:(op3 != 0) && (op0 == 3)
    size:10.500000, time:1.976182,  executed if:(op0 == 3) && (not inlined)
    size:35.500000, time:6.746637,  executed if:(op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetMajorLoop_Count/46 function not considered for inlining
      freq:0.18 loop depth: 0 size: 3 time: 12 callee size:11 stack: 0 predicate: (op0 == 3)
    hwv3AccInlineDmaCh_SetMajorLoop_LinkCh/45 function not considered for inlining
      freq:0.09 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)
    hwv3AccInlineDmaCh_SetMajorLoop_LinkCh/45 function not considered for inlining
      freq:0.09 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)
    Dma_Ip_ConvertLogicChToHwCh/141 function body not available
      freq:0.09 loop depth: 0 size: 3 time: 12 predicate: (op0 == 3)
    hwv3AccInlineDmaCh_SetMajorLoop_EnLink/44 function not considered for inlining
      freq:0.18 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)
    hwv3AccInlineDmaCh_SetMinorLoop_Size/43 function not considered for inlining
      freq:0.18 loop depth: 0 size: 3 time: 12 callee size: 6 stack: 0 predicate: (op0 == 3)
    hwv3AccInlineDmaCh_SetMinorLoop_LinkCh/42 function not considered for inlining
      freq:0.18 loop depth: 0 size: 3 time: 12 callee size: 6 stack: 0 predicate: (op0 == 3)
    Dma_Ip_ConvertLogicChToHwCh/141 function body not available
      freq:0.18 loop depth: 0 size: 3 time: 12 predicate: (op0 == 3)
    hwv3AccInlineDmaCh_SetMinorLoop_EnLink/41 function not considered for inlining
      freq:0.18 loop depth: 0 size: 3 time: 12 callee size: 6 stack: 0 predicate: (op0 == 3)
    hwv3AccInlineDmaCh_SetSignedMinorLoopOffset.isra/163 function not considered for inlining
      freq:0.18 loop depth: 0 size: 3 time: 12 callee size:10 stack: 0 predicate: (op0 == 3)
    hwv3AccInlineDmaCh_SetTransferAttributes.isra/164 function not considered for inlining
      freq:0.18 loop depth: 0 size: 3 time: 12 callee size:12 stack: 0 predicate: (op0 == 3)
    hwv3AccInlineDmaCh_SetControlAndStatus.isra/165 function not considered for inlining
      freq:0.18 loop depth: 0 size: 3 time: 12 callee size:17 stack: 0 predicate: (op0 == 3)
    hwv3AccInlineDmaCh_SetAuxiliary_EnScatterGatherProcessing/63 function not considered for inlining
      freq:0.34 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_GetParam/133 inlinable
  global time:     23.000000
  self size:       12
  global size:     12
  min size:       8
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 7 time: 19

IPA function summary for HwAccDmaCh_GetIntHalfMajor/132 inlinable
  global time:     6.380000
  self size:       12
  global size:     12
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.500000, time:1.530000,  executed if:(op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:0.500000, time:0.170000,  executed if:(op0 == 3) && (not inlined)
  calls:

IPA function summary for HwAccDmaCh_GetIntMajor/131 inlinable
  global time:     6.380000
  self size:       12
  global size:     12
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.500000, time:1.530000,  executed if:(op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:0.500000, time:0.170000,  executed if:(op0 == 3) && (not inlined)
  calls:

IPA function summary for HwAccDmaCh_GetMasterId/130 inlinable
  global time:     6.040000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:3.500000, time:1.190000,  executed if:(op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:0.500000, time:0.170000,  executed if:(op0 == 3) && (not inlined)
  calls:

IPA function summary for HwAccDmaCh_GetStoreDstAddress/129 inlinable
  global time:     6.040000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:3.500000, time:1.190000,  executed if:(op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:0.500000, time:0.170000,  executed if:(op0 == 3) && (not inlined)
  calls:

IPA function summary for HwAccDmaCh_GetCurrentIterCount/128 inlinable
  global time:     7.036000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.202400,  executed if:(op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_GetCurrentIterCount.isra/166 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_GetBeginIterCount/127 inlinable
  global time:     7.036000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.202400,  executed if:(op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_GetBeginIterCount.isra/167 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_GetDestinationAddress/126 inlinable
  global time:     5.700000
  self size:       10
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:2.500000, time:0.850000,  executed if:(op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:0.500000, time:0.170000,  executed if:(op0 == 3) && (not inlined)
  calls:

IPA function summary for HwAccDmaCh_GetSourceAddress/125 inlinable
  global time:     5.700000
  self size:       10
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:2.500000, time:0.850000,  executed if:(op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:0.500000, time:0.170000,  executed if:(op0 == 3) && (not inlined)
  calls:

IPA function summary for HwAccDmaCh_SetTransferParam/124 inlinable
  global time:     22.000000
  self size:       11
  global size:     11
  min size:       7
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 6 time: 18

IPA function summary for HwAccDmaCh_SetControl_BandwidthControl/123 inlinable
  global time:     6.428800
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    hwv3AccInlineDmaCh_SetControl_BandwidthControl/54 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetControl_EnEndOfPacketSignal/122 inlinable
  global time:     6.428800
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    hwv3AccInlineDmaCh_SetControl_EnEndOfPacketSignal/53 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetControl_DisAutoHwRequest/121 inlinable
  global time:     6.428800
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    hwv3AccInlineDmaCh_SetControl_DisAutoHwRequest/52 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetControl_EnHalfMajor/120 inlinable
  global time:     6.428800
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    hwv3AccInlineDmaCh_SetControl_EnHalfMajor/51 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetControl_EnMajor/119 inlinable
  global time:     6.428800
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    hwv3AccInlineDmaCh_SetControl_EnMajor/50 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetControl_EnStart/118 inlinable
  global time:     8.080000
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    HwAccDmaCh_SetControl_EnStart.part.0/159 function not considered for inlining
      freq:0.34 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetControl_StoreDestinationAddress/117 inlinable
  global time:     8.080000
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    HwAccDmaCh_SetControl_StoreDestinationAddress.part.0/158 function not considered for inlining
      freq:0.34 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetMajorLoop_Count/116 inlinable
  global time:     6.428800
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    hwv3AccInlineDmaCh_SetMajorLoop_Count/46 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size:11 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetMajorLoop_LogicLinkCh/115 inlinable
  global time:     18.428800
  self size:       11
  global size:     11
  min size:       3
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    hwv3AccInlineDmaCh_SetMajorLoop_LinkCh/45 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)
    Dma_Ip_ConvertLogicChToHwCh/141 function body not available
      freq:1.00 loop depth: 0 size: 3 time: 12

IPA function summary for HwAccDmaCh_SetMajorLoop_EnLink/114 inlinable
  global time:     6.428800
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    hwv3AccInlineDmaCh_SetMajorLoop_EnLink/44 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetMinorLoop_Size/113 inlinable
  global time:     6.428800
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    hwv3AccInlineDmaCh_SetMinorLoop_Size/43 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 6 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetMinorLoop_LogicLinkCh/112 inlinable
  global time:     18.428800
  self size:       11
  global size:     11
  min size:       3
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    hwv3AccInlineDmaCh_SetMinorLoop_LinkCh/42 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 6 stack: 0 predicate: (op0 == 3)
    Dma_Ip_ConvertLogicChToHwCh/141 function body not available
      freq:1.00 loop depth: 0 size: 3 time: 12

IPA function summary for HwAccDmaCh_SetMinorLoop_EnLink/111 inlinable
  global time:     6.428800
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    hwv3AccInlineDmaCh_SetMinorLoop_EnLink/41 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 6 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetMinorLoop_Offset/110 inlinable
  global time:     6.428800
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    hwv3AccInlineDmaCh_SetMinorLoop_SignedOffset/40 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetMinorLoop_enDstOffset/109 inlinable
  global time:     6.428800
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    hwv3AccInlineDmaCh_SetMinorLoop_enDstOffset/39 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetMinorLoop_enSrcOffset/108 inlinable
  global time:     6.428800
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    hwv3AccInlineDmaCh_SetMinorLoop_enSrcOffset/38 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetDestination_Modulo/107 inlinable
  global time:     6.428800
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    hwv3AccInlineDmaCh_SetDestination_Modulo/37 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetDestination_TransferSize/106 inlinable
  global time:     6.428800
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    hwv3AccInlineDmaCh_SetDestination_TransferSize/36 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetDestination_LastAddrAdj/105 inlinable
  global time:     15.000000
  self size:       7
  global size:     7
  min size:       4
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    HwAccDmaCh_SetControl_ScatterGatherAddress/136 function not considered for inlining
      freq:1.00 loop depth: 0 size: 4 time: 13 callee size: 3 stack: 0

IPA function summary for HwAccDmaCh_SetDestination_SignedOffset/104 inlinable
  global time:     4.340000
  self size:       6
  global size:     6
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.170000,  executed if:(op0 == 3) && (not inlined)
    size:0.500000, time:0.170000,  executed if:(op0 == 3)
  calls:

IPA function summary for HwAccDmaCh_SetDestination_Address/103 inlinable
  global time:     4.340000
  self size:       6
  global size:     6
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.170000,  executed if:(op0 == 3) && (not inlined)
    size:0.500000, time:0.170000,  executed if:(op0 == 3)
  calls:

IPA function summary for HwAccDmaCh_SetSource_Modulo/102 inlinable
  global time:     6.428800
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    hwv3AccInlineDmaCh_SetSource_Modulo/32 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetSource_TransferSize/101 inlinable
  global time:     6.428800
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    hwv3AccInlineDmaCh_SetSource_TransferSize/31 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetSource_LastAddrAdj/100 inlinable
  global time:     5.360000
  self size:       9
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.170000,  executed if:(op0 == 3) && (not inlined),  nonconst if:(op1[ref offset: 224] changed) && (op0 == 3) && (not inlined)
    size:1.500000, time:0.510000,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 224] changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3) && (not inlined)
    size:1.000000, time:0.340000,  executed if:(op0 == 3)
  calls:

IPA function summary for HwAccDmaCh_SetSource_SignedOffset/99 inlinable
  global time:     4.340000
  self size:       6
  global size:     6
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.170000,  executed if:(op0 == 3) && (not inlined)
    size:0.500000, time:0.170000,  executed if:(op0 == 3)
  calls:

IPA function summary for HwAccDmaCh_SetSource_Address/98 inlinable
  global time:     4.340000
  self size:       6
  global size:     6
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.170000,  executed if:(op0 == 3) && (not inlined)
    size:0.500000, time:0.170000,  executed if:(op0 == 3)
  calls:

IPA function summary for HwAccDmaCh_SetGlobalParam/97 inlinable
  global time:     23.000000
  self size:       12
  global size:     12
  min size:       8
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 7 time: 19

IPA function summary for HwAccDmaCh_SetPriority_DisPreempt/96 inlinable
  global time:     7.036000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.202400,  executed if:(op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetPriority_DisPreempt/27 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetPriority_EnPreemption/95 inlinable
  global time:     7.036000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.202400,  executed if:(op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetPriority_EnPreemption/26 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetPriority_Level/94 inlinable
  global time:     7.036000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.202400,  executed if:(op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetPriority_Level/25 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetPriority_Group/93 inlinable
  global time:     6.428800
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    hwv3AccInlineDmaCh_SetPriority_Group/24 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetInterrupt_EnError/92 inlinable
  global time:     7.036000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.202400,  executed if:(op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetInterrupt_EnError/23 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetRequest_EnRequest/91 inlinable
  global time:     7.036000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.202400,  executed if:(op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetRequest_EnHwRequest/22 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetRequest_EnMuxTrigger/90 inlinable
  global time:     6.631200
  self size:       9
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    HwAccDmaCh_SetRequest_EnMuxTrigger.part.0/151 function not considered for inlining
      freq:0.20 loop depth: 0 size: 4 time: 13 callee size: 6 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetRequest_MuxSource/89 inlinable
  global time:     6.631200
  self size:       9
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    HwAccDmaCh_SetRequest_MuxSource.part.0/150 function not considered for inlining
      freq:0.20 loop depth: 0 size: 4 time: 13 callee size: 6 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetRequest_EnMuxSource/88 inlinable
  global time:     6.631200
  self size:       9
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    HwAccDmaCh_SetRequest_EnMuxSource.part.0/149 function not considered for inlining
      freq:0.20 loop depth: 0 size: 4 time: 13 callee size: 6 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetControl_EnBufferedWrites/87 inlinable
  global time:     7.036000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.202400,  executed if:(op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetControl_EnBufferedWrites/18 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetControl_EnMasterIdReplication/86 inlinable
  global time:     7.036000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.202400,  executed if:(op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetControl_EnMasterIdReplication/17 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size: 4 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_GetStatus_Error/85 inlinable
  global time:     6.040000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:3.500000, time:1.190000,  executed if:(op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:0.500000, time:0.170000,  executed if:(op0 == 3) && (not inlined)
  calls:

IPA function summary for HwAccDmaCh_GetStatus/84 inlinable
  global time:     7.060000
  self size:       14
  global size:     14
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:6.000000, time:2.040000,  executed if:(op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3) && (not inlined)
  calls:

IPA function summary for HwAccDmaCh_SetCommand/83 inlinable
  global time:     22.000000
  self size:       11
  global size:     11
  min size:       7
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 6 time: 18

IPA function summary for HwAccDmaCh_CmdClearError/82 inlinable
  global time:     6.040000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:1.360000,  executed if:(op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
  calls:

IPA function summary for HwAccDmaCh_CmdClearDone/81 inlinable
  global time:     6.040000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:1.360000,  executed if:(op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
  calls:

IPA function summary for HwAccDmaCh_CmdSetSwRequest/80 inlinable
  global time:     6.040000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:1.360000,  executed if:(op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
  calls:

IPA function summary for HwAccDmaCh_CmdClearHwRequest/79 inlinable
  global time:     6.040000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:1.360000,  executed if:(op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
  calls:

IPA function summary for HwAccDmaCh_CmdSetHwRequest/78 inlinable
  global time:     6.040000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:1.360000,  executed if:(op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
  calls:

IPA function summary for HwAccDmaInst_GetStatus/77 inlinable
  global time:     8.400000
  self size:       16
  global size:     16
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op0[ref offset: 32] changed)
    size:8.500000, time:2.890000,  executed if:(op0[ref offset: 32] == 3)
    size:1.500000, time:0.510000,  executed if:(op0[ref offset: 32] == 3) && (not inlined)
  calls:

IPA function summary for HwAccDmaInst_SetCommand/76 inlinable
  global time:     20.000000
  self size:       9
  global size:     9
  min size:       5
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 4 time: 16

IPA function summary for hwAccDmaInst_CmdResume/75 inlinable
  global time:     8.400000
  self size:       7
  global size:     7
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op0[ref offset: 32] changed)
  calls:
    hwAccDmaInst_CmdResume.part.0/147 function not considered for inlining
      freq:0.34 loop depth: 0 size: 1 time: 10 callee size: 3 stack: 0 predicate: (op0[ref offset: 32] == 3)

IPA function summary for hwAccDmaInst_CmdHalt/74 inlinable
  global time:     8.400000
  self size:       7
  global size:     7
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op0[ref offset: 32] changed)
  calls:
    hwAccDmaInst_CmdHalt.part.0/146 function not considered for inlining
      freq:0.34 loop depth: 0 size: 1 time: 10 callee size: 3 stack: 0 predicate: (op0[ref offset: 32] == 3)

IPA function summary for hwAccDmaInst_CmdCancelTransferWithError/73 inlinable
  global time:     8.400000
  self size:       7
  global size:     7
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op0[ref offset: 32] changed)
  calls:
    hwAccDmaInst_CmdCancelTransferWithError.part.0/145 function not considered for inlining
      freq:0.34 loop depth: 0 size: 1 time: 10 callee size: 3 stack: 0 predicate: (op0[ref offset: 32] == 3)

IPA function summary for hwAccDmaInst_CmdCancelTransfer/72 inlinable
  global time:     8.400000
  self size:       7
  global size:     7
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op0[ref offset: 32] changed)
  calls:
    hwAccDmaInst_CmdCancelTransfer.part.0/144 function not considered for inlining
      freq:0.34 loop depth: 0 size: 1 time: 10 callee size: 3 stack: 0 predicate: (op0[ref offset: 32] == 3)

IPA function summary for HwAccDmaInst_SetConfig/71 inlinable
  global time:     7.428800
  self size:       9
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op0[ref offset: 32] changed)
  calls:
    hwv3AccInlineDmaInst_SetConfig.constprop/162 function not considered for inlining
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size:15 stack: 0 predicate: (op0[ref offset: 32] == 3)
       op0 is compile time invariant

IPA function summary for HwAccDmaCh_GetParamDummyFunction/70 inlinable
  global time:     2.000000
  self size:       3
  global size:     3
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetAuxiliary_EnScatterGatherProcessing/63 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 224] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 224] changed)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 224] changed || op1 changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetControl_BandwidthControl/54 inlinable
  global time:     7.000000
  self size:       8
  global size:     8
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 224] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 224] changed)
    size:1.000000, time:1.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 224] changed || op1 changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetControl_EnEndOfPacketSignal/53 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 224] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 224] changed)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 224] changed || op1 changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetControl_DisAutoHwRequest/52 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 224] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 224] changed)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 224] changed || op1 changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetControl_EnHalfMajor/51 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 224] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 224] changed)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 224] changed || op1 changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetControl_EnMajor/50 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 224] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 224] changed)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 224] changed || op1 changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetMajorLoop_Count/46 inlinable
  global time:     14.000000
  self size:       22
  global size:     22
  min size:       2
  self stack:      0
  global stack:    0
    size:2.000000, time:1.000000
    size:5.000000, time:3.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 240] changed) && (not inlined)
    size:2.500000, time:1.500000,  nonconst if:(op0[ref offset: 240] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 176] changed) && (not inlined)
    size:2.500000, time:1.500000,  nonconst if:(op0[ref offset: 176] changed)
    size:3.000000, time:3.000000,  nonconst if:(op0[ref offset: 240] changed || op0[ref offset: 176] changed)
    size:2.000000, time:1.000000,  nonconst if:(op1 changed)
    size:2.000000, time:1.000000,  nonconst if:(op0[ref offset: 240] changed || op1 changed)
    size:2.000000, time:1.000000,  nonconst if:(op0[ref offset: 176] changed || op1 changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetMajorLoop_LinkCh/45 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 224] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 224] changed)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 224] changed || op1 changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetMajorLoop_EnLink/44 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 224] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 224] changed)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 224] changed || op1 changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetMinorLoop_Size/43 inlinable
  global time:     9.000000
  self size:       13
  global size:     13
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 64] changed) && (not inlined)
    size:3.500000, time:3.500000,  nonconst if:(op0[ref offset: 64] changed)
    size:1.000000, time:0.500000,  executed if:(op0[ref offset: 64],(# & 3221225472) == 0),  nonconst if:(op1 changed) && (op0[ref offset: 64],(# & 3221225472) == 0)
    size:0.500000, time:0.250000,  executed if:(op0[ref offset: 64],(# & 3221225472) == 0) && (not inlined)
    size:0.500000, time:0.250000,  executed if:(op0[ref offset: 64],(# & 3221225472) == 0)
    size:1.000000, time:0.500000,  executed if:(op0[ref offset: 64],(# & 3221225472) != 0),  nonconst if:(op0[ref offset: 64] changed) && (op0[ref offset: 64],(# & 3221225472) != 0)
    size:1.000000, time:0.500000,  executed if:(op0[ref offset: 64],(# & 3221225472) != 0),  nonconst if:(op1 changed) && (op0[ref offset: 64],(# & 3221225472) != 0)
    size:1.000000, time:0.500000,  executed if:(op0[ref offset: 64],(# & 3221225472) != 0),  nonconst if:(op0[ref offset: 64] changed || op1 changed) && (op0[ref offset: 64],(# & 3221225472) != 0)
    size:0.500000, time:0.250000,  executed if:(op0[ref offset: 64],(# & 3221225472) != 0) && (not inlined)
    size:0.500000, time:0.250000,  executed if:(op0[ref offset: 64],(# & 3221225472) != 0)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetMinorLoop_LinkCh/42 inlinable
  global time:     12.000000
  self size:       13
  global size:     13
  min size:       1
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:4.000000, time:3.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 240] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 240] changed)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 240] changed || op1 changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 176] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 176] changed)
    size:1.000000, time:1.000000,  nonconst if:(op1 changed || op0[ref offset: 176] changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetMinorLoop_EnLink/41 inlinable
  global time:     11.000000
  self size:       12
  global size:     12
  min size:       1
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:4.000000, time:3.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 240] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 240] changed)
    size:1.000000, time:1.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 240] changed || op1 changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 176] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 176] changed)
    size:1.000000, time:1.000000,  nonconst if:(op1 changed || op0[ref offset: 176] changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetMinorLoop_SignedOffset/40 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 64] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 64] changed)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 64] changed || op1 changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetMinorLoop_enDstOffset/39 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 64] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 64] changed)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 64] changed || op1 changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetMinorLoop_enSrcOffset/38 inlinable
  global time:     7.000000
  self size:       8
  global size:     8
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 64] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 64] changed)
    size:1.000000, time:1.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 64] changed || op1 changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetDestination_Modulo/37 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 48] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 48] changed)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 48] changed || op1 changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetDestination_TransferSize/36 inlinable
  global time:     7.000000
  self size:       8
  global size:     8
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 48] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 48] changed)
    size:1.000000, time:1.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 48] changed || op1 changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetSource_Modulo/32 inlinable
  global time:     7.000000
  self size:       8
  global size:     8
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 48] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 48] changed)
    size:1.000000, time:1.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 48] changed || op1 changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetSource_TransferSize/31 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 48] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 48] changed)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 48] changed || op1 changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetPriority_DisPreempt/27 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 128] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 128] changed)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 128] changed || op1 changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetPriority_EnPreemption/26 inlinable
  global time:     7.000000
  self size:       8
  global size:     8
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 128] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 128] changed)
    size:1.000000, time:1.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 128] changed || op1 changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetPriority_Level/25 inlinable
  global time:     7.000000
  self size:       8
  global size:     8
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 128] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 128] changed)
    size:1.000000, time:1.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 128] changed || op1 changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetPriority_Group/24 inlinable
  global time:     7.000000
  self size:       8
  global size:     8
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 0] changed)
    size:1.000000, time:1.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 0] changed || op1 changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetInterrupt_EnError/23 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 0] changed)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 0] changed || op1 changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetRequest_EnHwRequest/22 inlinable
  global time:     7.000000
  self size:       8
  global size:     8
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 0] changed)
    size:1.000000, time:1.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 0] changed || op1 changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetRequest_EnHwRequestMux/21 inlinable
  global time:     7.000000
  self size:       8
  global size:     8
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 0] changed)
    size:1.000000, time:1.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 0] changed || op1 changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetRequest_EnTriggerMux/20 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 0] changed)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 0] changed || op1 changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetRequest_SourceMux/19 inlinable
  global time:     7.000000
  self size:       8
  global size:     8
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 0] changed)
    size:1.000000, time:1.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 0] changed || op1 changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetControl_EnBufferedWrites/18 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 0] changed)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 0] changed || op1 changed)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetControl_EnMasterIdReplication/17 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       1
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 96] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 96] changed)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 96] changed || op1 changed)
  calls:


Flattening functions:
Overall time estimate: 1052.071768 weighted by profile: 0.000000

Deciding on inlining of small functions.  Starting with size 0.
Enqueueing calls in hwv3AccInlineDmaCh_GetBeginIterCount.isra/167.
Enqueueing calls in hwv3AccInlineDmaCh_GetCurrentIterCount.isra/166.
Enqueueing calls in hwv3AccInlineDmaCh_SetControlAndStatus.isra/165.
Enqueueing calls in hwv3AccInlineDmaCh_SetTransferAttributes.isra/164.
Enqueueing calls in hwv3AccInlineDmaCh_SetSignedMinorLoopOffset.isra/163.
Enqueueing calls in hwv3AccInlineDmaInst_SetConfig.constprop/162.
Enqueueing calls in HwAccDmaCh_SetControl_EnStart.part.0/159.
Enqueueing calls in HwAccDmaCh_SetControl_StoreDestinationAddress.part.0/158.
Enqueueing calls in HwAccDmaCh_SetRequest_EnMuxTrigger.part.0/151.
Enqueueing calls in HwAccDmaCh_SetRequest_MuxSource.part.0/150.
Enqueueing calls in HwAccDmaCh_SetRequest_EnMuxSource.part.0/149.
Enqueueing calls in hwAccDmaInst_CmdResume.part.0/147.
Enqueueing calls in hwAccDmaInst_CmdHalt.part.0/146.
Enqueueing calls in hwAccDmaInst_CmdCancelTransferWithError.part.0/145.
Enqueueing calls in hwAccDmaInst_CmdCancelTransfer.part.0/144.
Enqueueing calls in HwAccDmaCh_SetControl_EnScatterGatherProcessing/137.
Enqueueing calls in HwAccDmaCh_SetControl_ScatterGatherAddress/136.
Enqueueing calls in HwAccDmaCh_LoadSoftwareTcdIntoHardwareTcd/135.
Enqueueing calls in HwAccDmaCh_LoadConfigIntoSoftwareTcd/134.
Enqueueing calls in HwAccDmaCh_GetParam/133.
Enqueueing calls in HwAccDmaCh_GetIntHalfMajor/132.
Enqueueing calls in HwAccDmaCh_GetIntMajor/131.
Enqueueing calls in HwAccDmaCh_GetMasterId/130.
Enqueueing calls in HwAccDmaCh_GetStoreDstAddress/129.
Enqueueing calls in HwAccDmaCh_GetCurrentIterCount/128.
Enqueueing calls in HwAccDmaCh_GetBeginIterCount/127.
Enqueueing calls in HwAccDmaCh_GetDestinationAddress/126.
Enqueueing calls in HwAccDmaCh_GetSourceAddress/125.
Enqueueing calls in HwAccDmaCh_SetTransferParam/124.
Enqueueing calls in HwAccDmaCh_SetControl_BandwidthControl/123.
Enqueueing calls in HwAccDmaCh_SetControl_EnEndOfPacketSignal/122.
Enqueueing calls in HwAccDmaCh_SetControl_DisAutoHwRequest/121.
Enqueueing calls in HwAccDmaCh_SetControl_EnHalfMajor/120.
Enqueueing calls in HwAccDmaCh_SetControl_EnMajor/119.
Enqueueing calls in HwAccDmaCh_SetControl_EnStart/118.
Enqueueing calls in HwAccDmaCh_SetControl_StoreDestinationAddress/117.
Enqueueing calls in HwAccDmaCh_SetMajorLoop_Count/116.
Enqueueing calls in HwAccDmaCh_SetMajorLoop_LogicLinkCh/115.
Enqueueing calls in HwAccDmaCh_SetMajorLoop_EnLink/114.
Enqueueing calls in HwAccDmaCh_SetMinorLoop_Size/113.
Enqueueing calls in HwAccDmaCh_SetMinorLoop_LogicLinkCh/112.
Enqueueing calls in HwAccDmaCh_SetMinorLoop_EnLink/111.
Enqueueing calls in HwAccDmaCh_SetMinorLoop_Offset/110.
Enqueueing calls in HwAccDmaCh_SetMinorLoop_enDstOffset/109.
Enqueueing calls in HwAccDmaCh_SetMinorLoop_enSrcOffset/108.
Enqueueing calls in HwAccDmaCh_SetDestination_Modulo/107.
Enqueueing calls in HwAccDmaCh_SetDestination_TransferSize/106.
Enqueueing calls in HwAccDmaCh_SetDestination_LastAddrAdj/105.
Enqueueing calls in HwAccDmaCh_SetDestination_SignedOffset/104.
Enqueueing calls in HwAccDmaCh_SetDestination_Address/103.
Enqueueing calls in HwAccDmaCh_SetSource_Modulo/102.
Enqueueing calls in HwAccDmaCh_SetSource_TransferSize/101.
Enqueueing calls in HwAccDmaCh_SetSource_LastAddrAdj/100.
Enqueueing calls in HwAccDmaCh_SetSource_SignedOffset/99.
Enqueueing calls in HwAccDmaCh_SetSource_Address/98.
Enqueueing calls in HwAccDmaCh_SetGlobalParam/97.
Enqueueing calls in HwAccDmaCh_SetPriority_DisPreempt/96.
Enqueueing calls in HwAccDmaCh_SetPriority_EnPreemption/95.
Enqueueing calls in HwAccDmaCh_SetPriority_Level/94.
Enqueueing calls in HwAccDmaCh_SetPriority_Group/93.
Enqueueing calls in HwAccDmaCh_SetInterrupt_EnError/92.
Enqueueing calls in HwAccDmaCh_SetRequest_EnRequest/91.
Enqueueing calls in HwAccDmaCh_SetRequest_EnMuxTrigger/90.
Enqueueing calls in HwAccDmaCh_SetRequest_MuxSource/89.
Enqueueing calls in HwAccDmaCh_SetRequest_EnMuxSource/88.
Enqueueing calls in HwAccDmaCh_SetControl_EnBufferedWrites/87.
Enqueueing calls in HwAccDmaCh_SetControl_EnMasterIdReplication/86.
Enqueueing calls in HwAccDmaCh_GetStatus_Error/85.
Enqueueing calls in HwAccDmaCh_GetStatus/84.
Enqueueing calls in HwAccDmaCh_SetCommand/83.
Enqueueing calls in HwAccDmaCh_CmdClearError/82.
Enqueueing calls in HwAccDmaCh_CmdClearDone/81.
Enqueueing calls in HwAccDmaCh_CmdSetSwRequest/80.
Enqueueing calls in HwAccDmaCh_CmdClearHwRequest/79.
Enqueueing calls in HwAccDmaCh_CmdSetHwRequest/78.
Enqueueing calls in HwAccDmaInst_GetStatus/77.
Enqueueing calls in HwAccDmaInst_SetCommand/76.
Enqueueing calls in hwAccDmaInst_CmdResume/75.
Enqueueing calls in hwAccDmaInst_CmdHalt/74.
Enqueueing calls in hwAccDmaInst_CmdCancelTransferWithError/73.
Enqueueing calls in hwAccDmaInst_CmdCancelTransfer/72.
Enqueueing calls in HwAccDmaInst_SetConfig/71.
Enqueueing calls in HwAccDmaCh_GetParamDummyFunction/70.
Enqueueing calls in hwv3AccInlineDmaCh_SetAuxiliary_EnScatterGatherProcessing/63.
Enqueueing calls in hwv3AccInlineDmaCh_SetControl_BandwidthControl/54.
Enqueueing calls in hwv3AccInlineDmaCh_SetControl_EnEndOfPacketSignal/53.
Enqueueing calls in hwv3AccInlineDmaCh_SetControl_DisAutoHwRequest/52.
Enqueueing calls in hwv3AccInlineDmaCh_SetControl_EnHalfMajor/51.
Enqueueing calls in hwv3AccInlineDmaCh_SetControl_EnMajor/50.
Enqueueing calls in hwv3AccInlineDmaCh_SetMajorLoop_Count/46.
Enqueueing calls in hwv3AccInlineDmaCh_SetMajorLoop_LinkCh/45.
Enqueueing calls in hwv3AccInlineDmaCh_SetMajorLoop_EnLink/44.
Enqueueing calls in hwv3AccInlineDmaCh_SetMinorLoop_Size/43.
Enqueueing calls in hwv3AccInlineDmaCh_SetMinorLoop_LinkCh/42.
Enqueueing calls in hwv3AccInlineDmaCh_SetMinorLoop_EnLink/41.
Enqueueing calls in hwv3AccInlineDmaCh_SetMinorLoop_SignedOffset/40.
Enqueueing calls in hwv3AccInlineDmaCh_SetMinorLoop_enDstOffset/39.
Enqueueing calls in hwv3AccInlineDmaCh_SetMinorLoop_enSrcOffset/38.
Enqueueing calls in hwv3AccInlineDmaCh_SetDestination_Modulo/37.
Enqueueing calls in hwv3AccInlineDmaCh_SetDestination_TransferSize/36.
Enqueueing calls in hwv3AccInlineDmaCh_SetSource_Modulo/32.
Enqueueing calls in hwv3AccInlineDmaCh_SetSource_TransferSize/31.
Enqueueing calls in hwv3AccInlineDmaCh_SetPriority_DisPreempt/27.
Enqueueing calls in hwv3AccInlineDmaCh_SetPriority_EnPreemption/26.
Enqueueing calls in hwv3AccInlineDmaCh_SetPriority_Level/25.
Enqueueing calls in hwv3AccInlineDmaCh_SetPriority_Group/24.
Enqueueing calls in hwv3AccInlineDmaCh_SetInterrupt_EnError/23.
Enqueueing calls in hwv3AccInlineDmaCh_SetRequest_EnHwRequest/22.
Enqueueing calls in hwv3AccInlineDmaCh_SetRequest_EnHwRequestMux/21.
Enqueueing calls in hwv3AccInlineDmaCh_SetRequest_EnTriggerMux/20.
Enqueueing calls in hwv3AccInlineDmaCh_SetRequest_SourceMux/19.
Enqueueing calls in hwv3AccInlineDmaCh_SetControl_EnBufferedWrites/18.
Enqueueing calls in hwv3AccInlineDmaCh_SetControl_EnMasterIdReplication/17.

Considering HwAccDmaCh_SetControl_ScatterGatherAddress/136 with 6 size
 to be inlined into HwAccDmaCh_SetDestination_LastAddrAdj/105 in unknown:0
 Estimated badness is -inf, frequency 1.00.

Considering hwv3AccInlineDmaCh_SetRequest_EnHwRequestMux/21 with 8 size
 to be inlined into HwAccDmaCh_SetRequest_EnMuxSource.part.0/149 in ../RTD/src/Dma_Ip_Hw_Access.c:694
 Estimated badness is -34.285714, frequency 1.00.

Considering hwv3AccInlineDmaCh_SetRequest_SourceMux/19 with 8 size
 to be inlined into HwAccDmaCh_SetRequest_MuxSource.part.0/150 in ../RTD/src/Dma_Ip_Hw_Access.c:727
 Estimated badness is -34.285714, frequency 1.00.

Considering hwv3AccInlineDmaCh_SetRequest_EnTriggerMux/20 with 9 size
 to be inlined into HwAccDmaCh_SetRequest_EnMuxTrigger.part.0/151 in ../RTD/src/Dma_Ip_Hw_Access.c:760
 Estimated badness is -16.000000, frequency 1.00.

Considering hwv3AccInlineDmaCh_SetDestination_TransferSize/36 with 8 size
 to be inlined into HwAccDmaCh_SetDestination_TransferSize/106 in ../RTD/src/Dma_Ip_Hw_Access.c:1097
 Estimated badness is -10.794667, frequency 0.20.

Considering hwv3AccInlineDmaCh_SetMinorLoop_enSrcOffset/38 with 8 size
 to be inlined into HwAccDmaCh_SetMinorLoop_enSrcOffset/108 in ../RTD/src/Dma_Ip_Hw_Access.c:1133
 Estimated badness is -10.794667, frequency 0.20.

Considering hwv3AccInlineDmaCh_SetControl_BandwidthControl/54 with 8 size
 to be inlined into HwAccDmaCh_SetControl_BandwidthControl/123 in ../RTD/src/Dma_Ip_Hw_Access.c:1416
 Estimated badness is -10.794667, frequency 0.20.

Considering hwv3AccInlineDmaCh_SetPriority_Group/24 with 8 size
 to be inlined into HwAccDmaCh_SetPriority_Group/93 in ../RTD/src/Dma_Ip_Hw_Access.c:816
 Estimated badness is -10.794667, frequency 0.20.

Considering hwv3AccInlineDmaCh_SetSource_Modulo/32 with 8 size
 to be inlined into HwAccDmaCh_SetSource_Modulo/102 in ../RTD/src/Dma_Ip_Hw_Access.c:1021
 Estimated badness is -10.794667, frequency 0.20.

Considering hwv3AccInlineDmaCh_SetPriority_Level/25 with 8 size
 to be inlined into HwAccDmaCh_SetPriority_Level/94 in ../RTD/src/Dma_Ip_Hw_Access.c:835
 Estimated badness is -8.096000, frequency 0.20.

Considering hwv3AccInlineDmaCh_SetPriority_EnPreemption/26 with 8 size
 to be inlined into HwAccDmaCh_SetPriority_EnPreemption/95 in ../RTD/src/Dma_Ip_Hw_Access.c:854
 Estimated badness is -8.096000, frequency 0.20.

Considering hwv3AccInlineDmaCh_SetRequest_EnHwRequest/22 with 8 size
 to be inlined into HwAccDmaCh_SetRequest_EnRequest/91 in ../RTD/src/Dma_Ip_Hw_Access.c:780
 Estimated badness is -8.096000, frequency 0.20.

Considering hwv3AccInlineDmaCh_SetSource_TransferSize/31 with 9 size
 to be inlined into HwAccDmaCh_SetSource_TransferSize/101 in ../RTD/src/Dma_Ip_Hw_Access.c:1003
 Estimated badness is -4.857600, frequency 0.20.

Considering hwv3AccInlineDmaCh_SetAuxiliary_EnScatterGatherProcessing/63 with 9 size
 to be inlined into HwAccDmaCh_SetControl_EnScatterGatherProcessing/137 in ../RTD/src/Dma_Ip_Hw_Access.c:1803
 Estimated badness is -4.857600, frequency 0.20.

Considering hwv3AccInlineDmaCh_SetDestination_Modulo/37 with 9 size
 to be inlined into HwAccDmaCh_SetDestination_Modulo/107 in ../RTD/src/Dma_Ip_Hw_Access.c:1115
 Estimated badness is -4.857600, frequency 0.20.

Considering hwv3AccInlineDmaCh_SetMinorLoop_enDstOffset/39 with 9 size
 to be inlined into HwAccDmaCh_SetMinorLoop_enDstOffset/109 in ../RTD/src/Dma_Ip_Hw_Access.c:1151
 Estimated badness is -4.857600, frequency 0.20.

Considering hwv3AccInlineDmaCh_SetControl_DisAutoHwRequest/52 with 9 size
 to be inlined into HwAccDmaCh_SetControl_DisAutoHwRequest/121 in ../RTD/src/Dma_Ip_Hw_Access.c:1378
 Estimated badness is -4.857600, frequency 0.20.

Considering hwv3AccInlineDmaCh_SetControl_EnEndOfPacketSignal/53 with 9 size
 to be inlined into HwAccDmaCh_SetControl_EnEndOfPacketSignal/122 in ../RTD/src/Dma_Ip_Hw_Access.c:1397
 Estimated badness is -4.857600, frequency 0.20.

Considering hwv3AccInlineDmaCh_SetControl_EnMajor/50 with 9 size
 to be inlined into HwAccDmaCh_SetControl_EnMajor/119 in ../RTD/src/Dma_Ip_Hw_Access.c:1342
 Estimated badness is -4.857600, frequency 0.20.

Considering hwv3AccInlineDmaCh_SetControl_EnHalfMajor/51 with 9 size
 to be inlined into HwAccDmaCh_SetControl_EnHalfMajor/120 in ../RTD/src/Dma_Ip_Hw_Access.c:1360
 Estimated badness is -4.857600, frequency 0.20.

Considering hwv3AccInlineDmaCh_SetMinorLoop_SignedOffset/40 with 9 size
 to be inlined into HwAccDmaCh_SetMinorLoop_Offset/110 in ../RTD/src/Dma_Ip_Hw_Access.c:1169
 Estimated badness is -4.857600, frequency 0.20.

Considering hwv3AccInlineDmaCh_SetMajorLoop_EnLink/44 with 9 size
 to be inlined into HwAccDmaCh_SetMajorLoop_EnLink/114 in ../RTD/src/Dma_Ip_Hw_Access.c:1243
 Estimated badness is -4.857600, frequency 0.20.

Considering hwv3AccInlineDmaCh_GetBeginIterCount.isra/167 with 9 size
 to be inlined into HwAccDmaCh_GetBeginIterCount/127 in ../RTD/src/Dma_Ip_Hw_Access.c:1533
 Estimated badness is -3.736615, frequency 0.20.

Considering hwv3AccInlineDmaCh_SetInterrupt_EnError/23 with 9 size
 to be inlined into HwAccDmaCh_SetInterrupt_EnError/92 in ../RTD/src/Dma_Ip_Hw_Access.c:797
 Estimated badness is -3.736615, frequency 0.20.

Considering hwv3AccInlineDmaCh_SetPriority_DisPreempt/27 with 9 size
 to be inlined into HwAccDmaCh_SetPriority_DisPreempt/96 in ../RTD/src/Dma_Ip_Hw_Access.c:874
 Estimated badness is -3.736615, frequency 0.20.

Considering hwv3AccInlineDmaCh_GetCurrentIterCount.isra/166 with 9 size
 to be inlined into HwAccDmaCh_GetCurrentIterCount/128 in ../RTD/src/Dma_Ip_Hw_Access.c:1551
 Estimated badness is -3.736615, frequency 0.20.

Considering hwv3AccInlineDmaCh_SetControl_EnMasterIdReplication/17 with 9 size
 to be inlined into HwAccDmaCh_SetControl_EnMasterIdReplication/86 in ../RTD/src/Dma_Ip_Hw_Access.c:640
 Estimated badness is -3.736615, frequency 0.20.

Considering hwv3AccInlineDmaCh_SetControl_EnBufferedWrites/18 with 9 size
 to be inlined into HwAccDmaCh_SetControl_EnBufferedWrites/87 in ../RTD/src/Dma_Ip_Hw_Access.c:660
 Estimated badness is -3.736615, frequency 0.20.

Considering HwAccDmaCh_SetControl_StoreDestinationAddress.part.0/158 with 8 size
 to be inlined into HwAccDmaCh_SetControl_StoreDestinationAddress/117 in unknown:0
 Estimated badness is -2.342222, frequency 0.34.

Considering HwAccDmaCh_SetControl_EnStart.part.0/159 with 8 size
 to be inlined into HwAccDmaCh_SetControl_EnStart/118 in unknown:0
 Estimated badness is -2.266667, frequency 0.34.

Considering hwv3AccInlineDmaCh_SetMinorLoop_EnLink/41 with 12 size
 to be inlined into HwAccDmaCh_SetMinorLoop_EnLink/111 in ../RTD/src/Dma_Ip_Hw_Access.c:1187
 Estimated badness is -2.158933, frequency 0.20.

Considering hwv3AccInlineDmaCh_SetMinorLoop_LinkCh/42 with 13 size
 to be inlined into HwAccDmaCh_SetMinorLoop_LogicLinkCh/112 in ../RTD/src/Dma_Ip_Hw_Access.c:1207
 Estimated badness is -1.295360, frequency 0.20.

Considering hwAccDmaInst_CmdCancelTransfer.part.0/144 with 6 size
 to be inlined into hwAccDmaInst_CmdCancelTransfer/72 in unknown:0
 Estimated badness is -0.906667, frequency 0.34.

Considering hwAccDmaInst_CmdResume.part.0/147 with 6 size
 to be inlined into hwAccDmaInst_CmdResume/75 in unknown:0
 Estimated badness is -0.906667, frequency 0.34.

Considering hwAccDmaInst_CmdCancelTransferWithError.part.0/145 with 6 size
 to be inlined into hwAccDmaInst_CmdCancelTransferWithError/73 in unknown:0
 Estimated badness is -0.906667, frequency 0.34.

Considering hwAccDmaInst_CmdHalt.part.0/146 with 6 size
 to be inlined into hwAccDmaInst_CmdHalt/74 in unknown:0
 Estimated badness is -0.906667, frequency 0.34.

Considering hwv3AccInlineDmaCh_SetAuxiliary_EnScatterGatherProcessing/63 with 9 size
 to be inlined into HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 in ../RTD/src/Dma_Ip_Hw_Access.c:1695
 Estimated badness is -0.816000, frequency 0.34.

Considering hwv3AccInlineDmaCh_SetMajorLoop_EnLink/44 with 9 size
 to be inlined into HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 in ../RTD/src/Dma_Ip_Hw_Access.c:1716
 Estimated badness is -0.427760, frequency 0.18.

Considering hwv3AccInlineDmaCh_SetMinorLoop_EnLink/41 with 12 size
 to be inlined into HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 in ../RTD/src/Dma_Ip_Hw_Access.c:1711
 Estimated badness is -0.219530, frequency 0.18.

Considering hwv3AccInlineDmaCh_SetMajorLoop_LinkCh/45 with 9 size
 to be inlined into HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 in ../RTD/src/Dma_Ip_Hw_Access.c:1724
 Estimated badness is -0.201998, frequency 0.09.

Considering hwv3AccInlineDmaInst_SetConfig.constprop/162 with 30 size
 to be inlined into HwAccDmaInst_SetConfig/71 in ../RTD/src/Dma_Ip_Hw_Access.c:338
 Estimated badness is -0.195332, frequency 0.20.

Considering hwv3AccInlineDmaCh_SetMinorLoop_LinkCh/42 with 13 size
 to be inlined into HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 in ../RTD/src/Dma_Ip_Hw_Access.c:1713
 Estimated badness is -0.167713, frequency 0.18.

Considering hwv3AccInlineDmaCh_SetMinorLoop_Size/43 with 13 size
 to be inlined into HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 in ../RTD/src/Dma_Ip_Hw_Access.c:1714
 Estimated badness is -0.124306, frequency 0.18.

Considering HwAccDmaCh_SetRequest_EnMuxSource.part.0/149 with 14 size
 to be inlined into HwAccDmaCh_SetRequest_EnMuxSource/88 in unknown:0
 Estimated badness is -0.108429, frequency 0.20.

Considering HwAccDmaCh_SetRequest_MuxSource.part.0/150 with 14 size
 to be inlined into HwAccDmaCh_SetRequest_MuxSource/89 in unknown:0
 Estimated badness is -0.108429, frequency 0.20.

Considering HwAccDmaCh_SetRequest_EnMuxTrigger.part.0/151 with 15 size
 to be inlined into HwAccDmaCh_SetRequest_EnMuxTrigger/90 in unknown:0
 Estimated badness is -0.089294, frequency 0.20.

Considering hwv3AccInlineDmaCh_SetSignedMinorLoopOffset.isra/163 with 21 size
 to be inlined into HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 in ../RTD/src/Dma_Ip_Hw_Access.c:1709
 Estimated badness is -0.051527, frequency 0.18.

Considering hwv3AccInlineDmaCh_SetTransferAttributes.isra/164 with 24 size
 to be inlined into HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 in ../RTD/src/Dma_Ip_Hw_Access.c:1707
 Estimated badness is -0.037354, frequency 0.18.

Considering hwv3AccInlineDmaCh_SetControlAndStatus.isra/165 with 34 size
 to be inlined into HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 in ../RTD/src/Dma_Ip_Hw_Access.c:1699
 Estimated badness is -0.019879, frequency 0.18.
node context cache: 8 hits, 0 misses, 49 initializations

Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:

Deciding on functions to be inlined into all callers and removing useless speculations:

Inlining hwv3AccInlineDmaCh_SetMajorLoop_LinkCh/45 size 9.
 Called once from HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 168 insns.
 Inlined into HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 which now has 170 size

Inlining hwv3AccInlineDmaCh_SetMajorLoop_LinkCh/45 size 9.
 Called once from HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 170 insns.
 Inlined into HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 which now has 172 size

Inlining hwv3AccInlineDmaCh_SetMajorLoop_LinkCh/45 size 9.
 Called once from HwAccDmaCh_SetMajorLoop_LogicLinkCh/115 11 insns.
 Inlined into HwAccDmaCh_SetMajorLoop_LogicLinkCh/115 which now has 13 size

Inlining hwv3AccInlineDmaCh_SetMinorLoop_Size/43 size 13.
 Called once from HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 172 insns.
 Inlined into HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 which now has 178 size

Inlining hwv3AccInlineDmaCh_SetMinorLoop_Size/43 size 13.
 Called once from HwAccDmaCh_SetMinorLoop_Size/113 8 insns.
 Inlined into HwAccDmaCh_SetMinorLoop_Size/113 which now has 14 size
Overall time estimate: 539.295837 weighted by profile: 0.000000

Why inlining failed?
function body not available                       :        4 calls, 2.272697 freq, 0 count
call is unlikely and code size would grow         :        2 calls, 0.384198 freq, 0 count
IPA function summary for HwAccDmaCh_SetControl_EnScatterGatherProcessing/137 inlinable
  global time:     5.012000
  self size:       8
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.101200,  executed if:(op0 == 3)
    size:1.500000, time:0.303600,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 224] changed) && (op0 == 3)
    size:2.000000, time:0.404800,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 224] changed || op2 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetAuxiliary_EnScatterGatherProcessing/169 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetControl_ScatterGatherAddress/136 inlinable
  global time:     4.340000
  self size:       6
  global size:     6
  min size:       0
  self stack:      0
  global stack:    0
  estimated growth:-1
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.170000,  executed if:(op0 == 3) && (not inlined)
    size:0.500000, time:0.170000,  executed if:(op0 == 3)
  calls:

IPA function summary for HwAccDmaCh_LoadSoftwareTcdIntoHardwareTcd/135 inlinable
  global time:     16.860000
  self size:       37
  global size:     37
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op0[ref offset: 32] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 40] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 40] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 48] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 48] changed)
    size:26.000000, time:8.840000,  executed if:(op0[ref offset: 32] == 3)
    size:1.000000, time:0.340000,  executed if:(op0[ref offset: 32] == 3),  nonconst if:(op0[ref offset: 48] changed) && (op0[ref offset: 32] == 3)
    size:1.000000, time:0.340000,  executed if:(op0[ref offset: 32] == 3),  nonconst if:(op0[ref offset: 40] changed) && (op0[ref offset: 32] == 3)
    size:0.500000, time:0.170000,  executed if:(op0[ref offset: 32] == 3) && (not inlined),  nonconst if:(op1[ref offset: 32] changed) && (op0[ref offset: 32] == 3) && (not inlined)
    size:0.500000, time:0.170000,  executed if:(op0[ref offset: 32] == 3),  nonconst if:(op1[ref offset: 32] changed) && (op0[ref offset: 32] == 3)
  calls:

IPA function summary for HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 inlinable
  global time:     39.120266
  self size:       98
  global size:     177
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:1.360000,  executed if:(op0 == 3),  nonconst if:(op3 changed) && (op0 == 3)
    size:0.500000, time:0.085000,  executed if:(op3 == 0) && (op0 == 3) && (not inlined),  nonconst if:(op1[ref offset: 32] changed) && (op3 == 0) && (op0 == 3) && (not inlined)
    size:0.500000, time:0.085000,  executed if:(op3 == 0) && (op0 == 3),  nonconst if:(op1[ref offset: 32] changed) && (op3 == 0) && (op0 == 3)
    size:1.000000, time:0.170000,  executed if:(op3 == 0) && (op0 == 3)
    size:0.500000, time:0.085000,  executed if:(op3 != 0) && (op0 == 3) && (not inlined),  nonconst if:(op1[ref offset: 32] changed) && (op3 != 0) && (op0 == 3) && (not inlined)
    size:0.500000, time:0.085000,  executed if:(op3 != 0) && (op0 == 3),  nonconst if:(op1[ref offset: 32] changed) && (op3 != 0) && (op0 == 3)
    size:0.500000, time:0.085000,  executed if:(op3 != 0) && (op0 == 3) && (not inlined),  nonconst if:(op1[ref offset: 96] changed) && (op3 != 0) && (op0 == 3) && (not inlined)
    size:0.500000, time:0.085000,  executed if:(op3 != 0) && (op0 == 3),  nonconst if:(op1[ref offset: 96] changed) && (op3 != 0) && (op0 == 3)
    size:2.000000, time:0.340000,  executed if:(op3 != 0) && (op0 == 3)
    size:10.500000, time:1.976182,  executed if:(op0 == 3) && (not inlined)
    size:140.500000, time:25.128346,  executed if:(op0 == 3)
    size:2.000000, time:0.181798,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetMajorLoop_Count/46 call is unlikely and code size would grow
      freq:0.18 loop depth: 0 size: 3 time: 12 callee size:11 stack: 0 predicate: (op0 == 3)
    hwv3AccInlineDmaCh_SetMajorLoop_LinkCh/173 inlined
      freq:0.09
      Stack frame offset 0, callee self size 0
    hwv3AccInlineDmaCh_SetMajorLoop_LinkCh/174 inlined
      freq:0.09
      Stack frame offset 0, callee self size 0
    Dma_Ip_ConvertLogicChToHwCh/141 function body not available
      freq:0.09 loop depth: 0 size: 3 time: 12 predicate: (op0 == 3)
    hwv3AccInlineDmaCh_SetMajorLoop_EnLink/44 inlined
      freq:0.18
      Stack frame offset 0, callee self size 0
    hwv3AccInlineDmaCh_SetMinorLoop_Size/175 inlined
      freq:0.18
      Stack frame offset 0, callee self size 0
    hwv3AccInlineDmaCh_SetMinorLoop_LinkCh/42 inlined
      freq:0.18
      Stack frame offset 0, callee self size 0
    Dma_Ip_ConvertLogicChToHwCh/141 function body not available
      freq:0.18 loop depth: 0 size: 3 time: 12 predicate: (op0 == 3)
    hwv3AccInlineDmaCh_SetMinorLoop_EnLink/41 inlined
      freq:0.18
      Stack frame offset 0, callee self size 0
    hwv3AccInlineDmaCh_SetSignedMinorLoopOffset.isra/163 inlined
      freq:0.18
      Stack frame offset 0, callee self size 0
    hwv3AccInlineDmaCh_SetTransferAttributes.isra/164 inlined
      freq:0.18
      Stack frame offset 0, callee self size 0
    hwv3AccInlineDmaCh_SetControlAndStatus.isra/165 inlined
      freq:0.18
      Stack frame offset 0, callee self size 0
    hwv3AccInlineDmaCh_SetAuxiliary_EnScatterGatherProcessing/63 inlined
      freq:0.34
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_GetParam/133 inlinable
  global time:     23.000000
  self size:       12
  global size:     12
  min size:       8
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 7 time: 19

IPA function summary for HwAccDmaCh_GetIntHalfMajor/132 inlinable
  global time:     6.380000
  self size:       12
  global size:     12
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.500000, time:1.530000,  executed if:(op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:0.500000, time:0.170000,  executed if:(op0 == 3) && (not inlined)
  calls:

IPA function summary for HwAccDmaCh_GetIntMajor/131 inlinable
  global time:     6.380000
  self size:       12
  global size:     12
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.500000, time:1.530000,  executed if:(op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:0.500000, time:0.170000,  executed if:(op0 == 3) && (not inlined)
  calls:

IPA function summary for HwAccDmaCh_GetMasterId/130 inlinable
  global time:     6.040000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:3.500000, time:1.190000,  executed if:(op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:0.500000, time:0.170000,  executed if:(op0 == 3) && (not inlined)
  calls:

IPA function summary for HwAccDmaCh_GetStoreDstAddress/129 inlinable
  global time:     6.040000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:3.500000, time:1.190000,  executed if:(op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:0.500000, time:0.170000,  executed if:(op0 == 3) && (not inlined)
  calls:

IPA function summary for HwAccDmaCh_GetCurrentIterCount/128 inlinable
  global time:     5.297384
  self size:       11
  global size:     13
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:5.500000, time:0.892584,  executed if:(op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_GetCurrentIterCount.isra/166 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_GetBeginIterCount/127 inlinable
  global time:     5.297384
  self size:       11
  global size:     13
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:5.500000, time:0.892584,  executed if:(op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_GetBeginIterCount.isra/167 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_GetDestinationAddress/126 inlinable
  global time:     5.700000
  self size:       10
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:2.500000, time:0.850000,  executed if:(op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:0.500000, time:0.170000,  executed if:(op0 == 3) && (not inlined)
  calls:

IPA function summary for HwAccDmaCh_GetSourceAddress/125 inlinable
  global time:     5.700000
  self size:       10
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:2.500000, time:0.850000,  executed if:(op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:0.500000, time:0.170000,  executed if:(op0 == 3) && (not inlined)
  calls:

IPA function summary for HwAccDmaCh_SetTransferParam/124 inlinable
  global time:     22.000000
  self size:       11
  global size:     11
  min size:       7
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 6 time: 18

IPA function summary for HwAccDmaCh_SetControl_BandwidthControl/123 inlinable
  global time:     4.809600
  self size:       8
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.101200,  executed if:(op0 == 3)
    size:1.500000, time:0.303600,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 224] changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 224] changed || op2 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetControl_BandwidthControl/54 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetControl_EnEndOfPacketSignal/122 inlinable
  global time:     5.012000
  self size:       8
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.101200,  executed if:(op0 == 3)
    size:1.500000, time:0.303600,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 224] changed) && (op0 == 3)
    size:2.000000, time:0.404800,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 224] changed || op2 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetControl_EnEndOfPacketSignal/53 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetControl_DisAutoHwRequest/121 inlinable
  global time:     5.012000
  self size:       8
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.101200,  executed if:(op0 == 3)
    size:1.500000, time:0.303600,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 224] changed) && (op0 == 3)
    size:2.000000, time:0.404800,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 224] changed || op2 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetControl_DisAutoHwRequest/52 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetControl_EnHalfMajor/120 inlinable
  global time:     5.012000
  self size:       8
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.101200,  executed if:(op0 == 3)
    size:1.500000, time:0.303600,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 224] changed) && (op0 == 3)
    size:2.000000, time:0.404800,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 224] changed || op2 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetControl_EnHalfMajor/51 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetControl_EnMajor/119 inlinable
  global time:     5.012000
  self size:       8
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.101200,  executed if:(op0 == 3)
    size:1.500000, time:0.303600,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 224] changed) && (op0 == 3)
    size:2.000000, time:0.404800,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 224] changed || op2 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetControl_EnMajor/50 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetControl_EnStart/118 inlinable
  global time:     5.360000
  self size:       8
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.170000,  executed if:(op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.500000, time:0.510000,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 224] changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed || op1[ref offset: 224] changed) && (op0 == 3)
  calls:
    HwAccDmaCh_SetControl_EnStart.part.0/159 inlined
      freq:0.34
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetControl_StoreDestinationAddress/117 inlinable
  global time:     5.190000
  self size:       8
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.340000,  executed if:(op0 == 3)
    size:2.500000, time:0.850000,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 224] changed) && (op0 == 3)
  calls:
    HwAccDmaCh_SetControl_StoreDestinationAddress.part.0/158 inlined
      freq:0.34
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetMajorLoop_Count/116 inlinable
  global time:     6.428800
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
  calls:
    hwv3AccInlineDmaCh_SetMajorLoop_Count/46 call is unlikely and code size would grow
      freq:0.20 loop depth: 0 size: 3 time: 12 callee size:11 stack: 0 predicate: (op0 == 3)

IPA function summary for HwAccDmaCh_SetMajorLoop_LogicLinkCh/115 inlinable
  global time:     17.012000
  self size:       11
  global size:     13
  min size:       3
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:5.000000, time:1.012000,  executed if:(op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetMajorLoop_LinkCh/45 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0
    Dma_Ip_ConvertLogicChToHwCh/141 function body not available
      freq:1.00 loop depth: 0 size: 3 time: 12

IPA function summary for HwAccDmaCh_SetMajorLoop_EnLink/114 inlinable
  global time:     5.012000
  self size:       8
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.101200,  executed if:(op0 == 3)
    size:1.500000, time:0.303600,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 224] changed) && (op0 == 3)
    size:2.000000, time:0.404800,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 224] changed || op2 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetMajorLoop_EnLink/170 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetMinorLoop_Size/113 inlinable
  global time:     5.214400
  self size:       8
  global size:     14
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:3.500000, time:0.708400,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 64] changed) && (op0 == 3)
    size:1.000000, time:0.101200,  executed if:(op1[ref offset: 64],(# & 3221225472) == 0) && (op0 == 3),  nonconst if:(op2 changed) && (op1[ref offset: 64],(# & 3221225472) == 0) && (op0 == 3)
    size:0.500000, time:0.050600,  executed if:(op1[ref offset: 64],(# & 3221225472) == 0) && (op0 == 3)
    size:1.000000, time:0.101200,  executed if:(op1[ref offset: 64],(# & 3221225472) != 0) && (op0 == 3),  nonconst if:(op1[ref offset: 64],(# & 3221225472) != 0) && (op1[ref offset: 64] changed) && (op0 == 3)
    size:1.000000, time:0.101200,  executed if:(op1[ref offset: 64],(# & 3221225472) != 0) && (op0 == 3),  nonconst if:(op1[ref offset: 64],(# & 3221225472) != 0) && (op2 changed) && (op0 == 3)
    size:1.000000, time:0.101200,  executed if:(op1[ref offset: 64],(# & 3221225472) != 0) && (op0 == 3),  nonconst if:(op1[ref offset: 64],(# & 3221225472) != 0) && (op1[ref offset: 64] changed || op2 changed) && (op0 == 3)
    size:0.500000, time:0.050600,  executed if:(op1[ref offset: 64],(# & 3221225472) != 0) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetMinorLoop_Size/43 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetMinorLoop_LogicLinkCh/112 inlinable
  global time:     17.619200
  self size:       11
  global size:     16
  min size:       3
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:8.000000, time:1.619200,  executed if:(op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetMinorLoop_LinkCh/172 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0
    Dma_Ip_ConvertLogicChToHwCh/141 function body not available
      freq:1.00 loop depth: 0 size: 3 time: 12

IPA function summary for HwAccDmaCh_SetMinorLoop_EnLink/111 inlinable
  global time:     5.416800
  self size:       8
  global size:     12
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.202400,  executed if:(op0 == 3)
    size:1.500000, time:0.303600,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 240] changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 240] changed || op2 changed) && (op0 == 3)
    size:1.500000, time:0.303600,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 176] changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op2 changed || op1[ref offset: 176] changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetMinorLoop_EnLink/171 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetMinorLoop_Offset/110 inlinable
  global time:     5.012000
  self size:       8
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.101200,  executed if:(op0 == 3)
    size:1.500000, time:0.303600,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 64] changed) && (op0 == 3)
    size:2.000000, time:0.404800,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 64] changed || op2 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetMinorLoop_SignedOffset/40 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetMinorLoop_enDstOffset/109 inlinable
  global time:     5.012000
  self size:       8
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.101200,  executed if:(op0 == 3)
    size:1.500000, time:0.303600,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 64] changed) && (op0 == 3)
    size:2.000000, time:0.404800,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 64] changed || op2 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetMinorLoop_enDstOffset/39 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetMinorLoop_enSrcOffset/108 inlinable
  global time:     4.809600
  self size:       8
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.101200,  executed if:(op0 == 3)
    size:1.500000, time:0.303600,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 64] changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 64] changed || op2 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetMinorLoop_enSrcOffset/38 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetDestination_Modulo/107 inlinable
  global time:     5.012000
  self size:       8
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.101200,  executed if:(op0 == 3)
    size:1.500000, time:0.303600,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 48] changed) && (op0 == 3)
    size:2.000000, time:0.404800,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 48] changed || op2 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetDestination_Modulo/37 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetDestination_TransferSize/106 inlinable
  global time:     4.809600
  self size:       8
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.101200,  executed if:(op0 == 3)
    size:1.500000, time:0.303600,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 48] changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 48] changed || op2 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetDestination_TransferSize/36 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetDestination_LastAddrAdj/105 inlinable
  global time:     4.170000
  self size:       7
  global size:     6
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.170000,  executed if:(op0 == 3)
  calls:
    HwAccDmaCh_SetControl_ScatterGatherAddress/168 inlined
      freq:1.00
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetDestination_SignedOffset/104 inlinable
  global time:     4.340000
  self size:       6
  global size:     6
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.170000,  executed if:(op0 == 3) && (not inlined)
    size:0.500000, time:0.170000,  executed if:(op0 == 3)
  calls:

IPA function summary for HwAccDmaCh_SetDestination_Address/103 inlinable
  global time:     4.340000
  self size:       6
  global size:     6
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.170000,  executed if:(op0 == 3) && (not inlined)
    size:0.500000, time:0.170000,  executed if:(op0 == 3)
  calls:

IPA function summary for HwAccDmaCh_SetSource_Modulo/102 inlinable
  global time:     4.809600
  self size:       8
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.101200,  executed if:(op0 == 3)
    size:1.500000, time:0.303600,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 48] changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 48] changed || op2 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetSource_Modulo/32 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetSource_TransferSize/101 inlinable
  global time:     5.012000
  self size:       8
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.101200,  executed if:(op0 == 3)
    size:1.500000, time:0.303600,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 48] changed) && (op0 == 3)
    size:2.000000, time:0.404800,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 48] changed || op2 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetSource_TransferSize/31 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetSource_LastAddrAdj/100 inlinable
  global time:     5.360000
  self size:       9
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.170000,  executed if:(op0 == 3) && (not inlined),  nonconst if:(op1[ref offset: 224] changed) && (op0 == 3) && (not inlined)
    size:1.500000, time:0.510000,  executed if:(op0 == 3),  nonconst if:(op1[ref offset: 224] changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3) && (not inlined)
    size:1.000000, time:0.340000,  executed if:(op0 == 3)
  calls:

IPA function summary for HwAccDmaCh_SetSource_SignedOffset/99 inlinable
  global time:     4.340000
  self size:       6
  global size:     6
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.170000,  executed if:(op0 == 3) && (not inlined)
    size:0.500000, time:0.170000,  executed if:(op0 == 3)
  calls:

IPA function summary for HwAccDmaCh_SetSource_Address/98 inlinable
  global time:     4.340000
  self size:       6
  global size:     6
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:0.500000, time:0.170000,  executed if:(op0 == 3) && (not inlined)
    size:0.500000, time:0.170000,  executed if:(op0 == 3)
  calls:

IPA function summary for HwAccDmaCh_SetGlobalParam/97 inlinable
  global time:     23.000000
  self size:       12
  global size:     12
  min size:       8
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 7 time: 19

IPA function summary for HwAccDmaCh_SetPriority_DisPreempt/96 inlinable
  global time:     5.619200
  self size:       11
  global size:     13
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:0.809600,  executed if:(op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:2.000000, time:0.404800,  executed if:(op0 == 3),  nonconst if:(op3 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetPriority_DisPreempt/27 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetPriority_EnPreemption/95 inlinable
  global time:     5.416800
  self size:       11
  global size:     12
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:0.809600,  executed if:(op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op3 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetPriority_EnPreemption/26 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetPriority_Level/94 inlinable
  global time:     5.416800
  self size:       11
  global size:     12
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:0.809600,  executed if:(op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op3 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetPriority_Level/25 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetPriority_Group/93 inlinable
  global time:     4.809600
  self size:       8
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:3.000000, time:0.607200,  executed if:(op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op3 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetPriority_Group/24 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetInterrupt_EnError/92 inlinable
  global time:     5.619200
  self size:       11
  global size:     13
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:0.809600,  executed if:(op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:2.000000, time:0.404800,  executed if:(op0 == 3),  nonconst if:(op3 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetInterrupt_EnError/23 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetRequest_EnRequest/91 inlinable
  global time:     5.416800
  self size:       11
  global size:     12
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:0.809600,  executed if:(op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op3 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetRequest_EnHwRequest/22 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetRequest_EnMuxTrigger/90 inlinable
  global time:     6.428800
  self size:       9
  global size:     17
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:0.809600,  executed if:(op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:5.000000, time:1.012000,  executed if:(op0 == 3),  nonconst if:(op1 changed || op2 changed) && (op0 == 3)
    size:2.000000, time:0.404800,  executed if:(op0 == 3),  nonconst if:(op3 changed) && (op0 == 3)
  calls:
    HwAccDmaCh_SetRequest_EnMuxTrigger.part.0/151 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0
      hwv3AccInlineDmaCh_SetRequest_EnTriggerMux/20 inlined
        freq:0.20
        Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetRequest_MuxSource/89 inlinable
  global time:     6.226400
  self size:       9
  global size:     16
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:0.809600,  executed if:(op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:5.000000, time:1.012000,  executed if:(op0 == 3),  nonconst if:(op1 changed || op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op3 changed) && (op0 == 3)
  calls:
    HwAccDmaCh_SetRequest_MuxSource.part.0/150 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0
      hwv3AccInlineDmaCh_SetRequest_SourceMux/19 inlined
        freq:0.20
        Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetRequest_EnMuxSource/88 inlinable
  global time:     6.226400
  self size:       9
  global size:     16
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:0.809600,  executed if:(op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:5.000000, time:1.012000,  executed if:(op0 == 3),  nonconst if:(op1 changed || op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op3 changed) && (op0 == 3)
  calls:
    HwAccDmaCh_SetRequest_EnMuxSource.part.0/149 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0
      hwv3AccInlineDmaCh_SetRequest_EnHwRequestMux/21 inlined
        freq:0.20
        Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetControl_EnBufferedWrites/87 inlinable
  global time:     5.619200
  self size:       11
  global size:     13
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:0.809600,  executed if:(op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:2.000000, time:0.404800,  executed if:(op0 == 3),  nonconst if:(op3 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetControl_EnBufferedWrites/18 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_SetControl_EnMasterIdReplication/86 inlinable
  global time:     5.619200
  self size:       11
  global size:     13
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:0.809600,  executed if:(op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.202400,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:2.000000, time:0.404800,  executed if:(op0 == 3),  nonconst if:(op3 changed) && (op0 == 3)
  calls:
    hwv3AccInlineDmaCh_SetControl_EnMasterIdReplication/17 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_GetStatus_Error/85 inlinable
  global time:     6.040000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:3.500000, time:1.190000,  executed if:(op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:0.500000, time:0.170000,  executed if:(op0 == 3) && (not inlined)
  calls:

IPA function summary for HwAccDmaCh_GetStatus/84 inlinable
  global time:     7.060000
  self size:       14
  global size:     14
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:6.000000, time:2.040000,  executed if:(op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3) && (not inlined)
  calls:

IPA function summary for HwAccDmaCh_SetCommand/83 inlinable
  global time:     22.000000
  self size:       11
  global size:     11
  min size:       7
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 6 time: 18

IPA function summary for HwAccDmaCh_CmdClearError/82 inlinable
  global time:     6.040000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:1.360000,  executed if:(op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
  calls:

IPA function summary for HwAccDmaCh_CmdClearDone/81 inlinable
  global time:     6.040000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:1.360000,  executed if:(op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
  calls:

IPA function summary for HwAccDmaCh_CmdSetSwRequest/80 inlinable
  global time:     6.040000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:1.360000,  executed if:(op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
  calls:

IPA function summary for HwAccDmaCh_CmdClearHwRequest/79 inlinable
  global time:     6.040000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:1.360000,  executed if:(op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
  calls:

IPA function summary for HwAccDmaCh_CmdSetHwRequest/78 inlinable
  global time:     6.040000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:1.360000,  executed if:(op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op2 changed) && (op0 == 3)
    size:1.000000, time:0.340000,  executed if:(op0 == 3),  nonconst if:(op1 changed) && (op0 == 3)
  calls:

IPA function summary for HwAccDmaInst_GetStatus/77 inlinable
  global time:     8.400000
  self size:       16
  global size:     16
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op0[ref offset: 32] changed)
    size:8.500000, time:2.890000,  executed if:(op0[ref offset: 32] == 3)
    size:1.500000, time:0.510000,  executed if:(op0[ref offset: 32] == 3) && (not inlined)
  calls:

IPA function summary for HwAccDmaInst_SetCommand/76 inlinable
  global time:     20.000000
  self size:       9
  global size:     9
  min size:       5
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 4 time: 16

IPA function summary for hwAccDmaInst_CmdResume/75 inlinable
  global time:     6.020000
  self size:       7
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op0[ref offset: 32] changed)
    size:3.000000, time:1.020000,  executed if:(op0[ref offset: 32] == 3)
  calls:
    hwAccDmaInst_CmdResume.part.0/147 inlined
      freq:0.34
      Stack frame offset 0, callee self size 0

IPA function summary for hwAccDmaInst_CmdHalt/74 inlinable
  global time:     6.020000
  self size:       7
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op0[ref offset: 32] changed)
    size:3.000000, time:1.020000,  executed if:(op0[ref offset: 32] == 3)
  calls:
    hwAccDmaInst_CmdHalt.part.0/146 inlined
      freq:0.34
      Stack frame offset 0, callee self size 0

IPA function summary for hwAccDmaInst_CmdCancelTransferWithError/73 inlinable
  global time:     6.020000
  self size:       7
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op0[ref offset: 32] changed)
    size:3.000000, time:1.020000,  executed if:(op0[ref offset: 32] == 3)
  calls:
    hwAccDmaInst_CmdCancelTransferWithError.part.0/145 inlined
      freq:0.34
      Stack frame offset 0, callee self size 0

IPA function summary for hwAccDmaInst_CmdCancelTransfer/72 inlinable
  global time:     6.020000
  self size:       7
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op0[ref offset: 32] changed)
    size:3.000000, time:1.020000,  executed if:(op0[ref offset: 32] == 3)
  calls:
    hwAccDmaInst_CmdCancelTransfer.part.0/144 inlined
      freq:0.34
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaInst_SetConfig/71 inlinable
  global time:     9.452800
  self size:       9
  global size:     30
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op0[ref offset: 32] changed)
    size:11.000000, time:1.922800,  executed if:(op0[ref offset: 32] == 3)
    size:2.500000, time:0.506000,  executed if:(op0[ref offset: 32] == 3),  nonconst if:(op1[ref offset: 64] changed) && (op0[ref offset: 32] == 3)
    size:2.500000, time:0.506000,  executed if:(op0[ref offset: 32] == 3),  nonconst if:(op1[ref offset: 72] changed) && (op0[ref offset: 32] == 3)
    size:2.500000, time:0.506000,  executed if:(op0[ref offset: 32] == 3),  nonconst if:(op1[ref offset: 80] changed) && (op0[ref offset: 32] == 3)
    size:2.500000, time:0.506000,  executed if:(op0[ref offset: 32] == 3),  nonconst if:(op1[ref offset: 88] changed) && (op0[ref offset: 32] == 3)
    size:2.500000, time:0.506000,  executed if:(op0[ref offset: 32] == 3),  nonconst if:(op1[ref offset: 96] changed) && (op0[ref offset: 32] == 3)
  calls:
    hwv3AccInlineDmaInst_SetConfig.constprop/162 inlined
      freq:0.20
      Stack frame offset 0, callee self size 0

IPA function summary for HwAccDmaCh_GetParamDummyFunction/70 inlinable
  global time:     2.000000
  self size:       3
  global size:     3
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for hwv3AccInlineDmaCh_SetMajorLoop_Count/46 inlinable
  global time:     14.000000
  self size:       22
  global size:     22
  min size:       2
  self stack:      0
  global stack:    0
  estimated growth:4
    size:2.000000, time:1.000000
    size:5.000000, time:3.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 240] changed) && (not inlined)
    size:2.500000, time:1.500000,  nonconst if:(op0[ref offset: 240] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 176] changed) && (not inlined)
    size:2.500000, time:1.500000,  nonconst if:(op0[ref offset: 176] changed)
    size:3.000000, time:3.000000,  nonconst if:(op0[ref offset: 240] changed || op0[ref offset: 176] changed)
    size:2.000000, time:1.000000,  nonconst if:(op1 changed)
    size:2.000000, time:1.000000,  nonconst if:(op0[ref offset: 240] changed || op1 changed)
    size:2.000000, time:1.000000,  nonconst if:(op0[ref offset: 176] changed || op1 changed)
  calls:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

hwv3AccInlineDmaCh_SetMinorLoop_Size/175 (hwv3AccInlineDmaCh_SetMinorLoop_Size) @06202ee0
  Type: function definition analyzed
  Visibility:
  next sharing asm name: 43
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetMinorLoop_Size/175 is inline copy in HwAccDmaCh_LoadConfigIntoSoftwareTcd/134
  Clone of hwv3AccInlineDmaCh_SetMinorLoop_Size/43
  Availability: local
  Function flags: count:195204118 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 (inlined) (195204118 (estimated locally),0.18 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetMajorLoop_LinkCh/174 (hwv3AccInlineDmaCh_SetMajorLoop_LinkCh) @06202000
  Type: function definition analyzed
  Visibility:
  next sharing asm name: 173
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetMajorLoop_LinkCh/174 is inline copy in HwAccDmaCh_LoadConfigIntoSoftwareTcd/134
  Clone of hwv3AccInlineDmaCh_SetMajorLoop_LinkCh/45
  Availability: local
  Function flags: count:97602059 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 (inlined) (97602059 (estimated locally),0.09 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetMajorLoop_LinkCh/173 (hwv3AccInlineDmaCh_SetMajorLoop_LinkCh) @062021c0
  Type: function definition analyzed
  Visibility:
  next sharing asm name: 45
  previous sharing asm name: 174
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetMajorLoop_LinkCh/173 is inline copy in HwAccDmaCh_LoadConfigIntoSoftwareTcd/134
  Clone of hwv3AccInlineDmaCh_SetMajorLoop_LinkCh/45
  Availability: local
  Function flags: count:97602059 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 (inlined) (97602059 (estimated locally),0.09 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetMinorLoop_LinkCh/172 (hwv3AccInlineDmaCh_SetMinorLoop_LinkCh) @06202e00
  Type: function definition analyzed
  Visibility:
  next sharing asm name: 42
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetMinorLoop_LinkCh/172 is inline copy in HwAccDmaCh_SetMinorLoop_LogicLinkCh/112
  Clone of hwv3AccInlineDmaCh_SetMinorLoop_LinkCh/42
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetMinorLoop_LogicLinkCh/112 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetMinorLoop_EnLink/171 (hwv3AccInlineDmaCh_SetMinorLoop_EnLink) @061cde00
  Type: function definition analyzed
  Visibility:
  next sharing asm name: 41
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetMinorLoop_EnLink/171 is inline copy in HwAccDmaCh_SetMinorLoop_EnLink/111
  Clone of hwv3AccInlineDmaCh_SetMinorLoop_EnLink/41
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetMinorLoop_EnLink/111 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetMajorLoop_EnLink/170 (hwv3AccInlineDmaCh_SetMajorLoop_EnLink) @0613de00
  Type: function definition analyzed
  Visibility:
  next sharing asm name: 44
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetMajorLoop_EnLink/170 is inline copy in HwAccDmaCh_SetMajorLoop_EnLink/114
  Clone of hwv3AccInlineDmaCh_SetMajorLoop_EnLink/44
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetMajorLoop_EnLink/114 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetAuxiliary_EnScatterGatherProcessing/169 (hwv3AccInlineDmaCh_SetAuxiliary_EnScatterGatherProcessing) @06232e00
  Type: function definition analyzed
  Visibility:
  next sharing asm name: 63
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetAuxiliary_EnScatterGatherProcessing/169 is inline copy in HwAccDmaCh_SetControl_EnScatterGatherProcessing/137
  Clone of hwv3AccInlineDmaCh_SetAuxiliary_EnScatterGatherProcessing/63
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetControl_EnScatterGatherProcessing/137 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
HwAccDmaCh_SetControl_ScatterGatherAddress/168 (HwAccDmaCh_SetControl_ScatterGatherAddress) @05f4d380
  Type: function definition analyzed
  Visibility: public
  next sharing asm name: 136
  References: 
  Referring: 
  Function HwAccDmaCh_SetControl_ScatterGatherAddress/168 is inline copy in HwAccDmaCh_SetDestination_LastAddrAdj/105
  Clone of HwAccDmaCh_SetControl_ScatterGatherAddress/136
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local icf_merged optimize_size
  Called by: HwAccDmaCh_SetDestination_LastAddrAdj/105 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
hwv3AccInlineDmaCh_GetBeginIterCount.isra.0/167 (hwv3AccInlineDmaCh_GetBeginIterCount.isra) @063d2620
  Type: function definition analyzed
  Visibility:
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_GetBeginIterCount.isra/167 is inline copy in HwAccDmaCh_GetBeginIterCount/127
  Clone of hwv3AccInlineDmaCh_GetBeginIterCount/57
  Availability: local
  Function flags: count:217325344 (estimated locally) local optimize_size
  Called by: HwAccDmaCh_GetBeginIterCount/127 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_GetCurrentIterCount.isra.0/166 (hwv3AccInlineDmaCh_GetCurrentIterCount.isra) @063d2380
  Type: function definition analyzed
  Visibility:
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_GetCurrentIterCount.isra/166 is inline copy in HwAccDmaCh_GetCurrentIterCount/128
  Clone of hwv3AccInlineDmaCh_GetCurrentIterCount/58
  Availability: local
  Function flags: count:217325344 (estimated locally) local optimize_size
  Called by: HwAccDmaCh_GetCurrentIterCount/128 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetControlAndStatus.isra.0/165 (hwv3AccInlineDmaCh_SetControlAndStatus.isra) @063d20e0
  Type: function definition analyzed
  Visibility:
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetControlAndStatus.isra/165 is inline copy in HwAccDmaCh_LoadConfigIntoSoftwareTcd/134
  Clone of hwv3AccInlineDmaCh_SetControlAndStatus/65
  Availability: local
  Function flags: count:195204118 (estimated locally) local optimize_size
  Called by: HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 (inlined) (195204118 (estimated locally),0.18 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetTransferAttributes.isra.0/164 (hwv3AccInlineDmaCh_SetTransferAttributes.isra) @0351fc40
  Type: function definition analyzed
  Visibility:
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetTransferAttributes.isra/164 is inline copy in HwAccDmaCh_LoadConfigIntoSoftwareTcd/134
  Clone of hwv3AccInlineDmaCh_SetTransferAttributes/66
  Availability: local
  Function flags: count:195204118 (estimated locally) local optimize_size
  Called by: HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 (inlined) (195204118 (estimated locally),0.18 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetSignedMinorLoopOffset.isra.0/163 (hwv3AccInlineDmaCh_SetSignedMinorLoopOffset.isra) @0351f1c0
  Type: function definition analyzed
  Visibility:
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetSignedMinorLoopOffset.isra/163 is inline copy in HwAccDmaCh_LoadConfigIntoSoftwareTcd/134
  Clone of hwv3AccInlineDmaCh_SetSignedMinorLoopOffset/67
  Availability: local
  Function flags: count:195204118 (estimated locally) local optimize_size
  Called by: HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 (inlined) (195204118 (estimated locally),0.18 per call) 
  Calls: 
hwv3AccInlineDmaInst_SetConfig.constprop.0/162 (hwv3AccInlineDmaInst_SetConfig.constprop) @0351fee0
  Type: function definition analyzed
  Visibility:
  References: 
  Referring: 
  Function hwv3AccInlineDmaInst_SetConfig.constprop/162 is inline copy in HwAccDmaInst_SetConfig/71
  Clone of hwv3AccInlineDmaInst_SetConfig/1
  Availability: local
  Function flags: count:217325344 (estimated locally) local optimize_size
  Called by: HwAccDmaInst_SetConfig/71 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
HwAccDmaCh_SetControl_EnStart.part.0/159 (HwAccDmaCh_SetControl_EnStart.part.0) @061f5460
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function HwAccDmaCh_SetControl_EnStart.part.0/159 is inline copy in HwAccDmaCh_SetControl_EnStart/118
  Availability: local
  Function flags: count:365072224 (estimated locally) body local split_part optimize_size
  Called by: HwAccDmaCh_SetControl_EnStart/118 (inlined) (365072224 (estimated locally),0.34 per call) 
  Calls: 
HwAccDmaCh_SetControl_StoreDestinationAddress.part.0/158 (HwAccDmaCh_SetControl_StoreDestinationAddress.part.0) @061f52a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function HwAccDmaCh_SetControl_StoreDestinationAddress.part.0/158 is inline copy in HwAccDmaCh_SetControl_StoreDestinationAddress/117
  Availability: local
  Function flags: count:365072224 (estimated locally) body local split_part optimize_size
  Called by: HwAccDmaCh_SetControl_StoreDestinationAddress/117 (inlined) (365072224 (estimated locally),0.34 per call) 
  Calls: 
HwAccDmaCh_SetRequest_EnMuxTrigger.part.0/151 (HwAccDmaCh_SetRequest_EnMuxTrigger.part.0) @063c4540
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: Dma_Ip_paxHwv3MuxBase/68 (read) 
  Referring: 
  Function HwAccDmaCh_SetRequest_EnMuxTrigger.part.0/151 is inline copy in HwAccDmaCh_SetRequest_EnMuxTrigger/90
  Availability: local
  Function flags: count:217325344 (estimated locally) body local split_part optimize_size
  Called by: HwAccDmaCh_SetRequest_EnMuxTrigger/90 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: hwv3AccInlineDmaCh_SetRequest_EnTriggerMux/20 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetRequest_MuxSource.part.0/150 (HwAccDmaCh_SetRequest_MuxSource.part.0) @063c4000
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: Dma_Ip_paxHwv3MuxBase/68 (read) 
  Referring: 
  Function HwAccDmaCh_SetRequest_MuxSource.part.0/150 is inline copy in HwAccDmaCh_SetRequest_MuxSource/89
  Availability: local
  Function flags: count:217325344 (estimated locally) body local split_part optimize_size
  Called by: HwAccDmaCh_SetRequest_MuxSource/89 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: hwv3AccInlineDmaCh_SetRequest_SourceMux/19 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetRequest_EnMuxSource.part.0/149 (HwAccDmaCh_SetRequest_EnMuxSource.part.0) @0612fa80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: Dma_Ip_paxHwv3MuxBase/68 (read) 
  Referring: 
  Function HwAccDmaCh_SetRequest_EnMuxSource.part.0/149 is inline copy in HwAccDmaCh_SetRequest_EnMuxSource/88
  Availability: local
  Function flags: count:217325344 (estimated locally) body local split_part optimize_size
  Called by: HwAccDmaCh_SetRequest_EnMuxSource/88 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: hwv3AccInlineDmaCh_SetRequest_EnHwRequestMux/21 (inlined) (217325344 (estimated locally),0.20 per call) 
hwAccDmaInst_CmdResume.part.0/147 (hwAccDmaInst_CmdResume.part.0) @061b3540
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function hwAccDmaInst_CmdResume.part.0/147 is inline copy in hwAccDmaInst_CmdResume/75
  Availability: local
  Function flags: count:365072224 (estimated locally) body local split_part optimize_size
  Called by: hwAccDmaInst_CmdResume/75 (inlined) (365072224 (estimated locally),0.34 per call) 
  Calls: 
hwAccDmaInst_CmdHalt.part.0/146 (hwAccDmaInst_CmdHalt.part.0) @061b3380
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function hwAccDmaInst_CmdHalt.part.0/146 is inline copy in hwAccDmaInst_CmdHalt/74
  Availability: local
  Function flags: count:365072224 (estimated locally) body local split_part optimize_size
  Called by: hwAccDmaInst_CmdHalt/74 (inlined) (365072224 (estimated locally),0.34 per call) 
  Calls: 
hwAccDmaInst_CmdCancelTransferWithError.part.0/145 (hwAccDmaInst_CmdCancelTransferWithError.part.0) @061b31c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function hwAccDmaInst_CmdCancelTransferWithError.part.0/145 is inline copy in hwAccDmaInst_CmdCancelTransferWithError/73
  Availability: local
  Function flags: count:365072224 (estimated locally) body local split_part optimize_size
  Called by: hwAccDmaInst_CmdCancelTransferWithError/73 (inlined) (365072224 (estimated locally),0.34 per call) 
  Calls: 
hwAccDmaInst_CmdCancelTransfer.part.0/144 (hwAccDmaInst_CmdCancelTransfer.part.0) @061b3000
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function hwAccDmaInst_CmdCancelTransfer.part.0/144 is inline copy in hwAccDmaInst_CmdCancelTransfer/72
  Availability: local
  Function flags: count:365072224 (estimated locally) body local split_part optimize_size
  Called by: hwAccDmaInst_CmdCancelTransfer/72 (inlined) (365072224 (estimated locally),0.34 per call) 
  Calls: 
fpHwAcc_DmaCh_GetParam.0/143 (fpHwAcc_DmaCh_GetParam) @06207990
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: HwAccDmaCh_GetSourceAddress/125 (addr) HwAccDmaCh_GetDestinationAddress/126 (addr) HwAccDmaCh_GetBeginIterCount/127 (addr) HwAccDmaCh_GetCurrentIterCount/128 (addr) HwAccDmaCh_GetStoreDstAddress/129 (addr) HwAccDmaCh_GetMasterId/130 (addr) HwAccDmaCh_GetIntMajor/131 (addr) HwAccDmaCh_GetIntHalfMajor/132 (addr) HwAccDmaCh_GetParamDummyFunction/70 (addr) 
  Referring: HwAccDmaCh_GetParam/133 (read) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
fpHwAcc_DmaCh_SetTransferParam.1/142 (fpHwAcc_DmaCh_SetTransferParam) @061fbe58
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: HwAccDmaCh_SetSource_Address/98 (addr) HwAccDmaCh_SetSource_SignedOffset/99 (addr) HwAccDmaCh_SetSource_LastAddrAdj/100 (addr) HwAccDmaCh_SetSource_TransferSize/101 (addr) HwAccDmaCh_SetSource_Modulo/102 (addr) HwAccDmaCh_SetDestination_Address/103 (addr) HwAccDmaCh_SetDestination_SignedOffset/104 (addr) HwAccDmaCh_SetDestination_LastAddrAdj/105 (addr) HwAccDmaCh_SetDestination_TransferSize/106 (addr) HwAccDmaCh_SetDestination_Modulo/107 (addr) HwAccDmaCh_SetMinorLoop_enSrcOffset/108 (addr) HwAccDmaCh_SetMinorLoop_enDstOffset/109 (addr) HwAccDmaCh_SetMinorLoop_Offset/110 (addr) HwAccDmaCh_SetMinorLoop_EnLink/111 (addr) HwAccDmaCh_SetMinorLoop_LogicLinkCh/112 (addr) HwAccDmaCh_SetMinorLoop_Size/113 (addr) HwAccDmaCh_SetMajorLoop_EnLink/114 (addr) HwAccDmaCh_SetMajorLoop_LogicLinkCh/115 (addr) HwAccDmaCh_SetMajorLoop_Count/116 (addr) HwAccDmaCh_SetControl_StoreDestinationAddress/117 (addr) HwAccDmaCh_SetControl_EnStart/118 (addr) HwAccDmaCh_SetControl_EnMajor/119 (addr) HwAccDmaCh_SetControl_EnHalfMajor/120 (addr) HwAccDmaCh_SetControl_DisAutoHwRequest/121 (addr) HwAccDmaCh_SetControl_EnEndOfPacketSignal/122 (addr) HwAccDmaCh_SetControl_BandwidthControl/123 (addr) 
  Referring: HwAccDmaCh_SetTransferParam/124 (read) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
Dma_Ip_ConvertLogicChToHwCh/141 (Dma_Ip_ConvertLogicChToHwCh) @061e78c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 (97602059 (estimated locally),0.09 per call) HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 (195204118 (estimated locally),0.18 per call) HwAccDmaCh_SetMajorLoop_LogicLinkCh/115 (1073741824 (estimated locally),1.00 per call) HwAccDmaCh_SetMinorLoop_LogicLinkCh/112 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
fpHwAcc_DmaCh_SetGlobalParam.2/140 (fpHwAcc_DmaCh_SetGlobalParam) @061d0dc8
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: HwAccDmaCh_SetControl_EnMasterIdReplication/86 (addr) HwAccDmaCh_SetControl_EnBufferedWrites/87 (addr) HwAccDmaCh_SetRequest_EnMuxSource/88 (addr) HwAccDmaCh_SetRequest_MuxSource/89 (addr) HwAccDmaCh_SetRequest_EnMuxTrigger/90 (addr) HwAccDmaCh_SetRequest_EnRequest/91 (addr) HwAccDmaCh_SetInterrupt_EnError/92 (addr) HwAccDmaCh_SetPriority_Group/93 (addr) HwAccDmaCh_SetPriority_Level/94 (addr) HwAccDmaCh_SetPriority_EnPreemption/95 (addr) HwAccDmaCh_SetPriority_DisPreempt/96 (addr) 
  Referring: HwAccDmaCh_SetGlobalParam/97 (read) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
fpHwAcc_DmaCh_Command.3/139 (fpHwAcc_DmaCh_Command) @061c0630
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: HwAccDmaCh_CmdSetHwRequest/78 (addr) HwAccDmaCh_CmdClearHwRequest/79 (addr) HwAccDmaCh_CmdSetSwRequest/80 (addr) HwAccDmaCh_CmdClearDone/81 (addr) HwAccDmaCh_CmdClearError/82 (addr) 
  Referring: HwAccDmaCh_SetCommand/83 (read) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
fpHwAcc_DmaInst_Command.4/138 (fpHwAcc_DmaInst_Command) @061b6168
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: hwAccDmaInst_CmdCancelTransfer/72 (addr) hwAccDmaInst_CmdCancelTransferWithError/73 (addr) hwAccDmaInst_CmdHalt/74 (addr) hwAccDmaInst_CmdResume/75 (addr) 
  Referring: HwAccDmaInst_SetCommand/76 (read) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
HwAccDmaCh_SetControl_EnScatterGatherProcessing/137 (HwAccDmaCh_SetControl_EnScatterGatherProcessing) @061a0d20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetAuxiliary_EnScatterGatherProcessing/169 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetControl_ScatterGatherAddress/136 (HwAccDmaCh_SetControl_ScatterGatherAddress) @061a0a80
  Type: function definition analyzed
  Visibility: externally_visible public
  previous sharing asm name: 168
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body icf_merged optimize_size
  Called by: 
  Calls: 
HwAccDmaCh_LoadSoftwareTcdIntoHardwareTcd/135 (HwAccDmaCh_LoadSoftwareTcdIntoHardwareTcd) @061a07e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: g_ptHwChTcdPtrArray/0 (read) 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 (HwAccDmaCh_LoadConfigIntoSoftwareTcd) @061a0540
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetMajorLoop_Count/46 (195204118 (estimated locally),0.18 per call) hwv3AccInlineDmaCh_SetMajorLoop_LinkCh/173 (inlined) (97602059 (estimated locally),0.09 per call) hwv3AccInlineDmaCh_SetMajorLoop_LinkCh/174 (inlined) (97602059 (estimated locally),0.09 per call) Dma_Ip_ConvertLogicChToHwCh/141 (97602059 (estimated locally),0.09 per call) hwv3AccInlineDmaCh_SetMajorLoop_EnLink/44 (inlined) (195204118 (estimated locally),0.18 per call) hwv3AccInlineDmaCh_SetMinorLoop_Size/175 (inlined) (195204118 (estimated locally),0.18 per call) hwv3AccInlineDmaCh_SetMinorLoop_LinkCh/42 (inlined) (195204118 (estimated locally),0.18 per call) Dma_Ip_ConvertLogicChToHwCh/141 (195204118 (estimated locally),0.18 per call) hwv3AccInlineDmaCh_SetMinorLoop_EnLink/41 (inlined) (195204118 (estimated locally),0.18 per call) hwv3AccInlineDmaCh_SetSignedMinorLoopOffset.isra.0/163 (inlined) (195204118 (estimated locally),0.18 per call) hwv3AccInlineDmaCh_SetTransferAttributes.isra.0/164 (inlined) (195204118 (estimated locally),0.18 per call) hwv3AccInlineDmaCh_SetControlAndStatus.isra.0/165 (inlined) (195204118 (estimated locally),0.18 per call) hwv3AccInlineDmaCh_SetAuxiliary_EnScatterGatherProcessing/63 (inlined) (365072224 (estimated locally),0.34 per call) 
HwAccDmaCh_GetParam/133 (HwAccDmaCh_GetParam) @061a02a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: fpHwAcc_DmaCh_GetParam.0/143 (read) 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
   Indirect call(1073741824 (estimated locally),1.00 per call)  Num speculative call targets: 0
HwAccDmaCh_GetIntHalfMajor/132 (HwAccDmaCh_GetIntHalfMajor) @06197ee0
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: g_ptHwChTcdPtrArray/0 (read) 
  Referring: fpHwAcc_DmaCh_GetParam.0/143 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
HwAccDmaCh_GetIntMajor/131 (HwAccDmaCh_GetIntMajor) @061979a0
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: g_ptHwChTcdPtrArray/0 (read) 
  Referring: fpHwAcc_DmaCh_GetParam.0/143 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
HwAccDmaCh_GetMasterId/130 (HwAccDmaCh_GetMasterId) @06197460
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: g_ptHwChTcdPtrArray/0 (read) 
  Referring: fpHwAcc_DmaCh_GetParam.0/143 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
HwAccDmaCh_GetStoreDstAddress/129 (HwAccDmaCh_GetStoreDstAddress) @06197e00
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: g_ptHwChTcdPtrArray/0 (read) 
  Referring: fpHwAcc_DmaCh_GetParam.0/143 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
HwAccDmaCh_GetCurrentIterCount/128 (HwAccDmaCh_GetCurrentIterCount) @06197b60
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: g_ptHwChTcdPtrArray/0 (read) 
  Referring: fpHwAcc_DmaCh_GetParam.0/143 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_GetCurrentIterCount.isra.0/166 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_GetBeginIterCount/127 (HwAccDmaCh_GetBeginIterCount) @061978c0
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: g_ptHwChTcdPtrArray/0 (read) 
  Referring: fpHwAcc_DmaCh_GetParam.0/143 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_GetBeginIterCount.isra.0/167 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_GetDestinationAddress/126 (HwAccDmaCh_GetDestinationAddress) @06197620
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: g_ptHwChTcdPtrArray/0 (read) 
  Referring: fpHwAcc_DmaCh_GetParam.0/143 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
HwAccDmaCh_GetSourceAddress/125 (HwAccDmaCh_GetSourceAddress) @06197380
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: g_ptHwChTcdPtrArray/0 (read) 
  Referring: fpHwAcc_DmaCh_GetParam.0/143 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
HwAccDmaCh_SetTransferParam/124 (HwAccDmaCh_SetTransferParam) @061970e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: fpHwAcc_DmaCh_SetTransferParam.1/142 (read) 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
   Indirect call(1073741824 (estimated locally),1.00 per call)  Num speculative call targets: 0
HwAccDmaCh_SetControl_BandwidthControl/123 (HwAccDmaCh_SetControl_BandwidthControl) @06190b60
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetTransferParam.1/142 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetControl_BandwidthControl/54 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetControl_EnEndOfPacketSignal/122 (HwAccDmaCh_SetControl_EnEndOfPacketSignal) @06190620
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetTransferParam.1/142 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetControl_EnEndOfPacketSignal/53 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetControl_DisAutoHwRequest/121 (HwAccDmaCh_SetControl_DisAutoHwRequest) @061900e0
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetTransferParam.1/142 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetControl_DisAutoHwRequest/52 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetControl_EnHalfMajor/120 (HwAccDmaCh_SetControl_EnHalfMajor) @06190d20
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetTransferParam.1/142 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetControl_EnHalfMajor/51 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetControl_EnMajor/119 (HwAccDmaCh_SetControl_EnMajor) @06190a80
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetTransferParam.1/142 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetControl_EnMajor/50 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetControl_EnStart/118 (HwAccDmaCh_SetControl_EnStart) @061907e0
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetTransferParam.1/142 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: HwAccDmaCh_SetControl_EnStart.part.0/159 (inlined) (365072224 (estimated locally),0.34 per call) 
HwAccDmaCh_SetControl_StoreDestinationAddress/117 (HwAccDmaCh_SetControl_StoreDestinationAddress) @06190540
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetTransferParam.1/142 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: HwAccDmaCh_SetControl_StoreDestinationAddress.part.0/158 (inlined) (365072224 (estimated locally),0.34 per call) 
HwAccDmaCh_SetMajorLoop_Count/116 (HwAccDmaCh_SetMajorLoop_Count) @061902a0
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetTransferParam.1/142 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetMajorLoop_Count/46 (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetMajorLoop_LogicLinkCh/115 (HwAccDmaCh_SetMajorLoop_LogicLinkCh) @06190000
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetTransferParam.1/142 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetMajorLoop_LinkCh/45 (inlined) (217325344 (estimated locally),0.20 per call) Dma_Ip_ConvertLogicChToHwCh/141 (1073741824 (estimated locally),1.00 per call) 
HwAccDmaCh_SetMajorLoop_EnLink/114 (HwAccDmaCh_SetMajorLoop_EnLink) @06188b60
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetTransferParam.1/142 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetMajorLoop_EnLink/170 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetMinorLoop_Size/113 (HwAccDmaCh_SetMinorLoop_Size) @06188620
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetTransferParam.1/142 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetMinorLoop_Size/43 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetMinorLoop_LogicLinkCh/112 (HwAccDmaCh_SetMinorLoop_LogicLinkCh) @061880e0
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetTransferParam.1/142 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetMinorLoop_LinkCh/172 (inlined) (217325344 (estimated locally),0.20 per call) Dma_Ip_ConvertLogicChToHwCh/141 (1073741824 (estimated locally),1.00 per call) 
HwAccDmaCh_SetMinorLoop_EnLink/111 (HwAccDmaCh_SetMinorLoop_EnLink) @06188d20
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetTransferParam.1/142 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetMinorLoop_EnLink/171 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetMinorLoop_Offset/110 (HwAccDmaCh_SetMinorLoop_Offset) @06188a80
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetTransferParam.1/142 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetMinorLoop_SignedOffset/40 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetMinorLoop_enDstOffset/109 (HwAccDmaCh_SetMinorLoop_enDstOffset) @061887e0
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetTransferParam.1/142 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetMinorLoop_enDstOffset/39 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetMinorLoop_enSrcOffset/108 (HwAccDmaCh_SetMinorLoop_enSrcOffset) @06188540
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetTransferParam.1/142 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetMinorLoop_enSrcOffset/38 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetDestination_Modulo/107 (HwAccDmaCh_SetDestination_Modulo) @061882a0
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetTransferParam.1/142 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetDestination_Modulo/37 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetDestination_TransferSize/106 (HwAccDmaCh_SetDestination_TransferSize) @06188000
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetTransferParam.1/142 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetDestination_TransferSize/36 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetDestination_LastAddrAdj/105 (HwAccDmaCh_SetDestination_LastAddrAdj) @06182b60
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetTransferParam.1/142 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body icf_merged optimize_size
  Called by: 
  Calls: HwAccDmaCh_SetControl_ScatterGatherAddress/168 (inlined) (1073741824 (estimated locally),1.00 per call) 
HwAccDmaCh_SetDestination_SignedOffset/104 (HwAccDmaCh_SetDestination_SignedOffset) @06182620
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetTransferParam.1/142 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
HwAccDmaCh_SetDestination_Address/103 (HwAccDmaCh_SetDestination_Address) @061820e0
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetTransferParam.1/142 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
HwAccDmaCh_SetSource_Modulo/102 (HwAccDmaCh_SetSource_Modulo) @06182d20
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetTransferParam.1/142 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetSource_Modulo/32 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetSource_TransferSize/101 (HwAccDmaCh_SetSource_TransferSize) @06182a80
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetTransferParam.1/142 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetSource_TransferSize/31 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetSource_LastAddrAdj/100 (HwAccDmaCh_SetSource_LastAddrAdj) @061827e0
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetTransferParam.1/142 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
HwAccDmaCh_SetSource_SignedOffset/99 (HwAccDmaCh_SetSource_SignedOffset) @06182540
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetTransferParam.1/142 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
HwAccDmaCh_SetSource_Address/98 (HwAccDmaCh_SetSource_Address) @061822a0
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetTransferParam.1/142 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
HwAccDmaCh_SetGlobalParam/97 (HwAccDmaCh_SetGlobalParam) @06182000
  Type: function definition analyzed
  Visibility: externally_visible public
  References: fpHwAcc_DmaCh_SetGlobalParam.2/140 (read) 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
   Indirect call(1073741824 (estimated locally),1.00 per call)  Num speculative call targets: 0
HwAccDmaCh_SetPriority_DisPreempt/96 (HwAccDmaCh_SetPriority_DisPreempt) @061789a0
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: g_ptHwChTcdPtrArray/0 (read) 
  Referring: fpHwAcc_DmaCh_SetGlobalParam.2/140 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetPriority_DisPreempt/27 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetPriority_EnPreemption/95 (HwAccDmaCh_SetPriority_EnPreemption) @06178460
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: g_ptHwChTcdPtrArray/0 (read) 
  Referring: fpHwAcc_DmaCh_SetGlobalParam.2/140 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetPriority_EnPreemption/26 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetPriority_Level/94 (HwAccDmaCh_SetPriority_Level) @06178e00
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: g_ptHwChTcdPtrArray/0 (read) 
  Referring: fpHwAcc_DmaCh_SetGlobalParam.2/140 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetPriority_Level/25 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetPriority_Group/93 (HwAccDmaCh_SetPriority_Group) @06178b60
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetGlobalParam.2/140 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetPriority_Group/24 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetInterrupt_EnError/92 (HwAccDmaCh_SetInterrupt_EnError) @061788c0
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: g_ptHwChTcdPtrArray/0 (read) 
  Referring: fpHwAcc_DmaCh_SetGlobalParam.2/140 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetInterrupt_EnError/23 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetRequest_EnRequest/91 (HwAccDmaCh_SetRequest_EnRequest) @06178620
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: g_ptHwChTcdPtrArray/0 (read) 
  Referring: fpHwAcc_DmaCh_SetGlobalParam.2/140 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetRequest_EnHwRequest/22 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetRequest_EnMuxTrigger/90 (HwAccDmaCh_SetRequest_EnMuxTrigger) @06178380
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetGlobalParam.2/140 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: HwAccDmaCh_SetRequest_EnMuxTrigger.part.0/151 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetRequest_MuxSource/89 (HwAccDmaCh_SetRequest_MuxSource) @06178000
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetGlobalParam.2/140 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: HwAccDmaCh_SetRequest_MuxSource.part.0/150 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetRequest_EnMuxSource/88 (HwAccDmaCh_SetRequest_EnMuxSource) @061728c0
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_SetGlobalParam.2/140 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: HwAccDmaCh_SetRequest_EnMuxSource.part.0/149 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetControl_EnBufferedWrites/87 (HwAccDmaCh_SetControl_EnBufferedWrites) @061720e0
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: g_ptHwChTcdPtrArray/0 (read) 
  Referring: fpHwAcc_DmaCh_SetGlobalParam.2/140 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetControl_EnBufferedWrites/18 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_SetControl_EnMasterIdReplication/86 (HwAccDmaCh_SetControl_EnMasterIdReplication) @06172d20
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: g_ptHwChTcdPtrArray/0 (read) 
  Referring: fpHwAcc_DmaCh_SetGlobalParam.2/140 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaCh_SetControl_EnMasterIdReplication/17 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_GetStatus_Error/85 (HwAccDmaCh_GetStatus_Error) @06172a80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: g_ptHwChTcdPtrArray/0 (read) 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
HwAccDmaCh_GetStatus/84 (HwAccDmaCh_GetStatus) @061727e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: g_ptHwChTcdPtrArray/0 (read) 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
HwAccDmaCh_SetCommand/83 (HwAccDmaCh_SetCommand) @06172540
  Type: function definition analyzed
  Visibility: externally_visible public
  References: fpHwAcc_DmaCh_Command.3/139 (read) 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
   Indirect call(1073741824 (estimated locally),1.00 per call)  Num speculative call targets: 0
HwAccDmaCh_CmdClearError/82 (HwAccDmaCh_CmdClearError) @061722a0
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: g_ptHwChTcdPtrArray/0 (read) 
  Referring: fpHwAcc_DmaCh_Command.3/139 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
HwAccDmaCh_CmdClearDone/81 (HwAccDmaCh_CmdClearDone) @06172000
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: g_ptHwChTcdPtrArray/0 (read) 
  Referring: fpHwAcc_DmaCh_Command.3/139 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
HwAccDmaCh_CmdSetSwRequest/80 (HwAccDmaCh_CmdSetSwRequest) @06166b60
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: g_ptHwChTcdPtrArray/0 (read) 
  Referring: fpHwAcc_DmaCh_Command.3/139 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
HwAccDmaCh_CmdClearHwRequest/79 (HwAccDmaCh_CmdClearHwRequest) @06166620
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: g_ptHwChTcdPtrArray/0 (read) 
  Referring: fpHwAcc_DmaCh_Command.3/139 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
HwAccDmaCh_CmdSetHwRequest/78 (HwAccDmaCh_CmdSetHwRequest) @061660e0
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: g_ptHwChTcdPtrArray/0 (read) 
  Referring: fpHwAcc_DmaCh_Command.3/139 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
HwAccDmaInst_GetStatus/77 (HwAccDmaInst_GetStatus) @06166d20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
HwAccDmaInst_SetCommand/76 (HwAccDmaInst_SetCommand) @06166a80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: fpHwAcc_DmaInst_Command.4/138 (read) 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
   Indirect call(1073741824 (estimated locally),1.00 per call)  Num speculative call targets: 0
hwAccDmaInst_CmdResume/75 (hwAccDmaInst_CmdResume) @061667e0
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaInst_Command.4/138 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwAccDmaInst_CmdResume.part.0/147 (inlined) (365072224 (estimated locally),0.34 per call) 
hwAccDmaInst_CmdHalt/74 (hwAccDmaInst_CmdHalt) @06166540
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaInst_Command.4/138 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwAccDmaInst_CmdHalt.part.0/146 (inlined) (365072224 (estimated locally),0.34 per call) 
hwAccDmaInst_CmdCancelTransferWithError/73 (hwAccDmaInst_CmdCancelTransferWithError) @061662a0
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaInst_Command.4/138 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwAccDmaInst_CmdCancelTransferWithError.part.0/145 (inlined) (365072224 (estimated locally),0.34 per call) 
hwAccDmaInst_CmdCancelTransfer/72 (hwAccDmaInst_CmdCancelTransfer) @06166000
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaInst_Command.4/138 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwAccDmaInst_CmdCancelTransfer.part.0/144 (inlined) (365072224 (estimated locally),0.34 per call) 
HwAccDmaInst_SetConfig/71 (HwAccDmaInst_SetConfig) @06161b60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: hwv3AccInlineDmaInst_SetConfig.constprop.0/162 (inlined) (217325344 (estimated locally),0.20 per call) 
HwAccDmaCh_GetParamDummyFunction/70 (HwAccDmaCh_GetParamDummyFunction) @06161d20
  Type: function definition analyzed
  Visibility: externally_visible public
  Address is taken.
  References: 
  Referring: fpHwAcc_DmaCh_GetParam.0/143 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
Dma_Ip_paxHwv3MuxBase/68 (Dma_Ip_paxHwv3MuxBase) @05f4eea0
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: HwAccDmaCh_SetRequest_EnMuxSource.part.0/149 (read) HwAccDmaCh_SetRequest_MuxSource.part.0/150 (read) HwAccDmaCh_SetRequest_EnMuxTrigger.part.0/151 (read) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
hwv3AccInlineDmaCh_SetSignedMinorLoopOffset/67 (hwv3AccInlineDmaCh_SetSignedMinorLoopOffset) @06148ee0
  Type: function
  Body removed by symtab_remove_unreachable_nodes
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: not_available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
hwv3AccInlineDmaCh_SetTransferAttributes/66 (hwv3AccInlineDmaCh_SetTransferAttributes) @06148c40
  Type: function
  Body removed by symtab_remove_unreachable_nodes
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: not_available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
hwv3AccInlineDmaCh_SetControlAndStatus/65 (hwv3AccInlineDmaCh_SetControlAndStatus) @061489a0
  Type: function
  Body removed by symtab_remove_unreachable_nodes
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: not_available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
hwv3AccInlineDmaCh_SetAuxiliary_EnScatterGatherProcessing/63 (hwv3AccInlineDmaCh_SetAuxiliary_EnScatterGatherProcessing) @06148380
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  previous sharing asm name: 169
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetAuxiliary_EnScatterGatherProcessing/63 is inline copy in HwAccDmaCh_LoadConfigIntoSoftwareTcd/134
  Availability: local
  Function flags: count:365072224 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 (inlined) (365072224 (estimated locally),0.34 per call) 
  Calls: 
hwv3AccInlineDmaCh_GetCurrentIterCount/58 (hwv3AccInlineDmaCh_GetCurrentIterCount) @06144620
  Type: function
  Body removed by symtab_remove_unreachable_nodes
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: not_available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
hwv3AccInlineDmaCh_GetBeginIterCount/57 (hwv3AccInlineDmaCh_GetBeginIterCount) @06144380
  Type: function
  Body removed by symtab_remove_unreachable_nodes
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: not_available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
hwv3AccInlineDmaCh_SetControl_BandwidthControl/54 (hwv3AccInlineDmaCh_SetControl_BandwidthControl) @0613db60
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetControl_BandwidthControl/54 is inline copy in HwAccDmaCh_SetControl_BandwidthControl/123
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetControl_BandwidthControl/123 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetControl_EnEndOfPacketSignal/53 (hwv3AccInlineDmaCh_SetControl_EnEndOfPacketSignal) @0613d7e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetControl_EnEndOfPacketSignal/53 is inline copy in HwAccDmaCh_SetControl_EnEndOfPacketSignal/122
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetControl_EnEndOfPacketSignal/122 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetControl_DisAutoHwRequest/52 (hwv3AccInlineDmaCh_SetControl_DisAutoHwRequest) @0613d460
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetControl_DisAutoHwRequest/52 is inline copy in HwAccDmaCh_SetControl_DisAutoHwRequest/121
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetControl_DisAutoHwRequest/121 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetControl_EnHalfMajor/51 (hwv3AccInlineDmaCh_SetControl_EnHalfMajor) @0613d0e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetControl_EnHalfMajor/51 is inline copy in HwAccDmaCh_SetControl_EnHalfMajor/120
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetControl_EnHalfMajor/120 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetControl_EnMajor/50 (hwv3AccInlineDmaCh_SetControl_EnMajor) @05f4dd20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetControl_EnMajor/50 is inline copy in HwAccDmaCh_SetControl_EnMajor/119
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetControl_EnMajor/119 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetMajorLoop_Count/46 (hwv3AccInlineDmaCh_SetMajorLoop_Count) @05f4d000
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 (195204118 (estimated locally),0.18 per call) HwAccDmaCh_SetMajorLoop_Count/116 (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetMajorLoop_LinkCh/45 (hwv3AccInlineDmaCh_SetMajorLoop_LinkCh) @05f479a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  previous sharing asm name: 173
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetMajorLoop_LinkCh/45 is inline copy in HwAccDmaCh_SetMajorLoop_LogicLinkCh/115
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetMajorLoop_LogicLinkCh/115 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetMajorLoop_EnLink/44 (hwv3AccInlineDmaCh_SetMajorLoop_EnLink) @05f47620
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  previous sharing asm name: 170
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetMajorLoop_EnLink/44 is inline copy in HwAccDmaCh_LoadConfigIntoSoftwareTcd/134
  Availability: local
  Function flags: count:195204118 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 (inlined) (195204118 (estimated locally),0.18 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetMinorLoop_Size/43 (hwv3AccInlineDmaCh_SetMinorLoop_Size) @05f472a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  previous sharing asm name: 175
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetMinorLoop_Size/43 is inline copy in HwAccDmaCh_SetMinorLoop_Size/113
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetMinorLoop_Size/113 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetMinorLoop_LinkCh/42 (hwv3AccInlineDmaCh_SetMinorLoop_LinkCh) @05f43e00
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  previous sharing asm name: 172
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetMinorLoop_LinkCh/42 is inline copy in HwAccDmaCh_LoadConfigIntoSoftwareTcd/134
  Availability: local
  Function flags: count:195204118 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 (inlined) (195204118 (estimated locally),0.18 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetMinorLoop_EnLink/41 (hwv3AccInlineDmaCh_SetMinorLoop_EnLink) @05f439a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  previous sharing asm name: 171
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetMinorLoop_EnLink/41 is inline copy in HwAccDmaCh_LoadConfigIntoSoftwareTcd/134
  Availability: local
  Function flags: count:195204118 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_LoadConfigIntoSoftwareTcd/134 (inlined) (195204118 (estimated locally),0.18 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetMinorLoop_SignedOffset/40 (hwv3AccInlineDmaCh_SetMinorLoop_SignedOffset) @05f43540
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetMinorLoop_SignedOffset/40 is inline copy in HwAccDmaCh_SetMinorLoop_Offset/110
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetMinorLoop_Offset/110 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetMinorLoop_enDstOffset/39 (hwv3AccInlineDmaCh_SetMinorLoop_enDstOffset) @05f431c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetMinorLoop_enDstOffset/39 is inline copy in HwAccDmaCh_SetMinorLoop_enDstOffset/109
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetMinorLoop_enDstOffset/109 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetMinorLoop_enSrcOffset/38 (hwv3AccInlineDmaCh_SetMinorLoop_enSrcOffset) @05f40e00
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetMinorLoop_enSrcOffset/38 is inline copy in HwAccDmaCh_SetMinorLoop_enSrcOffset/108
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetMinorLoop_enSrcOffset/108 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetDestination_Modulo/37 (hwv3AccInlineDmaCh_SetDestination_Modulo) @05f40a80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetDestination_Modulo/37 is inline copy in HwAccDmaCh_SetDestination_Modulo/107
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetDestination_Modulo/107 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetDestination_TransferSize/36 (hwv3AccInlineDmaCh_SetDestination_TransferSize) @05f40700
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetDestination_TransferSize/36 is inline copy in HwAccDmaCh_SetDestination_TransferSize/106
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetDestination_TransferSize/106 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetSource_Modulo/32 (hwv3AccInlineDmaCh_SetSource_Modulo) @05f3c8c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetSource_Modulo/32 is inline copy in HwAccDmaCh_SetSource_Modulo/102
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetSource_Modulo/102 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetSource_TransferSize/31 (hwv3AccInlineDmaCh_SetSource_TransferSize) @05f3c540
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetSource_TransferSize/31 is inline copy in HwAccDmaCh_SetSource_TransferSize/101
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetSource_TransferSize/101 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetPriority_DisPreempt/27 (hwv3AccInlineDmaCh_SetPriority_DisPreempt) @05f37700
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetPriority_DisPreempt/27 is inline copy in HwAccDmaCh_SetPriority_DisPreempt/96
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetPriority_DisPreempt/96 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetPriority_EnPreemption/26 (hwv3AccInlineDmaCh_SetPriority_EnPreemption) @05f37380
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetPriority_EnPreemption/26 is inline copy in HwAccDmaCh_SetPriority_EnPreemption/95
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetPriority_EnPreemption/95 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetPriority_Level/25 (hwv3AccInlineDmaCh_SetPriority_Level) @05f37000
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetPriority_Level/25 is inline copy in HwAccDmaCh_SetPriority_Level/94
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetPriority_Level/94 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetPriority_Group/24 (hwv3AccInlineDmaCh_SetPriority_Group) @05f33c40
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetPriority_Group/24 is inline copy in HwAccDmaCh_SetPriority_Group/93
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetPriority_Group/93 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetInterrupt_EnError/23 (hwv3AccInlineDmaCh_SetInterrupt_EnError) @05f338c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetInterrupt_EnError/23 is inline copy in HwAccDmaCh_SetInterrupt_EnError/92
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetInterrupt_EnError/92 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetRequest_EnHwRequest/22 (hwv3AccInlineDmaCh_SetRequest_EnHwRequest) @05f33540
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetRequest_EnHwRequest/22 is inline copy in HwAccDmaCh_SetRequest_EnRequest/91
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetRequest_EnRequest/91 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetRequest_EnHwRequestMux/21 (hwv3AccInlineDmaCh_SetRequest_EnHwRequestMux) @05f331c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetRequest_EnHwRequestMux/21 is inline copy in HwAccDmaCh_SetRequest_EnMuxSource/88
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetRequest_EnMuxSource.part.0/149 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetRequest_EnTriggerMux/20 (hwv3AccInlineDmaCh_SetRequest_EnTriggerMux) @06136e00
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetRequest_EnTriggerMux/20 is inline copy in HwAccDmaCh_SetRequest_EnMuxTrigger/90
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetRequest_EnMuxTrigger.part.0/151 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetRequest_SourceMux/19 (hwv3AccInlineDmaCh_SetRequest_SourceMux) @06136a80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetRequest_SourceMux/19 is inline copy in HwAccDmaCh_SetRequest_MuxSource/89
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetRequest_MuxSource.part.0/150 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetControl_EnBufferedWrites/18 (hwv3AccInlineDmaCh_SetControl_EnBufferedWrites) @06136700
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetControl_EnBufferedWrites/18 is inline copy in HwAccDmaCh_SetControl_EnBufferedWrites/87
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetControl_EnBufferedWrites/87 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaCh_SetControl_EnMasterIdReplication/17 (hwv3AccInlineDmaCh_SetControl_EnMasterIdReplication) @06136380
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function hwv3AccInlineDmaCh_SetControl_EnMasterIdReplication/17 is inline copy in HwAccDmaCh_SetControl_EnMasterIdReplication/86
  Availability: local
  Function flags: count:217325344 (estimated locally) body local optimize_size
  Called by: HwAccDmaCh_SetControl_EnMasterIdReplication/86 (inlined) (217325344 (estimated locally),0.20 per call) 
  Calls: 
hwv3AccInlineDmaInst_SetConfig/1 (hwv3AccInlineDmaInst_SetConfig) @05f1f000
  Type: function
  Body removed by symtab_remove_unreachable_nodes
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: not_available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
g_ptHwChTcdPtrArray/0 (g_ptHwChTcdPtrArray) @05f10678
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: HwAccDmaCh_GetStatus/84 (read) HwAccDmaCh_GetStatus_Error/85 (read) HwAccDmaCh_CmdSetHwRequest/78 (read) HwAccDmaCh_CmdClearHwRequest/79 (read) HwAccDmaCh_CmdSetSwRequest/80 (read) HwAccDmaCh_GetMasterId/130 (read) HwAccDmaCh_GetIntMajor/131 (read) HwAccDmaCh_GetIntHalfMajor/132 (read) HwAccDmaCh_CmdClearDone/81 (read) HwAccDmaCh_CmdClearError/82 (read) HwAccDmaCh_SetControl_EnMasterIdReplication/86 (read) HwAccDmaCh_SetControl_EnBufferedWrites/87 (read) HwAccDmaCh_SetRequest_EnRequest/91 (read) HwAccDmaCh_SetInterrupt_EnError/92 (read) HwAccDmaCh_SetPriority_Level/94 (read) HwAccDmaCh_SetPriority_EnPreemption/95 (read) HwAccDmaCh_SetPriority_DisPreempt/96 (read) HwAccDmaCh_GetSourceAddress/125 (read) HwAccDmaCh_GetDestinationAddress/126 (read) HwAccDmaCh_GetBeginIterCount/127 (read) HwAccDmaCh_GetCurrentIterCount/128 (read) HwAccDmaCh_GetStoreDstAddress/129 (read) HwAccDmaCh_LoadSoftwareTcdIntoHardwareTcd/135 (read) 
  Availability: available
  Varpool flags: initialized read-only const-value-known

;; Function hwv3AccInlineDmaCh_SetMajorLoop_Count (hwv3AccInlineDmaCh_SetMajorLoop_Count, funcdef_no=45, decl_uid=6614, cgraph_uid=46, symbol_order=46)

hwv3AccInlineDmaCh_SetMajorLoop_Count (struct Dma_Ip_TcdRegType * ptTcd, const uint32 Value)
{
  short unsigned int _1;
  short unsigned int _2;
  short unsigned int _3;
  short unsigned int _4;
  short unsigned int _5;
  short unsigned int _6;
  short unsigned int _7;
  short unsigned int _8;
  short unsigned int _9;
  short unsigned int _10;
  short unsigned int _11;
  short unsigned int _12;
  short unsigned int _13;
  short unsigned int _14;
  short unsigned int _15;
  signed short _24;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = ptTcd_18(D)->reg_BITER.reg_ELINKYES;
  _2 = ptTcd_18(D)->reg_CITER.reg_ELINKYES;
  _3 = _1 | _2;
  # DEBUG reg => _3 & 32768
  # DEBUG BEGIN_STMT
  _24 = (signed short) _3;
  if (_24 < 0)
    goto <bb 3>; [41.00%]
  else
    goto <bb 4>; [59.00%]

  <bb 3> [local count: 440234144]:
  # DEBUG BEGIN_STMT
  # DEBUG reg => _1
  # DEBUG BEGIN_STMT
  _4 = _1 & 65024;
  _5 = (short unsigned int) Value_19(D);
  _6 = _5 & 511;
  _7 = _4 | _6;
  ptTcd_18(D)->reg_BITER.reg_ELINKYES = _7;
  # DEBUG BEGIN_STMT
  # DEBUG reg => _2
  # DEBUG BEGIN_STMT
  _8 = _2 & 65024;
  _9 = _6 | _8;
  ptTcd_18(D)->reg_CITER.reg_ELINKYES = _9;
  goto <bb 5>; [100.00%]

  <bb 4> [local count: 633507681]:
  # DEBUG BEGIN_STMT
  # DEBUG reg => _1
  # DEBUG BEGIN_STMT
  _10 = _1 & 32768;
  _11 = (short unsigned int) Value_19(D);
  _12 = _11 & 32767;
  _13 = _10 | _12;
  ptTcd_18(D)->reg_BITER.reg_ELINKNO = _13;
  # DEBUG BEGIN_STMT
  # DEBUG reg => _2
  # DEBUG BEGIN_STMT
  _14 = _2 & 32768;
  _15 = _12 | _14;
  ptTcd_18(D)->reg_CITER.reg_ELINKNO = _15;

  <bb 5> [local count: 1073741824]:
  return;

}



;; Function HwAccDmaCh_GetParamDummyFunction (HwAccDmaCh_GetParamDummyFunction, funcdef_no=67, decl_uid=6722, cgraph_uid=68, symbol_order=70)

HwAccDmaCh_GetParamDummyFunction (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, uint32 * const retValue)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}



;; Function HwAccDmaCh_CmdSetHwRequest (HwAccDmaCh_CmdSetHwRequest, funcdef_no=75, decl_uid=6734, cgraph_uid=76, symbol_order=78)

HwAccDmaCh_CmdSetHwRequest (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh)
{
  uint32 reg;
  struct Dma_Ip_Hwv3ChTcdRegType * _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_3(D) == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_5(D)][LocHwCh_6(D)];
  # DEBUG D#21 => &_1->tChReg
  # DEBUG ptCh => D#21
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_CmdSetRequest
  # DEBUG BEGIN_STMT
  reg_7 = MEM[(struct Dma_Ip_ChRegType *)_1].reg_CH_CSR;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  reg_8 = reg_7 | 1;
  # DEBUG reg => reg_8
  # DEBUG BEGIN_STMT
  MEM[(struct Dma_Ip_ChRegType *)_1].reg_CH_CSR = reg_8;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptCh => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_CmdClearHwRequest (HwAccDmaCh_CmdClearHwRequest, funcdef_no=76, decl_uid=6738, cgraph_uid=77, symbol_order=79)

HwAccDmaCh_CmdClearHwRequest (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh)
{
  uint32 reg;
  struct Dma_Ip_Hwv3ChTcdRegType * _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_3(D) == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_5(D)][LocHwCh_6(D)];
  # DEBUG D#22 => &_1->tChReg
  # DEBUG ptCh => D#22
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_CmdClearRequest
  # DEBUG BEGIN_STMT
  reg_7 = MEM[(struct Dma_Ip_ChRegType *)_1].reg_CH_CSR;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  reg_8 = reg_7 & 4294967294;
  # DEBUG reg => reg_8
  # DEBUG BEGIN_STMT
  MEM[(struct Dma_Ip_ChRegType *)_1].reg_CH_CSR = reg_8;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptCh => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_CmdSetSwRequest (HwAccDmaCh_CmdSetSwRequest, funcdef_no=77, decl_uid=6742, cgraph_uid=78, symbol_order=80)

HwAccDmaCh_CmdSetSwRequest (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh)
{
  uint16 reg;
  struct Dma_Ip_Hwv3ChTcdRegType * _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_3(D) == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_5(D)][LocHwCh_6(D)];
  # DEBUG D#23 => &_1->tTcdReg
  # DEBUG ptTcd => D#23
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_CmdSwReqStart
  # DEBUG BEGIN_STMT
  reg_7 = MEM[(struct Dma_Ip_TcdRegType *)_1 + 32B].reg_CSR;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  reg_8 = reg_7 | 1;
  # DEBUG reg => reg_8
  # DEBUG BEGIN_STMT
  MEM[(struct Dma_Ip_TcdRegType *)_1 + 32B].reg_CSR = reg_8;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_CmdClearDone (HwAccDmaCh_CmdClearDone, funcdef_no=78, decl_uid=6746, cgraph_uid=79, symbol_order=81)

HwAccDmaCh_CmdClearDone (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh)
{
  uint32 reg;
  struct Dma_Ip_Hwv3ChTcdRegType * _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_3(D) == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_5(D)][LocHwCh_6(D)];
  # DEBUG D#24 => &_1->tChReg
  # DEBUG ptCh => D#24
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_CmdClearDone
  # DEBUG BEGIN_STMT
  reg_7 = MEM[(struct Dma_Ip_ChRegType *)_1].reg_CH_CSR;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  reg_8 = reg_7 | 1073741824;
  # DEBUG reg => reg_8
  # DEBUG BEGIN_STMT
  MEM[(struct Dma_Ip_ChRegType *)_1].reg_CH_CSR = reg_8;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptCh => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_CmdClearError (HwAccDmaCh_CmdClearError, funcdef_no=79, decl_uid=6750, cgraph_uid=80, symbol_order=82)

HwAccDmaCh_CmdClearError (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh)
{
  uint32 reg;
  struct Dma_Ip_Hwv3ChTcdRegType * _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_3(D) == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_5(D)][LocHwCh_6(D)];
  # DEBUG D#25 => &_1->tChReg
  # DEBUG ptCh => D#25
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_CmdClearError
  # DEBUG BEGIN_STMT
  reg_7 = MEM[(struct Dma_Ip_ChRegType *)_1].reg_CH_ES;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  reg_8 = reg_7 | 2147483648;
  # DEBUG reg => reg_8
  # DEBUG BEGIN_STMT
  MEM[(struct Dma_Ip_ChRegType *)_1].reg_CH_ES = reg_8;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptCh => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_SetControl_EnMasterIdReplication (HwAccDmaCh_SetControl_EnMasterIdReplication, funcdef_no=83, decl_uid=6755, cgraph_uid=84, symbol_order=86)


Symbols to be put in SSA form
{ D.7704 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)


Merging blocks 3 and 6
Removing basic block 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetControl_EnMasterIdReplication (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, const uint32 LocValue)
{
  uint32 reg;
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_ChRegType * _2;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_6(D)][LocHwCh_7(D)];
  _2 = &_1->tChReg;
  # DEBUG ptCh => _2
  # DEBUG Value => LocValue_8(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetControl_EnMasterIdReplication
  # DEBUG BEGIN_STMT
  reg_10 = _2->reg_CH_SBR;
  # DEBUG reg => reg_10
  # DEBUG BEGIN_STMT
  _11 = reg_10 & 4294901759;
  _12 = LocValue_8(D) << 16;
  _13 = _12 & 65536;
  _14 = _11 | _13;
  _2->reg_CH_SBR = _14;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptCh => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_SetControl_EnBufferedWrites (HwAccDmaCh_SetControl_EnBufferedWrites, funcdef_no=84, decl_uid=6760, cgraph_uid=85, symbol_order=87)


Symbols to be put in SSA form
{ D.7705 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)


Merging blocks 3 and 6
Removing basic block 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetControl_EnBufferedWrites (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, const uint32 LocValue)
{
  uint32 reg;
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_ChRegType * _2;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_6(D)][LocHwCh_7(D)];
  _2 = &_1->tChReg;
  # DEBUG ptCh => _2
  # DEBUG Value => LocValue_8(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetControl_EnBufferedWrites
  # DEBUG BEGIN_STMT
  reg_10 = _2->reg_CH_CSR;
  # DEBUG reg => reg_10
  # DEBUG BEGIN_STMT
  _11 = reg_10 & 4294967287;
  _12 = LocValue_8(D) << 3;
  _13 = _12 & 8;
  _14 = _11 | _13;
  _2->reg_CH_CSR = _14;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptCh => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_SetRequest_EnRequest (HwAccDmaCh_SetRequest_EnRequest, funcdef_no=88, decl_uid=6780, cgraph_uid=89, symbol_order=91)


Symbols to be put in SSA form
{ D.7709 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)


Merging blocks 3 and 6
Removing basic block 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetRequest_EnRequest (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, const uint32 LocValue)
{
  uint32 reg;
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_ChRegType * _2;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_6(D)][LocHwCh_7(D)];
  _2 = &_1->tChReg;
  # DEBUG ptCh => _2
  # DEBUG Value => LocValue_8(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetRequest_EnHwRequest
  # DEBUG BEGIN_STMT
  reg_10 = _2->reg_CH_CSR;
  # DEBUG reg => reg_10
  # DEBUG BEGIN_STMT
  _11 = reg_10 & 4294967294;
  _12 = LocValue_8(D) & 1;
  _13 = _11 | _12;
  _2->reg_CH_CSR = _13;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptCh => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_SetInterrupt_EnError (HwAccDmaCh_SetInterrupt_EnError, funcdef_no=89, decl_uid=6785, cgraph_uid=90, symbol_order=92)


Symbols to be put in SSA form
{ D.7710 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)


Merging blocks 3 and 6
Removing basic block 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetInterrupt_EnError (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, const uint32 LocValue)
{
  uint32 reg;
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_ChRegType * _2;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_6(D)][LocHwCh_7(D)];
  _2 = &_1->tChReg;
  # DEBUG ptCh => _2
  # DEBUG Value => LocValue_8(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetInterrupt_EnError
  # DEBUG BEGIN_STMT
  reg_10 = _2->reg_CH_CSR;
  # DEBUG reg => reg_10
  # DEBUG BEGIN_STMT
  _11 = reg_10 & 4294967291;
  _12 = LocValue_8(D) << 2;
  _13 = _12 & 4;
  _14 = _11 | _13;
  _2->reg_CH_CSR = _14;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptCh => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_SetPriority_Group (HwAccDmaCh_SetPriority_Group, funcdef_no=90, decl_uid=6790, cgraph_uid=91, symbol_order=93)


Symbols to be put in SSA form
{ D.7711 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)


Merging blocks 3 and 6
Removing basic block 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetPriority_Group (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, const uint32 LocValue)
{
  uint32 reg;
  volatile uint32 * _1;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_3(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
<L0>:
  # DEBUG BEGIN_STMT
  _1 = &MEM[(struct Dma_Ip_Hwv3InstRegType *)1075888128B].reg_CH_GRPRI[LocHwCh_5(D)];
  # DEBUG pGrpri => _1
  # DEBUG Value => LocValue_6(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetPriority_Group
  # DEBUG BEGIN_STMT
  reg_8 ={v} *_1;
  # DEBUG reg => reg_8
  # DEBUG BEGIN_STMT
  _9 = reg_8 & 4294967264;
  _10 = LocValue_6(D) & 31;
  _11 = _9 | _10;
  *_1 ={v} _11;

  <bb 4> [local count: 1073741824]:
  # DEBUG pGrpri => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_SetPriority_Level (HwAccDmaCh_SetPriority_Level, funcdef_no=91, decl_uid=6795, cgraph_uid=92, symbol_order=94)


Symbols to be put in SSA form
{ D.7712 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)


Merging blocks 3 and 6
Removing basic block 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetPriority_Level (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, const uint32 LocValue)
{
  uint32 reg;
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_ChRegType * _2;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_6(D)][LocHwCh_7(D)];
  _2 = &_1->tChReg;
  # DEBUG ptCh => _2
  # DEBUG Value => LocValue_8(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetPriority_Level
  # DEBUG BEGIN_STMT
  reg_10 = _2->reg_CH_PRI;
  # DEBUG reg => reg_10
  # DEBUG BEGIN_STMT
  _11 = reg_10 & 4294967288;
  _12 = LocValue_8(D) & 7;
  _13 = _11 | _12;
  _2->reg_CH_PRI = _13;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptCh => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_SetPriority_EnPreemption (HwAccDmaCh_SetPriority_EnPreemption, funcdef_no=92, decl_uid=6800, cgraph_uid=93, symbol_order=95)


Symbols to be put in SSA form
{ D.7713 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)


Merging blocks 3 and 6
Removing basic block 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetPriority_EnPreemption (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, const uint32 LocValue)
{
  uint32 reg;
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_ChRegType * _2;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_6(D)][LocHwCh_7(D)];
  _2 = &_1->tChReg;
  # DEBUG ptCh => _2
  # DEBUG Value => LocValue_8(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetPriority_EnPreemption
  # DEBUG BEGIN_STMT
  reg_10 = _2->reg_CH_PRI;
  # DEBUG reg => reg_10
  # DEBUG BEGIN_STMT
  _11 = reg_10 & 2147483647;
  _12 = LocValue_8(D) << 31;
  _13 = _11 | _12;
  _2->reg_CH_PRI = _13;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptCh => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_SetPriority_DisPreempt (HwAccDmaCh_SetPriority_DisPreempt, funcdef_no=93, decl_uid=6805, cgraph_uid=94, symbol_order=96)


Symbols to be put in SSA form
{ D.7714 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)


Merging blocks 3 and 6
Removing basic block 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetPriority_DisPreempt (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, const uint32 LocValue)
{
  uint32 reg;
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_ChRegType * _2;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_6(D)][LocHwCh_7(D)];
  _2 = &_1->tChReg;
  # DEBUG ptCh => _2
  # DEBUG Value => LocValue_8(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetPriority_DisPreempt
  # DEBUG BEGIN_STMT
  reg_10 = _2->reg_CH_PRI;
  # DEBUG reg => reg_10
  # DEBUG BEGIN_STMT
  _11 = reg_10 & 3221225471;
  _12 = LocValue_8(D) << 30;
  _13 = _12 & 1073741824;
  _14 = _11 | _13;
  _2->reg_CH_PRI = _14;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptCh => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_SetSource_Address (HwAccDmaCh_SetSource_Address, funcdef_no=95, decl_uid=6809, cgraph_uid=96, symbol_order=98)

HwAccDmaCh_SetSource_Address (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_4(D)
  # DEBUG Value => LocValue_5(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetSource_Address
  # DEBUG BEGIN_STMT
  # DEBUG D#1 => pxLocTcd_4(D)->reg_SADDR
  # DEBUG reg => D#1
  # DEBUG BEGIN_STMT
  pxLocTcd_4(D)->reg_SADDR = LocValue_5(D);

  <bb 4> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  return;

}



;; Function HwAccDmaCh_SetSource_SignedOffset (HwAccDmaCh_SetSource_SignedOffset, funcdef_no=96, decl_uid=6813, cgraph_uid=97, symbol_order=99)

HwAccDmaCh_SetSource_SignedOffset (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  short unsigned int _6;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_4(D)
  # DEBUG Value => LocValue_5(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetSource_SignedOffset
  # DEBUG BEGIN_STMT
  # DEBUG D#2 => pxLocTcd_4(D)->reg_SOFF
  # DEBUG reg => (uint32) D#2
  # DEBUG BEGIN_STMT
  _6 = (short unsigned int) LocValue_5(D);
  pxLocTcd_4(D)->reg_SOFF = _6;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  return;

}



;; Function HwAccDmaCh_SetSource_LastAddrAdj (HwAccDmaCh_SetSource_LastAddrAdj, funcdef_no=97, decl_uid=6817, cgraph_uid=98, symbol_order=100)

HwAccDmaCh_SetSource_LastAddrAdj (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  uint16 reg;
  short unsigned int _7;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_4(D)
  # DEBUG Value => 0
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetAuxiliary_EnDestinationStoreAddress
  # DEBUG BEGIN_STMT
  reg_6 = pxLocTcd_4(D)->reg_CSR;
  # DEBUG reg => reg_6
  # DEBUG BEGIN_STMT
  _7 = reg_6 & 65407;
  pxLocTcd_4(D)->reg_CSR = _7;
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_4(D)
  # DEBUG Value => LocValue_5(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetSource_SignedLastAddrAdj
  # DEBUG BEGIN_STMT
  # DEBUG D#3 => pxLocTcd_4(D)->reg_SLAST_SDA
  # DEBUG reg => D#3
  # DEBUG BEGIN_STMT
  pxLocTcd_4(D)->reg_SLAST_SDA = LocValue_5(D);

  <bb 4> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  return;

}



;; Function HwAccDmaCh_SetSource_TransferSize (HwAccDmaCh_SetSource_TransferSize, funcdef_no=98, decl_uid=6821, cgraph_uid=99, symbol_order=101)


Symbols to be put in SSA form
{ D.7718 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)


Removing basic block 3
Removing basic block 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetSource_TransferSize (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  short unsigned int _7;
  short unsigned int _8;
  short unsigned int _9;
  short unsigned int _10;
  short unsigned int _11;
  short unsigned int _12;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_4(D)
  # DEBUG Value => LocValue_5(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetSource_TransferSize
  # DEBUG BEGIN_STMT
  _7 = pxLocTcd_4(D)->reg_ATTR;
  # DEBUG reg => (uint32) _7
  # DEBUG BEGIN_STMT
  _8 = _7 & 63743;
  _9 = (short unsigned int) LocValue_5(D);
  _10 = _9 << 8;
  _11 = _10 & 1792;
  _12 = _8 | _11;
  pxLocTcd_4(D)->reg_ATTR = _12;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  return;

}



;; Function HwAccDmaCh_SetSource_Modulo (HwAccDmaCh_SetSource_Modulo, funcdef_no=99, decl_uid=6825, cgraph_uid=100, symbol_order=102)


Symbols to be put in SSA form
{ D.7719 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)


Removing basic block 3
Removing basic block 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetSource_Modulo (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  short unsigned int _7;
  short unsigned int _8;
  short unsigned int _9;
  short unsigned int _10;
  short unsigned int _11;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_4(D)
  # DEBUG Value => LocValue_5(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetSource_Modulo
  # DEBUG BEGIN_STMT
  _7 = pxLocTcd_4(D)->reg_ATTR;
  # DEBUG reg => (uint32) _7
  # DEBUG BEGIN_STMT
  _8 = _7 & 2047;
  _9 = (short unsigned int) LocValue_5(D);
  _10 = _9 << 11;
  _11 = _8 | _10;
  pxLocTcd_4(D)->reg_ATTR = _11;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  return;

}



;; Function HwAccDmaCh_SetDestination_Address (HwAccDmaCh_SetDestination_Address, funcdef_no=100, decl_uid=6829, cgraph_uid=101, symbol_order=103)

HwAccDmaCh_SetDestination_Address (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_4(D)
  # DEBUG Value => LocValue_5(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetDestination_Address
  # DEBUG BEGIN_STMT
  # DEBUG D#4 => pxLocTcd_4(D)->reg_DADDR
  # DEBUG reg => D#4
  # DEBUG BEGIN_STMT
  pxLocTcd_4(D)->reg_DADDR = LocValue_5(D);

  <bb 4> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  return;

}



;; Function HwAccDmaCh_SetDestination_SignedOffset (HwAccDmaCh_SetDestination_SignedOffset, funcdef_no=101, decl_uid=6833, cgraph_uid=102, symbol_order=104)

HwAccDmaCh_SetDestination_SignedOffset (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  short unsigned int _6;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_4(D)
  # DEBUG Value => LocValue_5(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetDestination_SignedOffset
  # DEBUG BEGIN_STMT
  # DEBUG D#5 => pxLocTcd_4(D)->reg_DOFF
  # DEBUG reg => D#5
  # DEBUG BEGIN_STMT
  _6 = (short unsigned int) LocValue_5(D);
  pxLocTcd_4(D)->reg_DOFF = _6;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  return;

}



;; Function HwAccDmaCh_SetDestination_TransferSize (HwAccDmaCh_SetDestination_TransferSize, funcdef_no=103, decl_uid=6841, cgraph_uid=104, symbol_order=106)


Symbols to be put in SSA form
{ D.7723 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)


Removing basic block 3
Removing basic block 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetDestination_TransferSize (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  uint16 reg;
  short unsigned int _8;
  short unsigned int _9;
  short unsigned int _10;
  short unsigned int _11;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_4(D)
  # DEBUG Value => LocValue_5(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetDestination_TransferSize
  # DEBUG BEGIN_STMT
  reg_7 = pxLocTcd_4(D)->reg_ATTR;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  _8 = reg_7 & 65528;
  _9 = (short unsigned int) LocValue_5(D);
  _10 = _9 & 7;
  _11 = _8 | _10;
  pxLocTcd_4(D)->reg_ATTR = _11;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_SetDestination_Modulo (HwAccDmaCh_SetDestination_Modulo, funcdef_no=104, decl_uid=6845, cgraph_uid=105, symbol_order=107)


Symbols to be put in SSA form
{ D.7724 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)


Removing basic block 3
Removing basic block 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetDestination_Modulo (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  uint16 reg;
  short unsigned int _8;
  short unsigned int _9;
  short unsigned int _10;
  short unsigned int _11;
  short unsigned int _12;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_4(D)
  # DEBUG Value => LocValue_5(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetDestination_Modulo
  # DEBUG BEGIN_STMT
  reg_7 = pxLocTcd_4(D)->reg_ATTR;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  _8 = reg_7 & 65287;
  _9 = (short unsigned int) LocValue_5(D);
  _10 = _9 << 3;
  _11 = _10 & 255;
  _12 = _8 | _11;
  pxLocTcd_4(D)->reg_ATTR = _12;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_SetMinorLoop_enSrcOffset (HwAccDmaCh_SetMinorLoop_enSrcOffset, funcdef_no=105, decl_uid=6849, cgraph_uid=106, symbol_order=108)


Symbols to be put in SSA form
{ D.7725 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)


Removing basic block 3
Removing basic block 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetMinorLoop_enSrcOffset (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  uint32 reg;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_4(D)
  # DEBUG Value => LocValue_5(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetMinorLoop_enSrcOffset
  # DEBUG BEGIN_STMT
  reg_7 = pxLocTcd_4(D)->reg_NBYTES.reg_MLOFFYES;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  _8 = reg_7 & 2147483647;
  _9 = LocValue_5(D) << 31;
  _10 = _8 | _9;
  pxLocTcd_4(D)->reg_NBYTES.reg_MLOFFYES = _10;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_SetMinorLoop_enDstOffset (HwAccDmaCh_SetMinorLoop_enDstOffset, funcdef_no=106, decl_uid=6853, cgraph_uid=107, symbol_order=109)


Symbols to be put in SSA form
{ D.7726 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)


Removing basic block 3
Removing basic block 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetMinorLoop_enDstOffset (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  uint32 reg;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_4(D)
  # DEBUG Value => LocValue_5(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetMinorLoop_enDstOffset
  # DEBUG BEGIN_STMT
  reg_7 = pxLocTcd_4(D)->reg_NBYTES.reg_MLOFFYES;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  _8 = reg_7 & 3221225471;
  _9 = LocValue_5(D) << 30;
  _10 = _9 & 1073741824;
  _11 = _8 | _10;
  pxLocTcd_4(D)->reg_NBYTES.reg_MLOFFYES = _11;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_SetMinorLoop_Offset (HwAccDmaCh_SetMinorLoop_Offset, funcdef_no=107, decl_uid=6857, cgraph_uid=108, symbol_order=110)


Symbols to be put in SSA form
{ D.7727 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)


Removing basic block 3
Removing basic block 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetMinorLoop_Offset (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  uint32 reg;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_4(D)
  # DEBUG Value => LocValue_5(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetMinorLoop_SignedOffset
  # DEBUG BEGIN_STMT
  reg_7 = pxLocTcd_4(D)->reg_NBYTES.reg_MLOFFYES;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  _8 = reg_7 & 3221226495;
  _9 = LocValue_5(D) << 10;
  _10 = _9 & 1073740800;
  _11 = _8 | _10;
  pxLocTcd_4(D)->reg_NBYTES.reg_MLOFFYES = _11;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_SetMinorLoop_Size (HwAccDmaCh_SetMinorLoop_Size, funcdef_no=110, decl_uid=6869, cgraph_uid=111, symbol_order=113)


Symbols to be put in SSA form
{ D.7729 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 10
Number of blocks to update: 9 ( 90%)


Removing basic block 3
Removing basic block 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;; 2 succs { 7 3 }
;; 3 succs { 4 5 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 7 }
;; 7 succs { 1 }
HwAccDmaCh_SetMinorLoop_Size (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  uint32 reg;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 7>; [79.76%]

  <bb 3> [local count: 217325344]:
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_4(D)
  # DEBUG Value => LocValue_5(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetMinorLoop_Size
  # DEBUG BEGIN_STMT
  reg_7 = pxLocTcd_4(D)->reg_NBYTES.reg_MLOFFNO;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  _8 = reg_7 & 3221225472;
  if (_8 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 4> [local count: 108662672]:
  # DEBUG BEGIN_STMT
  _9 = reg_7 & 4294966272;
  _10 = LocValue_5(D) & 1023;
  _11 = _9 | _10;
  pxLocTcd_4(D)->reg_NBYTES.reg_MLOFFNO = _11;
  goto <bb 6>; [100.00%]

  <bb 5> [local count: 108662672]:
  # DEBUG BEGIN_STMT
  _12 = LocValue_5(D) & 1073741823;
  _13 = _12;
  pxLocTcd_4(D)->reg_NBYTES.reg_MLOFFNO = _13;

  <bb 6> [local count: 217325344]:

  <bb 7> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_SetMajorLoop_Count (HwAccDmaCh_SetMajorLoop_Count, funcdef_no=113, decl_uid=6881, cgraph_uid=114, symbol_order=116)

HwAccDmaCh_SetMajorLoop_Count (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
<L0>:
  # DEBUG BEGIN_STMT
  hwv3AccInlineDmaCh_SetMajorLoop_Count (pxLocTcd_4(D), LocValue_5(D));
  # DEBUG BEGIN_STMT

  <bb 4> [local count: 1073741824]:
  return;

}



;; Function HwAccDmaCh_SetControl_EnMajor (HwAccDmaCh_SetControl_EnMajor, funcdef_no=116, decl_uid=6893, cgraph_uid=117, symbol_order=119)


Symbols to be put in SSA form
{ D.7734 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)


Removing basic block 3
Removing basic block 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetControl_EnMajor (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  uint16 reg;
  short unsigned int _8;
  short unsigned int _9;
  short unsigned int _10;
  short unsigned int _11;
  short unsigned int _12;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_4(D)
  # DEBUG Value => LocValue_5(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetControl_EnMajor
  # DEBUG BEGIN_STMT
  reg_7 = pxLocTcd_4(D)->reg_CSR;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  _8 = reg_7 & 65533;
  _9 = (short unsigned int) LocValue_5(D);
  _10 = _9 << 1;
  _11 = _10 & 2;
  _12 = _8 | _11;
  pxLocTcd_4(D)->reg_CSR = _12;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_SetControl_EnHalfMajor (HwAccDmaCh_SetControl_EnHalfMajor, funcdef_no=117, decl_uid=6897, cgraph_uid=118, symbol_order=120)


Symbols to be put in SSA form
{ D.7735 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)


Removing basic block 3
Removing basic block 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetControl_EnHalfMajor (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  uint16 reg;
  short unsigned int _8;
  short unsigned int _9;
  short unsigned int _10;
  short unsigned int _11;
  short unsigned int _12;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_4(D)
  # DEBUG Value => LocValue_5(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetControl_EnHalfMajor
  # DEBUG BEGIN_STMT
  reg_7 = pxLocTcd_4(D)->reg_CSR;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  _8 = reg_7 & 65531;
  _9 = (short unsigned int) LocValue_5(D);
  _10 = _9 << 2;
  _11 = _10 & 4;
  _12 = _8 | _11;
  pxLocTcd_4(D)->reg_CSR = _12;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_SetControl_DisAutoHwRequest (HwAccDmaCh_SetControl_DisAutoHwRequest, funcdef_no=118, decl_uid=6901, cgraph_uid=119, symbol_order=121)


Symbols to be put in SSA form
{ D.7736 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)


Removing basic block 3
Removing basic block 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetControl_DisAutoHwRequest (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  uint16 reg;
  short unsigned int _8;
  short unsigned int _9;
  short unsigned int _10;
  short unsigned int _11;
  short unsigned int _12;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_4(D)
  # DEBUG Value => LocValue_5(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetControl_DisAutoHwRequest
  # DEBUG BEGIN_STMT
  reg_7 = pxLocTcd_4(D)->reg_CSR;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  _8 = reg_7 & 65527;
  _9 = (short unsigned int) LocValue_5(D);
  _10 = _9 << 3;
  _11 = _10 & 8;
  _12 = _8 | _11;
  pxLocTcd_4(D)->reg_CSR = _12;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_SetControl_EnEndOfPacketSignal (HwAccDmaCh_SetControl_EnEndOfPacketSignal, funcdef_no=119, decl_uid=6905, cgraph_uid=120, symbol_order=122)


Symbols to be put in SSA form
{ D.7737 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)


Removing basic block 3
Removing basic block 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetControl_EnEndOfPacketSignal (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  uint16 reg;
  short unsigned int _8;
  short unsigned int _9;
  short unsigned int _10;
  short unsigned int _11;
  short unsigned int _12;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_4(D)
  # DEBUG Value => LocValue_5(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetControl_EnEndOfPacketSignal
  # DEBUG BEGIN_STMT
  reg_7 = pxLocTcd_4(D)->reg_CSR;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  _8 = reg_7 & 65471;
  _9 = (short unsigned int) LocValue_5(D);
  _10 = _9 << 6;
  _11 = _10 & 64;
  _12 = _8 | _11;
  pxLocTcd_4(D)->reg_CSR = _12;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_SetControl_BandwidthControl (HwAccDmaCh_SetControl_BandwidthControl, funcdef_no=120, decl_uid=6909, cgraph_uid=121, symbol_order=123)


Symbols to be put in SSA form
{ D.7738 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)


Removing basic block 3
Removing basic block 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetControl_BandwidthControl (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  uint16 reg;
  short unsigned int _8;
  short unsigned int _9;
  short unsigned int _10;
  short unsigned int _11;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_4(D)
  # DEBUG Value => LocValue_5(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetControl_BandwidthControl
  # DEBUG BEGIN_STMT
  reg_7 = pxLocTcd_4(D)->reg_CSR;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  _8 = reg_7 & 16383;
  _9 = (short unsigned int) LocValue_5(D);
  _10 = _9 << 14;
  _11 = _8 | _10;
  pxLocTcd_4(D)->reg_CSR = _11;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_GetSourceAddress (HwAccDmaCh_GetSourceAddress, funcdef_no=122, decl_uid=6914, cgraph_uid=123, symbol_order=125)

HwAccDmaCh_GetSourceAddress (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, uint32 * const retValue)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  long unsigned int _9;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (LocHwVers_3(D) == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_5(D)][LocHwCh_6(D)];
  # DEBUG D#36 => &_1->tTcdReg
  # DEBUG ptTcd => D#36
  # DEBUG retValue => &LocPhysicalAddress
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_GetSourceAddress
  # DEBUG BEGIN_STMT
  _9 = MEM[(const struct Dma_Ip_TcdRegType *)_1 + 32B].reg_SADDR;
  # DEBUG LocPhysicalAddress => _9
  # DEBUG ptTcd => NULL
  # DEBUG retValue => NULL
  # DEBUG BEGIN_STMT
  *retValue_7(D) = _9;
  # DEBUG BEGIN_STMT

  <bb 4> [local count: 1073741824]:
  # DEBUG LocPhysicalAddress => NULL
  return;

}



;; Function HwAccDmaCh_GetDestinationAddress (HwAccDmaCh_GetDestinationAddress, funcdef_no=123, decl_uid=6919, cgraph_uid=124, symbol_order=126)

HwAccDmaCh_GetDestinationAddress (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, uint32 * const retValue)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  long unsigned int _9;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (LocHwVers_3(D) == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_5(D)][LocHwCh_6(D)];
  # DEBUG D#37 => &_1->tTcdReg
  # DEBUG ptTcd => D#37
  # DEBUG retValue => &LocPhysicalAddress
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_GetDestinationAddress
  # DEBUG BEGIN_STMT
  _9 = MEM[(const struct Dma_Ip_TcdRegType *)_1 + 32B].reg_DADDR;
  # DEBUG LocPhysicalAddress => _9
  # DEBUG ptTcd => NULL
  # DEBUG retValue => NULL
  # DEBUG BEGIN_STMT
  *retValue_7(D) = _9;
  # DEBUG BEGIN_STMT

  <bb 4> [local count: 1073741824]:
  # DEBUG LocPhysicalAddress => NULL
  return;

}



;; Function HwAccDmaCh_GetStoreDstAddress (HwAccDmaCh_GetStoreDstAddress, funcdef_no=126, decl_uid=6934, cgraph_uid=127, symbol_order=129)

HwAccDmaCh_GetStoreDstAddress (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, uint32 * const retValue)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  uint32 * LocPhysicalAddress.9_2;
  long unsigned int _3;
  long unsigned int _11;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (LocHwVers_5(D) == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_7(D)][LocHwCh_8(D)];
  # DEBUG D#38 => &_1->tTcdReg
  # DEBUG ptTcd => D#38
  # DEBUG retValue => &LocPhysicalAddress
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_GetStoreDstAddress
  # DEBUG BEGIN_STMT
  _11 = MEM[(const struct Dma_Ip_TcdRegType *)_1 + 32B].reg_SLAST_SDA;
  # DEBUG LocPhysicalAddress => _11
  # DEBUG ptTcd => NULL
  # DEBUG retValue => NULL
  # DEBUG BEGIN_STMT
  LocPhysicalAddress.9_2 = (uint32 *) _11;
  _3 = *LocPhysicalAddress.9_2;
  *retValue_9(D) = _3;
  # DEBUG BEGIN_STMT

  <bb 4> [local count: 1073741824]:
  # DEBUG LocPhysicalAddress => NULL
  return;

}



;; Function HwAccDmaCh_GetMasterId (HwAccDmaCh_GetMasterId, funcdef_no=127, decl_uid=6939, cgraph_uid=128, symbol_order=130)

HwAccDmaCh_GetMasterId (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, uint32 * const retValue)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  long unsigned int _8;
  long unsigned int _9;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_3(D) == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_5(D)][LocHwCh_6(D)];
  # DEBUG D#39 => &_1->tChReg
  # DEBUG ptCh => D#39
  # DEBUG retValue => retValue_7(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_GetMasterId
  # DEBUG BEGIN_STMT
  _8 = MEM[(const struct Dma_Ip_ChRegType *)_1].reg_CH_SBR;
  _9 = _8 & 63;
  *retValue_7(D) = _9;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptCh => NULL
  # DEBUG retValue => NULL
  return;

}



;; Function HwAccDmaCh_GetIntMajor (HwAccDmaCh_GetIntMajor, funcdef_no=128, decl_uid=6944, cgraph_uid=129, symbol_order=131)

HwAccDmaCh_GetIntMajor (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, uint32 * const retValue)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  short unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_3(D) == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_5(D)][LocHwCh_6(D)];
  # DEBUG D#40 => &_1->tTcdReg
  # DEBUG ptTcd => D#40
  # DEBUG retValue => retValue_7(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_GetIntMajor
  # DEBUG BEGIN_STMT
  _8 = MEM[(const struct Dma_Ip_TcdRegType *)_1 + 32B].reg_CSR;
  _9 = (long unsigned int) _8;
  _10 = _9 >> 1;
  _11 = _10 & 1;
  *retValue_7(D) = _11;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG retValue => NULL
  return;

}



;; Function HwAccDmaCh_GetIntHalfMajor (HwAccDmaCh_GetIntHalfMajor, funcdef_no=129, decl_uid=6949, cgraph_uid=130, symbol_order=132)

HwAccDmaCh_GetIntHalfMajor (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, uint32 * const retValue)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  short unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_3(D) == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_5(D)][LocHwCh_6(D)];
  # DEBUG D#41 => &_1->tTcdReg
  # DEBUG ptTcd => D#41
  # DEBUG retValue => retValue_7(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_GetIntHalfMajor
  # DEBUG BEGIN_STMT
  _8 = MEM[(const struct Dma_Ip_TcdRegType *)_1 + 32B].reg_CSR;
  _9 = (long unsigned int) _8;
  _10 = _9 >> 2;
  _11 = _10 & 1;
  *retValue_7(D) = _11;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG retValue => NULL
  return;

}



;; Function HwAccDmaCh_SetMajorLoop_LogicLinkCh (HwAccDmaCh_SetMajorLoop_LogicLinkCh, funcdef_no=112, decl_uid=6877, cgraph_uid=113, symbol_order=115)


Symbols to be put in SSA form
{ D.7748 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)


Removing basic block 3
Removing basic block 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetMajorLoop_LogicLinkCh (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  uint16 reg;
  uint32 hwLinkCh;
  short unsigned int _10;
  short unsigned int _11;
  short unsigned int _12;
  short unsigned int _13;
  short unsigned int _14;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  hwLinkCh_5 = Dma_Ip_ConvertLogicChToHwCh (LocValue_3(D));
  # DEBUG hwLinkCh => hwLinkCh_5
  # DEBUG BEGIN_STMT
  if (LocHwVers_6(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_7(D)
  # DEBUG Value => hwLinkCh_5
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetMajorLoop_LinkCh
  # DEBUG BEGIN_STMT
  reg_9 = pxLocTcd_7(D)->reg_CSR;
  # DEBUG reg => reg_9
  # DEBUG BEGIN_STMT
  _10 = reg_9 & 57599;
  _11 = (short unsigned int) hwLinkCh_5;
  _12 = _11 << 8;
  _13 = _12 & 7936;
  _14 = _10 | _13;
  pxLocTcd_7(D)->reg_CSR = _14;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  return;

}



;; Function hwAccDmaInst_CmdCancelTransfer (hwAccDmaInst_CmdCancelTransfer, funcdef_no=69, decl_uid=6724, cgraph_uid=70, symbol_order=72)


Symbols to be put in SSA form
{ D.7695 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 9
Number of blocks to update: 8 ( 89%)


Removing basic block 3
Removing basic block 5
Removing basic block 6
Merging blocks 7 and 8
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
hwAccDmaInst_CmdCancelTransfer (const struct Dma_Ip_LogicInstanceIdType * const pxLocLogicInst)
{
  uint32 reg;
  unsigned char _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = pxLocLogicInst_4(D)->HwVersId;
  # DEBUG LocHwVers => (uint32) _1
  # DEBUG BEGIN_STMT
  # DEBUG D#9 => pxLocLogicInst_4(D)->HwInstId
  # DEBUG LocHwInst => (uint32) D#9
  # DEBUG BEGIN_STMT
  if (_1 == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
<L3>:
  # DEBUG D#10 => pxLocLogicInst_4(D)
  # DEBUG INLINE_ENTRY hwAccDmaInst_CmdCancelTransfer
  # DEBUG D#11 => D#10
  # DEBUG pxLocLogicInst => D#11
  # DEBUG BEGIN_STMT
  # DEBUG ptInst => 1075888128B
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaInst_CmdCancelTransfer
  # DEBUG BEGIN_STMT
  reg_6 ={v} MEM[(struct Dma_Ip_Hwv3InstRegType *)1075888128B].reg_CSR;
  # DEBUG reg => reg_6
  # DEBUG BEGIN_STMT
  reg_7 = reg_6 | 512;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  MEM[(struct Dma_Ip_Hwv3InstRegType *)1075888128B].reg_CSR ={v} reg_7;
  # DEBUG ptInst => NULL
  # DEBUG reg => NULL

  <bb 4> [local count: 1073741824]:
  # DEBUG LocHwVers => NULL
  # DEBUG LocHwInst => NULL
  # DEBUG reg => NULL
  # DEBUG pxLocLogicInst => NULL
  # DEBUG ptInst => NULL
  # DEBUG reg => NULL
  return;

}



;; Function hwAccDmaInst_CmdCancelTransferWithError (hwAccDmaInst_CmdCancelTransferWithError, funcdef_no=70, decl_uid=6726, cgraph_uid=71, symbol_order=73)


Symbols to be put in SSA form
{ D.7696 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 9
Number of blocks to update: 8 ( 89%)


Removing basic block 3
Removing basic block 5
Removing basic block 6
Merging blocks 7 and 8
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
hwAccDmaInst_CmdCancelTransferWithError (const struct Dma_Ip_LogicInstanceIdType * const pxLocLogicInst)
{
  uint32 reg;
  unsigned char _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = pxLocLogicInst_4(D)->HwVersId;
  # DEBUG LocHwVers => (uint32) _1
  # DEBUG BEGIN_STMT
  # DEBUG D#12 => pxLocLogicInst_4(D)->HwInstId
  # DEBUG LocHwInst => (uint32) D#12
  # DEBUG BEGIN_STMT
  if (_1 == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
<L3>:
  # DEBUG D#13 => pxLocLogicInst_4(D)
  # DEBUG INLINE_ENTRY hwAccDmaInst_CmdCancelTransferWithError
  # DEBUG D#14 => D#13
  # DEBUG pxLocLogicInst => D#14
  # DEBUG BEGIN_STMT
  # DEBUG ptInst => 1075888128B
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaInst_CmdCancelTransferWithError
  # DEBUG BEGIN_STMT
  reg_6 ={v} MEM[(struct Dma_Ip_Hwv3InstRegType *)1075888128B].reg_CSR;
  # DEBUG reg => reg_6
  # DEBUG BEGIN_STMT
  reg_7 = reg_6 | 256;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  MEM[(struct Dma_Ip_Hwv3InstRegType *)1075888128B].reg_CSR ={v} reg_7;
  # DEBUG ptInst => NULL
  # DEBUG reg => NULL

  <bb 4> [local count: 1073741824]:
  # DEBUG LocHwVers => NULL
  # DEBUG LocHwInst => NULL
  # DEBUG reg => NULL
  # DEBUG pxLocLogicInst => NULL
  # DEBUG ptInst => NULL
  # DEBUG reg => NULL
  return;

}



;; Function hwAccDmaInst_CmdHalt (hwAccDmaInst_CmdHalt, funcdef_no=71, decl_uid=6728, cgraph_uid=72, symbol_order=74)


Symbols to be put in SSA form
{ D.7697 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 9
Number of blocks to update: 8 ( 89%)


Removing basic block 3
Removing basic block 5
Removing basic block 6
Merging blocks 7 and 8
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
hwAccDmaInst_CmdHalt (const struct Dma_Ip_LogicInstanceIdType * const pxLocLogicInst)
{
  uint32 reg;
  unsigned char _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = pxLocLogicInst_4(D)->HwVersId;
  # DEBUG LocHwVers => (uint32) _1
  # DEBUG BEGIN_STMT
  # DEBUG D#15 => pxLocLogicInst_4(D)->HwInstId
  # DEBUG LocHwInst => (uint32) D#15
  # DEBUG BEGIN_STMT
  if (_1 == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
<L3>:
  # DEBUG D#16 => pxLocLogicInst_4(D)
  # DEBUG INLINE_ENTRY hwAccDmaInst_CmdHalt
  # DEBUG D#17 => D#16
  # DEBUG pxLocLogicInst => D#17
  # DEBUG BEGIN_STMT
  # DEBUG ptInst => 1075888128B
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaInst_CmdHalt
  # DEBUG BEGIN_STMT
  reg_6 ={v} MEM[(struct Dma_Ip_Hwv3InstRegType *)1075888128B].reg_CSR;
  # DEBUG reg => reg_6
  # DEBUG BEGIN_STMT
  reg_7 = reg_6 | 32;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  MEM[(struct Dma_Ip_Hwv3InstRegType *)1075888128B].reg_CSR ={v} reg_7;
  # DEBUG ptInst => NULL
  # DEBUG reg => NULL

  <bb 4> [local count: 1073741824]:
  # DEBUG LocHwVers => NULL
  # DEBUG LocHwInst => NULL
  # DEBUG reg => NULL
  # DEBUG pxLocLogicInst => NULL
  # DEBUG ptInst => NULL
  # DEBUG reg => NULL
  return;

}



;; Function hwAccDmaInst_CmdResume (hwAccDmaInst_CmdResume, funcdef_no=72, decl_uid=6730, cgraph_uid=73, symbol_order=75)


Symbols to be put in SSA form
{ D.7698 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 9
Number of blocks to update: 8 ( 89%)


Removing basic block 3
Removing basic block 5
Removing basic block 6
Merging blocks 7 and 8
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
hwAccDmaInst_CmdResume (const struct Dma_Ip_LogicInstanceIdType * const pxLocLogicInst)
{
  uint32 reg;
  unsigned char _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = pxLocLogicInst_4(D)->HwVersId;
  # DEBUG LocHwVers => (uint32) _1
  # DEBUG BEGIN_STMT
  # DEBUG D#18 => pxLocLogicInst_4(D)->HwInstId
  # DEBUG LocHwInst => (uint32) D#18
  # DEBUG BEGIN_STMT
  if (_1 == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
<L3>:
  # DEBUG D#19 => pxLocLogicInst_4(D)
  # DEBUG INLINE_ENTRY hwAccDmaInst_CmdResume
  # DEBUG D#20 => D#19
  # DEBUG pxLocLogicInst => D#20
  # DEBUG BEGIN_STMT
  # DEBUG ptInst => 1075888128B
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaInst_CmdResume
  # DEBUG BEGIN_STMT
  reg_6 ={v} MEM[(struct Dma_Ip_Hwv3InstRegType *)1075888128B].reg_CSR;
  # DEBUG reg => reg_6
  # DEBUG BEGIN_STMT
  reg_7 = reg_6 & 4294967263;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  MEM[(struct Dma_Ip_Hwv3InstRegType *)1075888128B].reg_CSR ={v} reg_7;
  # DEBUG ptInst => NULL
  # DEBUG reg => NULL

  <bb 4> [local count: 1073741824]:
  # DEBUG LocHwVers => NULL
  # DEBUG LocHwInst => NULL
  # DEBUG reg => NULL
  # DEBUG pxLocLogicInst => NULL
  # DEBUG ptInst => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_SetRequest_EnMuxSource (HwAccDmaCh_SetRequest_EnMuxSource, funcdef_no=85, decl_uid=6765, cgraph_uid=86, symbol_order=88)


Symbols to be put in SSA form
{ D.7706 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 11
Number of blocks to update: 10 ( 91%)


Removing basic block 3
Removing basic block 5
Removing basic block 6
Merging blocks 7 and 10
Removing basic block 8
Removing basic block 9
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetRequest_EnMuxSource (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, const uint32 LocValue)
{
  Dma_Ip_MuxRegType reg;
  uint32 LocDmaMuxCh;
  uint32 LocDmaMuxInst;
  uint32 LocDmaCh;
  long unsigned int _8;
  long unsigned int _11;
  struct DMAMUX_Type * _13;
  volatile uint8_t * _14;
  unsigned char _16;
  unsigned char _17;
  unsigned char _18;
  unsigned char _19;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG LocDmaCh => 0
  # DEBUG BEGIN_STMT
  # DEBUG LocDmaMuxInst => 0
  # DEBUG BEGIN_STMT
  # DEBUG LocDmaMuxCh => 0
  # DEBUG BEGIN_STMT
  if (LocHwVers_3(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
<L3>:
  # DEBUG D#26 => LocHwVers_3(D)
  # DEBUG LocHwInst => LocHwInst_5(D)
  # DEBUG LocHwCh => LocHwCh_6(D)
  # DEBUG LocValue => LocValue_7(D)
  # DEBUG INLINE_ENTRY HwAccDmaCh_SetRequest_EnMuxSource
  # DEBUG D#27 => D#26
  # DEBUG LocHwVers => D#27
  # DEBUG BEGIN_STMT
  _8 = LocHwInst_5(D) * 32;
  LocDmaCh_9 = LocHwCh_6(D) + _8;
  # DEBUG LocDmaCh => LocDmaCh_9
  # DEBUG BEGIN_STMT
  LocDmaMuxInst_10 = LocDmaCh_9 / 6;
  # DEBUG LocDmaMuxInst => LocDmaMuxInst_10
  # DEBUG BEGIN_STMT
  _11 = LocDmaCh_9 % 6;
  LocDmaMuxCh_12 = _11 ^ 3;
  # DEBUG LocDmaMuxCh => LocDmaMuxCh_12
  # DEBUG BEGIN_STMT
  _13 = Dma_Ip_paxHwv3MuxBase[LocDmaMuxInst_10];
  _14 = &_13->CHCFG[LocDmaMuxCh_12];
  # DEBUG pMuxChCfg => _14
  # DEBUG Value => LocValue_7(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetRequest_EnHwRequestMux
  # DEBUG BEGIN_STMT
  reg_15 ={v} MEM[(volatile Dma_Ip_MuxRegType *)_14];
  # DEBUG reg => reg_15
  # DEBUG BEGIN_STMT
  _16 = reg_15 & 127;
  _17 = (unsigned char) LocValue_7(D);
  _18 = _17 << 7;
  _19 = _16 | _18;
  MEM[(volatile Dma_Ip_MuxRegType *)_14] ={v} _19;

  <bb 4> [local count: 1073741824]:
  # DEBUG pMuxChCfg => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  # DEBUG LocHwInst => NULL
  # DEBUG LocHwCh => NULL
  # DEBUG LocValue => NULL
  # DEBUG LocDmaCh => NULL
  # DEBUG LocDmaMuxInst => NULL
  # DEBUG LocDmaMuxCh => NULL
  # DEBUG LocHwVers => NULL
  return;

}



;; Function HwAccDmaCh_SetRequest_MuxSource (HwAccDmaCh_SetRequest_MuxSource, funcdef_no=86, decl_uid=6770, cgraph_uid=87, symbol_order=89)


Symbols to be put in SSA form
{ D.7707 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 11
Number of blocks to update: 10 ( 91%)


Removing basic block 3
Removing basic block 5
Removing basic block 6
Merging blocks 7 and 10
Removing basic block 8
Removing basic block 9
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetRequest_MuxSource (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, const uint32 LocValue)
{
  Dma_Ip_MuxRegType reg;
  uint32 LocDmaMuxCh;
  uint32 LocDmaMuxInst;
  uint32 LocDmaCh;
  long unsigned int _8;
  long unsigned int _11;
  struct DMAMUX_Type * _13;
  volatile uint8_t * _14;
  unsigned char _16;
  unsigned char _17;
  unsigned char _18;
  unsigned char _19;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG LocDmaCh => 0
  # DEBUG BEGIN_STMT
  # DEBUG LocDmaMuxInst => 0
  # DEBUG BEGIN_STMT
  # DEBUG LocDmaMuxCh => 0
  # DEBUG BEGIN_STMT
  if (LocHwVers_3(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
<L3>:
  # DEBUG D#28 => LocHwVers_3(D)
  # DEBUG LocHwInst => LocHwInst_5(D)
  # DEBUG LocHwCh => LocHwCh_6(D)
  # DEBUG LocValue => LocValue_7(D)
  # DEBUG INLINE_ENTRY HwAccDmaCh_SetRequest_MuxSource
  # DEBUG D#29 => D#28
  # DEBUG LocHwVers => D#29
  # DEBUG BEGIN_STMT
  _8 = LocHwInst_5(D) * 32;
  LocDmaCh_9 = LocHwCh_6(D) + _8;
  # DEBUG LocDmaCh => LocDmaCh_9
  # DEBUG BEGIN_STMT
  LocDmaMuxInst_10 = LocDmaCh_9 / 6;
  # DEBUG LocDmaMuxInst => LocDmaMuxInst_10
  # DEBUG BEGIN_STMT
  _11 = LocDmaCh_9 % 6;
  LocDmaMuxCh_12 = _11 ^ 3;
  # DEBUG LocDmaMuxCh => LocDmaMuxCh_12
  # DEBUG BEGIN_STMT
  _13 = Dma_Ip_paxHwv3MuxBase[LocDmaMuxInst_10];
  _14 = &_13->CHCFG[LocDmaMuxCh_12];
  # DEBUG pMuxChCfg => _14
  # DEBUG Value => LocValue_7(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetRequest_SourceMux
  # DEBUG BEGIN_STMT
  reg_15 ={v} MEM[(volatile Dma_Ip_MuxRegType *)_14];
  # DEBUG reg => reg_15
  # DEBUG BEGIN_STMT
  _16 = reg_15 & 192;
  _17 = (unsigned char) LocValue_7(D);
  _18 = _17 & 63;
  _19 = _16 | _18;
  MEM[(volatile Dma_Ip_MuxRegType *)_14] ={v} _19;

  <bb 4> [local count: 1073741824]:
  # DEBUG pMuxChCfg => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  # DEBUG LocHwInst => NULL
  # DEBUG LocHwCh => NULL
  # DEBUG LocValue => NULL
  # DEBUG LocDmaCh => NULL
  # DEBUG LocDmaMuxInst => NULL
  # DEBUG LocDmaMuxCh => NULL
  # DEBUG LocHwVers => NULL
  return;

}



;; Function HwAccDmaCh_SetRequest_EnMuxTrigger (HwAccDmaCh_SetRequest_EnMuxTrigger, funcdef_no=87, decl_uid=6775, cgraph_uid=88, symbol_order=90)


Symbols to be put in SSA form
{ D.7708 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 11
Number of blocks to update: 10 ( 91%)


Removing basic block 3
Removing basic block 5
Removing basic block 6
Merging blocks 7 and 10
Removing basic block 8
Removing basic block 9
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetRequest_EnMuxTrigger (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, const uint32 LocValue)
{
  Dma_Ip_MuxRegType reg;
  uint32 LocDmaMuxCh;
  uint32 LocDmaMuxInst;
  uint32 LocDmaCh;
  long unsigned int _8;
  long unsigned int _11;
  struct DMAMUX_Type * _13;
  volatile uint8_t * _14;
  unsigned char _16;
  unsigned char _17;
  unsigned char _18;
  unsigned char _19;
  unsigned char _20;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG LocDmaCh => 0
  # DEBUG BEGIN_STMT
  # DEBUG LocDmaMuxInst => 0
  # DEBUG BEGIN_STMT
  # DEBUG LocDmaMuxCh => 0
  # DEBUG BEGIN_STMT
  if (LocHwVers_3(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
<L3>:
  # DEBUG D#30 => LocHwVers_3(D)
  # DEBUG LocHwInst => LocHwInst_5(D)
  # DEBUG LocHwCh => LocHwCh_6(D)
  # DEBUG LocValue => LocValue_7(D)
  # DEBUG INLINE_ENTRY HwAccDmaCh_SetRequest_EnMuxTrigger
  # DEBUG D#31 => D#30
  # DEBUG LocHwVers => D#31
  # DEBUG BEGIN_STMT
  _8 = LocHwInst_5(D) * 32;
  LocDmaCh_9 = LocHwCh_6(D) + _8;
  # DEBUG LocDmaCh => LocDmaCh_9
  # DEBUG BEGIN_STMT
  LocDmaMuxInst_10 = LocDmaCh_9 / 6;
  # DEBUG LocDmaMuxInst => LocDmaMuxInst_10
  # DEBUG BEGIN_STMT
  _11 = LocDmaCh_9 % 6;
  LocDmaMuxCh_12 = _11 ^ 3;
  # DEBUG LocDmaMuxCh => LocDmaMuxCh_12
  # DEBUG BEGIN_STMT
  _13 = Dma_Ip_paxHwv3MuxBase[LocDmaMuxInst_10];
  _14 = &_13->CHCFG[LocDmaMuxCh_12];
  # DEBUG pMuxChCfg => _14
  # DEBUG Value => LocValue_7(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetRequest_EnTriggerMux
  # DEBUG BEGIN_STMT
  reg_15 ={v} MEM[(volatile Dma_Ip_MuxRegType *)_14];
  # DEBUG reg => reg_15
  # DEBUG BEGIN_STMT
  _16 = reg_15 & 191;
  _17 = (unsigned char) LocValue_7(D);
  _18 = _17 << 6;
  _19 = _18 & 64;
  _20 = _16 | _19;
  MEM[(volatile Dma_Ip_MuxRegType *)_14] ={v} _20;

  <bb 4> [local count: 1073741824]:
  # DEBUG pMuxChCfg => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  # DEBUG LocHwInst => NULL
  # DEBUG LocHwCh => NULL
  # DEBUG LocValue => NULL
  # DEBUG LocDmaCh => NULL
  # DEBUG LocDmaMuxInst => NULL
  # DEBUG LocDmaMuxCh => NULL
  # DEBUG LocHwVers => NULL
  return;

}



;; Function HwAccDmaCh_SetControl_StoreDestinationAddress (HwAccDmaCh_SetControl_StoreDestinationAddress, funcdef_no=114, decl_uid=6885, cgraph_uid=115, symbol_order=117)


Symbols to be put in SSA form
{ D.7732 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 9
Number of blocks to update: 8 ( 89%)


Removing basic block 3
Removing basic block 5
Removing basic block 6
Merging blocks 7 and 8
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetControl_StoreDestinationAddress (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  uint16 reg;
  short unsigned int _8;
  short unsigned int _9;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_1(D) == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
  # DEBUG D#32 => LocHwVers_1(D)
  # DEBUG pxLocTcd => pxLocTcd_3(D)
  # DEBUG LocValue => LocValue_4(D)
  # DEBUG INLINE_ENTRY HwAccDmaCh_SetControl_StoreDestinationAddress
  # DEBUG D#33 => D#32
  # DEBUG LocHwVers => D#33
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_3(D)
  # DEBUG Value => LocValue_4(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetControl_StoreDestinationAddress
  # DEBUG BEGIN_STMT
  # DEBUG D#8 => pxLocTcd_3(D)->reg_SLAST_SDA
  # DEBUG reg => D#8
  # DEBUG BEGIN_STMT
  pxLocTcd_3(D)->reg_SLAST_SDA = LocValue_4(D);
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_3(D)
  # DEBUG Value => 1
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetAuxiliary_EnDestinationStoreAddress
  # DEBUG BEGIN_STMT
  reg_7 = pxLocTcd_3(D)->reg_CSR;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  _8 = reg_7 & 65407;
  _9 = _8 | 128;
  pxLocTcd_3(D)->reg_CSR = _9;
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL

  <bb 4> [local count: 1073741824]:
  # DEBUG pxLocTcd => NULL
  # DEBUG LocValue => NULL
  # DEBUG reg => NULL
  # DEBUG LocHwVers => NULL
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_SetControl_EnStart (HwAccDmaCh_SetControl_EnStart, funcdef_no=115, decl_uid=6889, cgraph_uid=116, symbol_order=118)


Symbols to be put in SSA form
{ D.7733 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 9
Number of blocks to update: 8 ( 89%)


Removing basic block 3
Removing basic block 5
Removing basic block 6
Merging blocks 7 and 8
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetControl_EnStart (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  uint16 reg;
  _Bool _7;
  short unsigned int _9;
  short unsigned int _10;
  short unsigned int _11;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_1(D) == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
<L3>:
  # DEBUG D#34 => LocHwVers_1(D)
  # DEBUG pxLocTcd => pxLocTcd_4(D)
  # DEBUG LocValue => LocValue_3(D)
  # DEBUG INLINE_ENTRY HwAccDmaCh_SetControl_EnStart
  # DEBUG D#35 => D#34
  # DEBUG LocHwVers => D#35
  # DEBUG BEGIN_STMT
  _7 = LocValue_3(D) != 0;
  # DEBUG ptTcd => pxLocTcd_4(D)
  # DEBUG Value => _7
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetControl_EnStart
  # DEBUG BEGIN_STMT
  reg_8 = pxLocTcd_4(D)->reg_CSR;
  # DEBUG reg => reg_8
  # DEBUG BEGIN_STMT
  _9 = reg_8 & 65534;
  _10 = (short unsigned int) _7;
  _11 = _9 | _10;
  pxLocTcd_4(D)->reg_CSR = _11;
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL

  <bb 4> [local count: 1073741824]:
  # DEBUG pxLocTcd => NULL
  # DEBUG LocValue => NULL
  # DEBUG reg => NULL
  # DEBUG LocHwVers => NULL
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_GetCurrentIterCount (HwAccDmaCh_GetCurrentIterCount, funcdef_no=125, decl_uid=6929, cgraph_uid=126, symbol_order=128)


Symbols to be put in SSA form
{ D.7742 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 11
Number of blocks to update: 10 ( 91%)


Merging blocks 3 and 6
Removing basic block 5
Merging blocks 3 and 7
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;; 2 succs { 7 3 }
;; 3 succs { 4 5 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 7 }
;; 7 succs { 1 }
HwAccDmaCh_GetCurrentIterCount (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, uint32 * const retValue)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_TcdRegType * _2;
  short unsigned int _10;
  short unsigned int _11;
  signed short _12;
  short unsigned int _13;
  long unsigned int _14;
  short unsigned int _15;
  long unsigned int _16;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 7>; [79.76%]

  <bb 3> [local count: 217325344]:
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_6(D)][LocHwCh_7(D)];
  _2 = &_1->tTcdReg;
  _10 = MEM[(union  *)_2 + 22B];
  # DEBUG D#55 => _2
  # DEBUG retValue => retValue_8(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_GetCurrentIterCount
  # DEBUG D#56 => D#55
  # DEBUG ptTcd => D#56
  # DEBUG BEGIN_STMT
  _11 = _10;
  # DEBUG reg => _11 & 32768
  # DEBUG BEGIN_STMT
  _12 = (signed short) _11;
  if (_12 < 0)
    goto <bb 4>; [41.00%]
  else
    goto <bb 5>; [59.00%]

  <bb 4> [local count: 89103390]:
  # DEBUG BEGIN_STMT
  _13 = _11 & 511;
  _14 = (long unsigned int) _13;
  *retValue_8(D) = _14;
  goto <bb 6>; [100.00%]

  <bb 5> [local count: 128221954]:
  # DEBUG BEGIN_STMT
  _15 = _11;
  _16 = (long unsigned int) _15;
  *retValue_8(D) = _16;

  <bb 6> [local count: 217325344]:

  <bb 7> [local count: 1073741824]:
  # DEBUG retValue => NULL
  # DEBUG ptTcd => NULL
  # DEBUG ptTcd => NULL
  return;

}



;; Function HwAccDmaCh_GetBeginIterCount (HwAccDmaCh_GetBeginIterCount, funcdef_no=124, decl_uid=6924, cgraph_uid=125, symbol_order=127)


Symbols to be put in SSA form
{ D.7741 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 11
Number of blocks to update: 10 ( 91%)


Merging blocks 3 and 6
Removing basic block 5
Merging blocks 3 and 7
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;; 2 succs { 7 3 }
;; 3 succs { 4 5 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 7 }
;; 7 succs { 1 }
HwAccDmaCh_GetBeginIterCount (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, uint32 * const retValue)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  struct Dma_Ip_TcdRegType * _2;
  short unsigned int _10;
  short unsigned int _11;
  signed short _12;
  short unsigned int _13;
  long unsigned int _14;
  short unsigned int _15;
  long unsigned int _16;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_4(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 7>; [79.76%]

  <bb 3> [local count: 217325344]:
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_6(D)][LocHwCh_7(D)];
  _2 = &_1->tTcdReg;
  _10 = MEM[(union  *)_2 + 30B];
  # DEBUG D#53 => _2
  # DEBUG retValue => retValue_8(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_GetBeginIterCount
  # DEBUG D#54 => D#53
  # DEBUG ptTcd => D#54
  # DEBUG BEGIN_STMT
  _11 = _10;
  # DEBUG reg => _11 & 32768
  # DEBUG BEGIN_STMT
  _12 = (signed short) _11;
  if (_12 < 0)
    goto <bb 4>; [41.00%]
  else
    goto <bb 5>; [59.00%]

  <bb 4> [local count: 89103390]:
  # DEBUG BEGIN_STMT
  _13 = _11 & 511;
  _14 = (long unsigned int) _13;
  *retValue_8(D) = _14;
  goto <bb 6>; [100.00%]

  <bb 5> [local count: 128221954]:
  # DEBUG BEGIN_STMT
  _15 = _11;
  _16 = (long unsigned int) _15;
  *retValue_8(D) = _16;

  <bb 6> [local count: 217325344]:

  <bb 7> [local count: 1073741824]:
  # DEBUG retValue => NULL
  # DEBUG ptTcd => NULL
  # DEBUG ptTcd => NULL
  return;

}



;; Function HwAccDmaCh_SetDestination_LastAddrAdj (HwAccDmaCh_SetDestination_LastAddrAdj, funcdef_no=145, decl_uid=6837, cgraph_uid=103, symbol_order=105)


Symbols to be put in SSA form
{ D.8086 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)


Merging blocks 2 and 4
Merging blocks 6 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetDestination_LastAddrAdj (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG LocHwVers => LocHwVers_2(D)
  # DEBUG pxLocTcd => pxLocTcd_3(D)
  # DEBUG LocValue => LocValue_4(D)
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_3(D)
  # DEBUG Value => LocValue_4(D)
  # DEBUG INLINE_ENTRY NULL
  # DEBUG BEGIN_STMT
  # DEBUG D#7 => pxLocTcd_3(D)->reg_DLAST_SGA
  # DEBUG reg => D#7
  # DEBUG BEGIN_STMT
  pxLocTcd_3(D)->reg_DLAST_SGA = LocValue_4(D);

  <bb 4> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG LocHwVers => NULL
  # DEBUG pxLocTcd => NULL
  # DEBUG LocValue => NULL
  return;

}



;; Function HwAccDmaCh_SetMajorLoop_EnLink (HwAccDmaCh_SetMajorLoop_EnLink, funcdef_no=111, decl_uid=6873, cgraph_uid=112, symbol_order=114)


Symbols to be put in SSA form
{ D.7730 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)


Removing basic block 3
Removing basic block 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetMajorLoop_EnLink (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  uint16 reg;
  short unsigned int _8;
  short unsigned int _9;
  short unsigned int _10;
  short unsigned int _11;
  short unsigned int _12;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_4(D)
  # DEBUG Value => LocValue_5(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetMajorLoop_EnLink
  # DEBUG BEGIN_STMT
  reg_7 = pxLocTcd_4(D)->reg_CSR;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  _8 = reg_7 & 65503;
  _9 = (short unsigned int) LocValue_5(D);
  _10 = _9 << 5;
  _11 = _10 & 32;
  _12 = _8 | _11;
  pxLocTcd_4(D)->reg_CSR = _12;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_SetMinorLoop_EnLink (HwAccDmaCh_SetMinorLoop_EnLink, funcdef_no=108, decl_uid=6861, cgraph_uid=109, symbol_order=111)


Symbols to be put in SSA form
{ D.7728 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)


Removing basic block 3
Removing basic block 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetMinorLoop_EnLink (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  uint16 reg;
  short unsigned int _8;
  short unsigned int _9;
  short unsigned int _10;
  short unsigned int _11;
  short unsigned int _13;
  short unsigned int _14;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_4(D)
  # DEBUG Value => LocValue_5(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetMinorLoop_EnLink
  # DEBUG BEGIN_STMT
  reg_7 = pxLocTcd_4(D)->reg_BITER.reg_ELINKYES;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  _8 = reg_7 & 32767;
  _9 = (short unsigned int) LocValue_5(D);
  _10 = _9 << 15;
  _11 = _8 | _10;
  pxLocTcd_4(D)->reg_BITER.reg_ELINKYES = _11;
  # DEBUG BEGIN_STMT
  reg_12 = pxLocTcd_4(D)->reg_CITER.reg_ELINKYES;
  # DEBUG reg => reg_12
  # DEBUG BEGIN_STMT
  _13 = reg_12 & 32767;
  _14 = _10 | _13;
  pxLocTcd_4(D)->reg_CITER.reg_ELINKYES = _14;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaCh_SetMinorLoop_LogicLinkCh (HwAccDmaCh_SetMinorLoop_LogicLinkCh, funcdef_no=109, decl_uid=6865, cgraph_uid=110, symbol_order=112)


Symbols to be put in SSA form
{ D.7747 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)


Removing basic block 3
Removing basic block 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { 4 }
;; 4 succs { 1 }
HwAccDmaCh_SetMinorLoop_LogicLinkCh (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  uint16 reg;
  uint32 hwLinkCh;
  short unsigned int _10;
  short unsigned int _11;
  short unsigned int _12;
  short unsigned int _13;
  short unsigned int _14;
  short unsigned int _16;
  short unsigned int _17;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  hwLinkCh_5 = Dma_Ip_ConvertLogicChToHwCh (LocValue_3(D));
  # DEBUG hwLinkCh => hwLinkCh_5
  # DEBUG BEGIN_STMT
  if (LocHwVers_6(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 4>; [79.76%]

  <bb 3> [local count: 217325344]:
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_7(D)
  # DEBUG Value => hwLinkCh_5
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetMinorLoop_LinkCh
  # DEBUG BEGIN_STMT
  reg_9 = pxLocTcd_7(D)->reg_BITER.reg_ELINKYES;
  # DEBUG reg => reg_9
  # DEBUG BEGIN_STMT
  _10 = reg_9 & 49663;
  _11 = (short unsigned int) hwLinkCh_5;
  _12 = _11 << 9;
  _13 = _12 & 15872;
  _14 = _10 | _13;
  pxLocTcd_7(D)->reg_BITER.reg_ELINKYES = _14;
  # DEBUG BEGIN_STMT
  reg_15 = pxLocTcd_7(D)->reg_CITER.reg_ELINKYES;
  # DEBUG reg => reg_15
  # DEBUG BEGIN_STMT
  _16 = reg_15 & 49663;
  _17 = _13 | _16;
  pxLocTcd_7(D)->reg_CITER.reg_ELINKYES = _17;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  return;

}



;; Function HwAccDmaInst_SetConfig (HwAccDmaInst_SetConfig, funcdef_no=68, decl_uid=6345, cgraph_uid=69, symbol_order=71)


Symbols to be put in SSA form
{ D.7749 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 18
Number of blocks to update: 17 ( 94%)


Removing basic block 3
Removing basic block 5
Removing basic block 6
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
;; 2 succs { 14 3 }
;; 3 succs { 5 4 }
;; 4 succs { 5 }
;; 5 succs { 7 6 }
;; 6 succs { 7 }
;; 7 succs { 9 8 }
;; 8 succs { 9 }
;; 9 succs { 11 10 }
;; 10 succs { 11 }
;; 11 succs { 13 12 }
;; 12 succs { 13 }
;; 13 succs { 14 }
;; 14 succs { 1 }
HwAccDmaInst_SetConfig (const struct Dma_Ip_LogicInstanceIdType * const pxLocLogicInst, const struct Dma_Ip_LogicInstanceConfigType * const pxLocInstConfig)
{
  uint32 reg;
  unsigned char _1;
  long unsigned int _8;
  _Bool _9;
  long unsigned int iftmp.0_10;
  long unsigned int _12;
  _Bool _13;
  long unsigned int iftmp.1_14;
  long unsigned int _16;
  _Bool _17;
  long unsigned int iftmp.2_18;
  long unsigned int _20;
  _Bool _21;
  long unsigned int iftmp.3_22;
  long unsigned int _24;
  _Bool _25;
  long unsigned int iftmp.4_26;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = pxLocLogicInst_4(D)->HwVersId;
  # DEBUG LocHwVers => (uint32) _1
  # DEBUG BEGIN_STMT
  # DEBUG D#42 => pxLocLogicInst_4(D)->HwInstId
  # DEBUG LocHwInst => (uint32) D#42
  # DEBUG BEGIN_STMT
  if (_1 == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 14>; [79.76%]

  <bb 3> [local count: 217325344]:
  # DEBUG BEGIN_STMT
  # DEBUG D#89 => 1075888128B
  # DEBUG pxConfig => pxLocInstConfig_5(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaInst_SetConfig
  # DEBUG ptInst => 1075888128B
  # DEBUG BEGIN_STMT
  reg_7 ={v} MEM[(struct Dma_Ip_Hwv3InstRegType *)1075888128B].reg_CSR;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  _8 = reg_7 & 4294967293;
  _9 = pxLocInstConfig_5(D)->EnDebug;
  if (_9 != 0)
    goto <bb 5>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 4> [local count: 108662672]:

  <bb 5> [local count: 217325344]:
  # iftmp.0_10 = PHI <2(3), 0(4)>
  reg_11 = _8 | iftmp.0_10;
  # DEBUG reg => reg_11
  # DEBUG BEGIN_STMT
  _12 = reg_11 & 4294967291;
  _13 = pxLocInstConfig_5(D)->EnRoundRobin;
  if (_13 != 0)
    goto <bb 7>; [50.00%]
  else
    goto <bb 6>; [50.00%]

  <bb 6> [local count: 108662672]:

  <bb 7> [local count: 217325344]:
  # iftmp.1_14 = PHI <4(5), 0(6)>
  reg_15 = _12 | iftmp.1_14;
  # DEBUG reg => reg_15
  # DEBUG BEGIN_STMT
  _16 = reg_15 & 4294967279;
  _17 = pxLocInstConfig_5(D)->EnHaltAfterError;
  if (_17 != 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 8> [local count: 108662672]:

  <bb 9> [local count: 217325344]:
  # iftmp.2_18 = PHI <16(7), 0(8)>
  reg_19 = _16 | iftmp.2_18;
  # DEBUG reg => reg_19
  # DEBUG BEGIN_STMT
  _20 = reg_19 & 4294967231;
  _21 = pxLocInstConfig_5(D)->EnChLinking;
  if (_21 != 0)
    goto <bb 11>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 10> [local count: 108662672]:

  <bb 11> [local count: 217325344]:
  # iftmp.3_22 = PHI <64(9), 0(10)>
  reg_23 = _20 | iftmp.3_22;
  # DEBUG reg => reg_23
  # DEBUG BEGIN_STMT
  _24 = reg_23 & 4294967167;
  _25 = pxLocInstConfig_5(D)->EnGlMasterIdReplication;
  if (_25 != 0)
    goto <bb 13>; [50.00%]
  else
    goto <bb 12>; [50.00%]

  <bb 12> [local count: 108662672]:

  <bb 13> [local count: 217325344]:
  # iftmp.4_26 = PHI <128(11), 0(12)>
  reg_27 = _24 | iftmp.4_26;
  # DEBUG reg => reg_27
  # DEBUG BEGIN_STMT
  MEM[(struct Dma_Ip_Hwv3InstRegType *)1075888128B].reg_CSR ={v} reg_27;

  <bb 14> [local count: 1073741824]:
  # DEBUG pxConfig => NULL
  # DEBUG reg => NULL
  # DEBUG ptInst => NULL
  return;

}



;; Function HwAccDmaInst_SetCommand (HwAccDmaInst_SetCommand, funcdef_no=73, decl_uid=6348, cgraph_uid=74, symbol_order=76)

HwAccDmaInst_SetCommand (const uint32 Command, const struct Dma_Ip_LogicInstanceIdType * const pxLocLogicInst)
{
  static void (*<T65c>) (const struct Dma_Ip_LogicInstanceIdType * const) fpHwAcc_DmaInst_Command[4] = {hwAccDmaInst_CmdCancelTransfer, hwAccDmaInst_CmdCancelTransferWithError, hwAccDmaInst_CmdHalt, hwAccDmaInst_CmdResume};
  void (*<T658>) (const struct Dma_Ip_LogicInstanceIdType * const) _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = fpHwAcc_DmaInst_Command[Command_3(D)];
  _1 (pxLocLogicInst_4(D));
  return;

}



;; Function HwAccDmaInst_GetStatus (HwAccDmaInst_GetStatus, funcdef_no=74, decl_uid=6351, cgraph_uid=75, symbol_order=77)

HwAccDmaInst_GetStatus (const struct Dma_Ip_LogicInstanceIdType * const pxLocLogicInst, struct Dma_Ip_LogicInstanceStatusType * const Status)
{
  unsigned char _1;
  long unsigned int _6;
  signed int _7;
  _Bool _8;
  long unsigned int _9;
  long unsigned int _10;
  unsigned char _11;
  unsigned char _12;
  long unsigned int _13;
  long unsigned int _14;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = pxLocLogicInst_4(D)->HwVersId;
  # DEBUG LocHwVers => (uint32) _1
  # DEBUG BEGIN_STMT
  # DEBUG D#46 => pxLocLogicInst_4(D)->HwInstId
  # DEBUG LocHwInst => (uint32) D#46
  # DEBUG BEGIN_STMT
  if (_1 == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
<L0>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG D#43 => &Status_5(D)->Errors
  # DEBUG ptInst => 1075888128B
  # DEBUG pValue => D#43
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaInst_GetErrorStatus
  # DEBUG BEGIN_STMT
  _13 ={v} MEM[(const struct Dma_Ip_Hwv3InstRegType *)1075888128B].reg_ES;
  _14 = _13 & 2667578367;
  MEM[(uint32 *)Status_5(D)] = _14;
  # DEBUG ptInst => NULL
  # DEBUG pValue => NULL
  # DEBUG BEGIN_STMT
  # DEBUG D#44 => &Status_5(D)->ActiveId
  # DEBUG ptInst => 1075888128B
  # DEBUG pValue => D#44
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaInst_GetActiveIdStatus
  # DEBUG BEGIN_STMT
  _9 ={v} MEM[(const struct Dma_Ip_Hwv3InstRegType *)1075888128B].reg_CSR;
  _10 = _9 >> 24;
  _11 = (unsigned char) _10;
  _12 = _11 & 31;
  MEM[(uint8 *)Status_5(D) + 4B] = _12;
  # DEBUG ptInst => NULL
  # DEBUG pValue => NULL
  # DEBUG BEGIN_STMT
  # DEBUG D#45 => &Status_5(D)->Active
  # DEBUG ptInst => 1075888128B
  # DEBUG pBool => D#45
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaInst_GetActiveStatus
  # DEBUG BEGIN_STMT
  _6 ={v} MEM[(const struct Dma_Ip_Hwv3InstRegType *)1075888128B].reg_CSR;
  _7 = (signed int) _6;
  _8 = _7 < 0;
  MEM[(boolean *)Status_5(D) + 5B] = _8;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptInst => NULL
  # DEBUG pBool => NULL
  return;

}



;; Function HwAccDmaCh_SetCommand (HwAccDmaCh_SetCommand, funcdef_no=80, decl_uid=6356, cgraph_uid=81, symbol_order=83)

HwAccDmaCh_SetCommand (const uint32 Command, const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh)
{
  static void (*<T673>) (const uint32, const uint32, const uint32) fpHwAcc_DmaCh_Command[5] = {HwAccDmaCh_CmdSetHwRequest, HwAccDmaCh_CmdClearHwRequest, HwAccDmaCh_CmdSetSwRequest, HwAccDmaCh_CmdClearDone, HwAccDmaCh_CmdClearError};
  void (*<T66f>) (const uint32, const uint32, const uint32) _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = fpHwAcc_DmaCh_Command[Command_3(D)];
  _1 (LocHwVers_4(D), LocHwInst_5(D), LocHwCh_6(D));
  return;

}



;; Function HwAccDmaCh_GetStatus (HwAccDmaCh_GetStatus, funcdef_no=81, decl_uid=6361, cgraph_uid=82, symbol_order=84)

HwAccDmaCh_GetStatus (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, struct Dma_Ip_LogicChannelStatusType * const pChStatus)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  long unsigned int _8;
  _Bool _9;
  long unsigned int _10;
  signed int _11;
  _Bool _12;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_3(D) == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
<L0>:
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_5(D)][LocHwCh_6(D)];
  # DEBUG D#47 => &_1->tChReg
  # DEBUG D#48 => &pChStatus_7(D)->Active
  # DEBUG ptCh => D#47
  # DEBUG pBool => D#48
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_GetActiveStatus
  # DEBUG BEGIN_STMT
  _10 = MEM[(const struct Dma_Ip_ChRegType *)_1].reg_CH_CSR;
  _11 = (signed int) _10;
  _12 = _11 < 0;
  MEM[(boolean *)pChStatus_7(D) + 8B] = _12;
  # DEBUG ptCh => NULL
  # DEBUG pBool => NULL
  # DEBUG BEGIN_STMT
  # DEBUG D#49 => &_1->tChReg
  # DEBUG D#50 => &pChStatus_7(D)->Done
  # DEBUG ptCh => D#49
  # DEBUG pBool => D#50
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_GetDoneStatus
  # DEBUG BEGIN_STMT
  _8 = _10 & 1073741824;
  _9 = _8 != 0;
  MEM[(boolean *)pChStatus_7(D) + 9B] = _9;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptCh => NULL
  # DEBUG pBool => NULL
  return;

}



;; Function HwAccDmaCh_GetStatus_Error (HwAccDmaCh_GetStatus_Error, funcdef_no=82, decl_uid=6391, cgraph_uid=83, symbol_order=85)

HwAccDmaCh_GetStatus_Error (const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, uint32 * const pLocError)
{
  struct Dma_Ip_Hwv3ChTcdRegType * _1;
  long unsigned int _8;
  long unsigned int _9;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_3(D) == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
<L0>:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = g_ptHwChTcdPtrArray[LocHwInst_5(D)][LocHwCh_6(D)];
  # DEBUG D#51 => &_1->tChReg
  # DEBUG ptCh => D#51
  # DEBUG pValue => pLocError_7(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_GetErrorStatus
  # DEBUG BEGIN_STMT
  _8 = MEM[(const struct Dma_Ip_ChRegType *)_1].reg_CH_ES;
  _9 = _8 & 2147483903;
  *pLocError_7(D) = _9;

  <bb 4> [local count: 1073741824]:
  # DEBUG ptCh => NULL
  # DEBUG pValue => NULL
  return;

}



;; Function HwAccDmaCh_SetGlobalParam (HwAccDmaCh_SetGlobalParam, funcdef_no=94, decl_uid=6367, cgraph_uid=95, symbol_order=97)

HwAccDmaCh_SetGlobalParam (const uint32 Parameter, const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, const uint32 LocValue)
{
  static void (*<T68d>) (const uint32, const uint32, const uint32, const uint32) fpHwAcc_DmaCh_SetGlobalParam[11] = {HwAccDmaCh_SetControl_EnMasterIdReplication, HwAccDmaCh_SetControl_EnBufferedWrites, HwAccDmaCh_SetRequest_EnMuxSource, HwAccDmaCh_SetRequest_MuxSource, HwAccDmaCh_SetRequest_EnMuxTrigger, HwAccDmaCh_SetRequest_EnRequest, HwAccDmaCh_SetInterrupt_EnError, HwAccDmaCh_SetPriority_Group, HwAccDmaCh_SetPriority_Level, HwAccDmaCh_SetPriority_EnPreemption, HwAccDmaCh_SetPriority_DisPreempt};
  void (*<T689>) (const uint32, const uint32, const uint32, const uint32) _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = fpHwAcc_DmaCh_SetGlobalParam[Parameter_3(D)];
  _1 (LocHwVers_4(D), LocHwInst_5(D), LocHwCh_6(D), LocValue_7(D));
  return;

}



;; Function HwAccDmaCh_SetTransferParam (HwAccDmaCh_SetTransferParam, funcdef_no=121, decl_uid=6372, cgraph_uid=122, symbol_order=124)

HwAccDmaCh_SetTransferParam (const uint32 Parameter, const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, const uint32 LocValue)
{
  static void (*<T6a1>) (const uint32, struct Dma_Ip_TcdRegType *, const uint32) fpHwAcc_DmaCh_SetTransferParam[26] = {HwAccDmaCh_SetSource_Address, HwAccDmaCh_SetSource_SignedOffset, HwAccDmaCh_SetSource_LastAddrAdj, HwAccDmaCh_SetSource_TransferSize, HwAccDmaCh_SetSource_Modulo, HwAccDmaCh_SetDestination_Address, HwAccDmaCh_SetDestination_SignedOffset, HwAccDmaCh_SetDestination_LastAddrAdj, HwAccDmaCh_SetDestination_TransferSize, HwAccDmaCh_SetDestination_Modulo, HwAccDmaCh_SetMinorLoop_enSrcOffset, HwAccDmaCh_SetMinorLoop_enDstOffset, HwAccDmaCh_SetMinorLoop_Offset, HwAccDmaCh_SetMinorLoop_EnLink, HwAccDmaCh_SetMinorLoop_LogicLinkCh, HwAccDmaCh_SetMinorLoop_Size, HwAccDmaCh_SetMajorLoop_EnLink, HwAccDmaCh_SetMajorLoop_LogicLinkCh, HwAccDmaCh_SetMajorLoop_Count, HwAccDmaCh_SetControl_StoreDestinationAddress, HwAccDmaCh_SetControl_EnStart, HwAccDmaCh_SetControl_EnMajor, HwAccDmaCh_SetControl_EnHalfMajor, HwAccDmaCh_SetControl_DisAutoHwRequest, HwAccDmaCh_SetControl_EnEndOfPacketSignal, HwAccDmaCh_SetControl_BandwidthControl};
  void (*<T69d>) (const uint32, struct Dma_Ip_TcdRegType *, const uint32) _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = fpHwAcc_DmaCh_SetTransferParam[Parameter_3(D)];
  _1 (LocHwVers_4(D), pxLocTcd_5(D), LocValue_6(D));
  return;

}



;; Function HwAccDmaCh_GetParam (HwAccDmaCh_GetParam, funcdef_no=130, decl_uid=6378, cgraph_uid=131, symbol_order=133)

HwAccDmaCh_GetParam (const uint32 Parameter, const uint32 LocHwVers, const uint32 LocHwInst, const uint32 LocHwCh, uint32 * const retValue)
{
  static void (*<T6b0>) (const uint32, const uint32, const uint32, uint32 * const) fpHwAcc_DmaCh_GetParam[9] = {HwAccDmaCh_GetSourceAddress, HwAccDmaCh_GetDestinationAddress, HwAccDmaCh_GetBeginIterCount, HwAccDmaCh_GetCurrentIterCount, HwAccDmaCh_GetStoreDstAddress, HwAccDmaCh_GetMasterId, HwAccDmaCh_GetIntMajor, HwAccDmaCh_GetIntHalfMajor, HwAccDmaCh_GetParamDummyFunction};
  void (*<T6ac>) (const uint32, const uint32, const uint32, uint32 * const) _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = fpHwAcc_DmaCh_GetParam[Parameter_3(D)];
  _1 (LocHwVers_4(D), LocHwInst_5(D), LocHwCh_6(D), retValue_7(D));
  return;

}



;; Function HwAccDmaCh_LoadConfigIntoSoftwareTcd (HwAccDmaCh_LoadConfigIntoSoftwareTcd, funcdef_no=131, decl_uid=6383, cgraph_uid=132, symbol_order=134)


Symbols to be put in SSA form
{ D.7758 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 56
Number of blocks to update: 55 ( 98%)


Merging blocks 6 and 17
Merging blocks 7 and 31
Merging blocks 9 and 49
Merging blocks 11 and 51
Merging blocks 12 and 53
Merging blocks 13 and 55
Merging blocks 19 and 16
Removing basic block 21
Merging blocks 26 and 20
Removing basic block 28
Merging blocks 40 and 30
Merging blocks 45 and 41
Removing basic block 52
Removing basic block 54
Merging blocks 7 and 32
Merging blocks 9 and 48
Merging blocks 9 and 47
Merging blocks 9 and 46
Merging blocks 9 and 42
Merging blocks 11 and 50
Merging blocks 40 and 29
Merging blocks 40 and 27
Merging blocks 40 and 22
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32
;; 2 succs { 3 32 }
;; 3 succs { 4 5 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 8 7 }
;; 7 succs { 8 }
;; 8 succs { 9 32 }
;; 9 succs { 11 10 }
;; 10 succs { 11 }
;; 11 succs { 13 12 }
;; 12 succs { 13 }
;; 13 succs { 15 14 }
;; 14 succs { 15 }
;; 15 succs { 17 16 }
;; 16 succs { 17 }
;; 17 succs { 19 18 }
;; 18 succs { 19 }
;; 19 succs { 21 20 }
;; 20 succs { 21 }
;; 21 succs { 23 22 }
;; 22 succs { 23 }
;; 23 succs { 24 25 }
;; 24 succs { 26 }
;; 25 succs { 26 }
;; 26 succs { 28 27 }
;; 27 succs { 28 }
;; 28 succs { 29 30 }
;; 29 succs { 31 }
;; 30 succs { 31 }
;; 31 succs { 32 }
;; 32 succs { 1 }
HwAccDmaCh_LoadConfigIntoSoftwareTcd (uint32 HwVersId, const struct Dma_Ip_ScatterGatherConfigType * const pxLocScatterGather, const uint32 ElementId, const boolean NotLastElement)
{
  uint16 reg;
  uint16 reg;
  uint16 reg;
  uint16 reg;
  uint16 reg;
  uint32 reg;
  uint16 reg;
  uint16 reg;
  uint32 reg;
  uint16 reg;
  uint32 hwLinkCh;
  struct Dma_Ip_SwTcdRegType * _1;
  struct Dma_Ip_ScatterGatherConfigType * _2;
  struct Dma_Ip_SwTcdRegType * _3;
  long unsigned int _4;
  struct Dma_Ip_SwTcdRegType * _5;
  struct Dma_Ip_SwTcdRegType * _6;
  struct Dma_Ip_TransferConfigType * _7;
  struct Dma_Ip_SwTcdRegType * _8;
  struct Dma_Ip_SwTcdRegType * _9;
  struct Dma_Ip_TransferConfigType * _10;
  long unsigned int _11;
  short int _12;
  long unsigned int _13;
  long unsigned int _14;
  short int _15;
  long unsigned int _16;
  struct Dma_Ip_SwTcdRegType * _17;
  struct Dma_Ip_SwTcdRegType * _18;
  struct Dma_Ip_TransferConfigType * _19;
  _Bool _20;
  struct Dma_Ip_TransferConfigType * _21;
  unsigned char _22;
  long unsigned int _23;
  struct Dma_Ip_SwTcdRegType * _24;
  struct Dma_Ip_SwTcdRegType * _25;
  struct Dma_Ip_TransferConfigType * _26;
  long unsigned int _27;
  struct Dma_Ip_SwTcdRegType * _28;
  struct Dma_Ip_TransferConfigType * _29;
  _Bool _30;
  struct Dma_Ip_TransferConfigType * _31;
  _Bool _32;
  unsigned char _33;
  long unsigned int _34;
  struct Dma_Ip_SwTcdRegType * _35;
  struct Dma_Ip_SwTcdRegType * _36;
  struct Dma_Ip_SwTcdRegType * _37;
  struct Dma_Ip_TransferConfigType * _38;
  long unsigned int _39;
  struct Dma_Ip_SwTcdRegType * _40;
  struct Dma_Ip_TransferConfigType * _41;
  long int _42;
  long unsigned int _43;
  const uint32 iftmp.10_44;
  const uint32 iftmp.11_45;
  short unsigned int _69;
  short unsigned int _70;
  struct Dma_Ip_TransferConfigType * _78;
  struct Dma_Ip_TransferConfigType * _79;
  struct Dma_Ip_TransferConfigType * _80;
  short unsigned int _82;
  short unsigned int iftmp.12_83;
  short unsigned int _84;
  long unsigned int _86;
  struct Dma_Ip_TransferConfigType * _87;
  _Bool _88;
  long unsigned int iftmp.17_89;
  long unsigned int _91;
  _Bool _92;
  long unsigned int iftmp.18_93;
  long unsigned int _95;
  long int _96;
  long unsigned int _97;
  long unsigned int _98;
  long unsigned int _99;
  short unsigned int _102;
  struct Dma_Ip_TransferConfigType * _103;
  unsigned char _104;
  short unsigned int _105;
  short unsigned int _106;
  short unsigned int _107;
  short unsigned int _109;
  unsigned char _110;
  short unsigned int _111;
  short unsigned int _112;
  short unsigned int _114;
  unsigned char _115;
  unsigned char _116;
  short unsigned int _117;
  short unsigned int _119;
  unsigned char _120;
  short unsigned int _121;
  short unsigned int _122;
  short unsigned int _123;
  short unsigned int _126;
  struct Dma_Ip_TransferConfigType * _127;
  _Bool _128;
  short unsigned int _129;
  short unsigned int _131;
  _Bool _132;
  short unsigned int iftmp.13_133;
  short unsigned int _135;
  _Bool _136;
  short unsigned int iftmp.14_137;
  short unsigned int _139;
  _Bool _140;
  short unsigned int iftmp.15_141;
  short unsigned int _143;
  _Bool _144;
  short unsigned int iftmp.16_145;
  short unsigned int _147;
  unsigned char _148;
  short unsigned int _149;
  short unsigned int _150;
  long unsigned int _154;
  long unsigned int _155;
  long unsigned int _156;
  long unsigned int _157;
  long unsigned int _158;
  long unsigned int _159;
  short unsigned int _161;
  short unsigned int _162;
  short unsigned int _163;
  short unsigned int _164;
  short unsigned int _165;
  short unsigned int _167;
  short unsigned int _168;
  short unsigned int _170;
  short unsigned int _171;
  short unsigned int _172;
  short unsigned int _173;
  short unsigned int _175;
  short unsigned int _176;
  short unsigned int _178;
  short unsigned int _179;
  short unsigned int _180;
  short unsigned int _181;
  short unsigned int _182;
  short unsigned int _184;
  short unsigned int _185;
  short unsigned int _186;
  short unsigned int _187;
  short unsigned int _188;
  short unsigned int _190;
  short unsigned int _191;
  short unsigned int _192;
  short unsigned int _193;
  short unsigned int _194;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (HwVersId_49(D) == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 32>; [66.00%]

  <bb 3> [local count: 365072224]:
  # DEBUG BEGIN_STMT
  if (NotLastElement_51(D) != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 4> [local count: 182536112]:
  # DEBUG BEGIN_STMT
  _1 = pxLocScatterGather_52(D)->Stcd;
  _2 = pxLocScatterGather_52(D)->NextConfig;
  _3 = _2->Stcd;
  _4 = (long unsigned int) _3;
  # DEBUG ptTcd => _1
  # DEBUG Value => _4
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetControl_ScatterGatherAddress
  # DEBUG BEGIN_STMT
  # DEBUG D#7 => MEM[(struct Dma_Ip_TcdRegType *)_1].reg_DLAST_SGA
  # DEBUG reg => D#7
  # DEBUG BEGIN_STMT
  MEM[(struct Dma_Ip_TcdRegType *)_1].reg_DLAST_SGA = _4;
  goto <bb 6>; [100.00%]

  <bb 5> [local count: 182536112]:
  # DEBUG BEGIN_STMT
  _5 = pxLocScatterGather_52(D)->Stcd;
  # DEBUG ptTcd => _5
  # DEBUG Value => 0
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetControl_ScatterGatherAddress
  # DEBUG BEGIN_STMT
  # DEBUG D#7 => MEM[(struct Dma_Ip_TcdRegType *)_5].reg_DLAST_SGA
  # DEBUG reg => D#7
  # DEBUG BEGIN_STMT
  MEM[(struct Dma_Ip_TcdRegType *)_5].reg_DLAST_SGA = 0;

  <bb 6> [local count: 365072224]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG BEGIN_STMT
  _6 = pxLocScatterGather_52(D)->Stcd;
  # DEBUG ptTcd => _6
  # DEBUG Value => NotLastElement_51(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetAuxiliary_EnScatterGatherProcessing
  # DEBUG BEGIN_STMT
  reg_81 = MEM[(struct Dma_Ip_TcdRegType *)_6].reg_CSR;
  # DEBUG reg => reg_81
  # DEBUG BEGIN_STMT
  _82 = reg_81 & 65519;
  if (NotLastElement_51(D) != 0)
    goto <bb 8>; [50.00%]
  else
    goto <bb 7>; [50.00%]

  <bb 7> [local count: 182536112]:

  <bb 8> [local count: 365072224]:
  # iftmp.12_83 = PHI <16(6), 0(7)>
  _84 = _82 | iftmp.12_83;
  MEM[(struct Dma_Ip_TcdRegType *)_6].reg_CSR = _84;
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  # DEBUG BEGIN_STMT
  _7 = pxLocScatterGather_52(D)->TransferConfig;
  if (_7 != 0B)
    goto <bb 9>; [53.47%]
  else
    goto <bb 32>; [46.53%]

  <bb 9> [local count: 195204118]:
  # DEBUG BEGIN_STMT
  _8 = pxLocScatterGather_52(D)->Stcd;
  _80 = MEM[(struct Dma_Ip_TransferConfigType * *)pxLocScatterGather_52(D)];
  # DEBUG D#57 => pxLocScatterGather_52(D)
  # DEBUG ptTcd => _8
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetControlAndStatus
  # DEBUG D#58 => D#57
  # DEBUG pxLocScatterGather => D#58
  # DEBUG BEGIN_STMT
  reg_125 = MEM[(struct Dma_Ip_TcdRegType *)_8].reg_CSR;
  # DEBUG reg => reg_125
  # DEBUG BEGIN_STMT
  _126 = reg_125 & 65534;
  _127 = _80;
  _128 = _127->Control.EnStart;
  _129 = (short unsigned int) _128;
  reg_130 = _126 | _129;
  # DEBUG reg => reg_130
  # DEBUG BEGIN_STMT
  _131 = reg_130 & 65533;
  _132 = _127->Control.EnMajorInt;
  if (_132 != 0)
    goto <bb 11>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 10> [local count: 97602059]:

  <bb 11> [local count: 195204118]:
  # iftmp.13_133 = PHI <2(9), 0(10)>
  reg_134 = _131 | iftmp.13_133;
  # DEBUG reg => reg_134
  # DEBUG BEGIN_STMT
  _135 = reg_134 & 65531;
  _136 = _127->Control.EnHalfMajorInt;
  if (_136 != 0)
    goto <bb 13>; [50.00%]
  else
    goto <bb 12>; [50.00%]

  <bb 12> [local count: 97602059]:

  <bb 13> [local count: 195204118]:
  # iftmp.14_137 = PHI <4(11), 0(12)>
  reg_138 = _135 | iftmp.14_137;
  # DEBUG reg => reg_138
  # DEBUG BEGIN_STMT
  _139 = reg_138 & 65527;
  _140 = _127->Control.DisAutoHwRequest;
  if (_140 != 0)
    goto <bb 15>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 14> [local count: 97602059]:

  <bb 15> [local count: 195204118]:
  # iftmp.15_141 = PHI <8(13), 0(14)>
  reg_142 = _139 | iftmp.15_141;
  # DEBUG reg => reg_142
  # DEBUG BEGIN_STMT
  _143 = reg_142 & 65471;
  _144 = _127->Control.EnEndOfPacketSignal;
  if (_144 != 0)
    goto <bb 17>; [50.00%]
  else
    goto <bb 16>; [50.00%]

  <bb 16> [local count: 97602059]:

  <bb 17> [local count: 195204118]:
  # iftmp.16_145 = PHI <64(15), 0(16)>
  reg_146 = _143 | iftmp.16_145;
  # DEBUG reg => reg_146
  # DEBUG BEGIN_STMT
  _147 = reg_146 & 16383;
  _148 = _127->Control.BandwidthControl;
  _149 = (short unsigned int) _148;
  _150 = _149 << 14;
  reg_151 = _147 | _150;
  # DEBUG reg => reg_151
  # DEBUG BEGIN_STMT
  reg_152 = reg_151 & 65407;
  # DEBUG reg => reg_152
  # DEBUG BEGIN_STMT
  MEM[(struct Dma_Ip_TcdRegType *)_8].reg_CSR = reg_152;
  # DEBUG ptTcd => NULL
  # DEBUG reg => NULL
  # DEBUG pxLocScatterGather => NULL
  # DEBUG pxLocScatterGather => NULL
  # DEBUG BEGIN_STMT
  _9 = pxLocScatterGather_52(D)->Stcd;
  _10 = pxLocScatterGather_52(D)->TransferConfig;
  _11 = _10->Source.Addr;
  # DEBUG ptTcd => _9
  # DEBUG Value => _11
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetSource_Address
  # DEBUG BEGIN_STMT
  # DEBUG D#1 => MEM[(struct Dma_Ip_TcdRegType *)_9].reg_SADDR
  # DEBUG reg => D#1
  # DEBUG BEGIN_STMT
  MEM[(struct Dma_Ip_TcdRegType *)_9].reg_SADDR = _11;
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG BEGIN_STMT
  _12 = _10->Source.SignedOffset;
  _13 = (long unsigned int) _12;
  # DEBUG ptTcd => _9
  # DEBUG Value => _13
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetSource_SignedOffset
  # DEBUG BEGIN_STMT
  # DEBUG D#2 => MEM[(struct Dma_Ip_TcdRegType *)_9].reg_SOFF
  # DEBUG reg => (uint32) D#2
  # DEBUG BEGIN_STMT
  _70 = (short unsigned int) _13;
  MEM[(struct Dma_Ip_TcdRegType *)_9].reg_SOFF = _70;
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG BEGIN_STMT
  _14 = _10->Destination.Addr;
  # DEBUG ptTcd => _9
  # DEBUG Value => _14
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetDestination_Address
  # DEBUG BEGIN_STMT
  # DEBUG D#4 => MEM[(struct Dma_Ip_TcdRegType *)_9].reg_DADDR
  # DEBUG reg => D#4
  # DEBUG BEGIN_STMT
  MEM[(struct Dma_Ip_TcdRegType *)_9].reg_DADDR = _14;
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG BEGIN_STMT
  _15 = _10->Destination.SignedOffset;
  _16 = (long unsigned int) _15;
  # DEBUG ptTcd => _9
  # DEBUG Value => _16
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetDestination_SignedOffset
  # DEBUG BEGIN_STMT
  # DEBUG D#5 => MEM[(struct Dma_Ip_TcdRegType *)_9].reg_DOFF
  # DEBUG reg => D#5
  # DEBUG BEGIN_STMT
  _69 = (short unsigned int) _16;
  MEM[(struct Dma_Ip_TcdRegType *)_9].reg_DOFF = _69;
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG BEGIN_STMT
  _79 = MEM[(struct Dma_Ip_TransferConfigType * *)pxLocScatterGather_52(D)];
  # DEBUG D#59 => pxLocScatterGather_52(D)
  # DEBUG ptTcd => _9
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetTransferAttributes
  # DEBUG D#60 => D#59
  # DEBUG pxLocScatterGather => D#60
  # DEBUG BEGIN_STMT
  reg_101 = MEM[(struct Dma_Ip_TcdRegType *)_9].reg_ATTR;
  # DEBUG reg => reg_101
  # DEBUG BEGIN_STMT
  _102 = reg_101 & 63743;
  _103 = _79;
  _104 = _103->Source.TransferSize;
  _105 = (short unsigned int) _104;
  _106 = _105 << 8;
  _107 = _106 & 1792;
  reg_108 = _102 | _107;
  # DEBUG reg => reg_108
  # DEBUG BEGIN_STMT
  _109 = reg_108 & 2047;
  _110 = _103->Source.Modulo;
  _111 = (short unsigned int) _110;
  _112 = _111 << 11;
  reg_113 = _109 | _112;
  # DEBUG reg => reg_113
  # DEBUG BEGIN_STMT
  _114 = reg_113 & 65528;
  _115 = _103->Destination.TransferSize;
  _116 = _115 & 7;
  _117 = (short unsigned int) _116;
  reg_118 = _114 | _117;
  # DEBUG reg => reg_118
  # DEBUG BEGIN_STMT
  _119 = reg_118 & 65287;
  _120 = _103->Destination.Modulo;
  _121 = (short unsigned int) _120;
  _122 = _121 << 3;
  _123 = _122 & 255;
  reg_124 = _119 | _123;
  # DEBUG reg => reg_124
  # DEBUG BEGIN_STMT
  MEM[(struct Dma_Ip_TcdRegType *)_9].reg_ATTR = reg_124;
  # DEBUG ptTcd => NULL
  # DEBUG reg => NULL
  # DEBUG pxLocScatterGather => NULL
  # DEBUG pxLocScatterGather => NULL
  # DEBUG BEGIN_STMT
  _17 = pxLocScatterGather_52(D)->Stcd;
  _78 = MEM[(struct Dma_Ip_TransferConfigType * *)pxLocScatterGather_52(D)];
  # DEBUG D#61 => pxLocScatterGather_52(D)
  # DEBUG ptTcd => _17
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetSignedMinorLoopOffset
  # DEBUG D#62 => D#61
  # DEBUG pxLocScatterGather => D#62
  # DEBUG BEGIN_STMT
  reg_85 = MEM[(struct Dma_Ip_TcdRegType *)_17].reg_NBYTES.reg_MLOFFYES;
  # DEBUG reg => reg_85
  # DEBUG BEGIN_STMT
  _86 = reg_85 & 2147483647;
  _87 = _78;
  _88 = _87->MinorLoop.EnSrcOffset;
  if (_88 != 0)
    goto <bb 19>; [50.00%]
  else
    goto <bb 18>; [50.00%]

  <bb 18> [local count: 97602059]:

  <bb 19> [local count: 195204118]:
  # iftmp.17_89 = PHI <2147483648(17), 0(18)>
  reg_90 = _86 | iftmp.17_89;
  # DEBUG reg => reg_90
  # DEBUG BEGIN_STMT
  _91 = reg_90 & 3221225471;
  _92 = _87->MinorLoop.EnDstOffset;
  if (_92 != 0)
    goto <bb 21>; [50.00%]
  else
    goto <bb 20>; [50.00%]

  <bb 20> [local count: 97602059]:

  <bb 21> [local count: 195204118]:
  # iftmp.18_93 = PHI <1073741824(19), 0(20)>
  reg_94 = _91 | iftmp.18_93;
  # DEBUG reg => reg_94
  # DEBUG BEGIN_STMT
  _95 = reg_94 & 3221226495;
  _96 = _87->MinorLoop.Offset;
  _97 = (long unsigned int) _96;
  _98 = _97 << 10;
  _99 = _98 & 1073740800;
  reg_100 = _95 | _99;
  # DEBUG reg => reg_100
  # DEBUG BEGIN_STMT
  MEM[(struct Dma_Ip_TcdRegType *)_17].reg_NBYTES.reg_MLOFFYES = reg_100;
  # DEBUG ptTcd => NULL
  # DEBUG reg => NULL
  # DEBUG pxLocScatterGather => NULL
  # DEBUG pxLocScatterGather => NULL
  # DEBUG BEGIN_STMT
  _18 = pxLocScatterGather_52(D)->Stcd;
  _19 = pxLocScatterGather_52(D)->TransferConfig;
  _20 = _19->MinorLoop.EnLink;
  if (_20 != 0)
    goto <bb 23>; [50.00%]
  else
    goto <bb 22>; [50.00%]

  <bb 22> [local count: 97602059]:

  <bb 23> [local count: 195204118]:
  # iftmp.10_44 = PHI <1(21), 0(22)>
  # DEBUG ptTcd => _18
  # DEBUG Value => iftmp.10_44
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetMinorLoop_EnLink
  # DEBUG BEGIN_STMT
  reg_169 = MEM[(struct Dma_Ip_TcdRegType *)_18].reg_BITER.reg_ELINKYES;
  # DEBUG reg => reg_169
  # DEBUG BEGIN_STMT
  _170 = reg_169 & 32767;
  _171 = (short unsigned int) iftmp.10_44;
  _172 = _171 << 15;
  _173 = _170 | _172;
  MEM[(struct Dma_Ip_TcdRegType *)_18].reg_BITER.reg_ELINKYES = _173;
  # DEBUG BEGIN_STMT
  reg_174 = MEM[(struct Dma_Ip_TcdRegType *)_18].reg_CITER.reg_ELINKYES;
  # DEBUG reg => reg_174
  # DEBUG BEGIN_STMT
  _175 = reg_174 & 32767;
  _176 = _172 | _175;
  MEM[(struct Dma_Ip_TcdRegType *)_18].reg_CITER.reg_ELINKYES = _176;
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  # DEBUG BEGIN_STMT
  _21 = pxLocScatterGather_52(D)->TransferConfig;
  _22 = _21->MinorLoop.LogicLinkCh;
  _23 = (long unsigned int) _22;
  hwLinkCh_59 = Dma_Ip_ConvertLogicChToHwCh (_23);
  # DEBUG hwLinkCh => hwLinkCh_59
  # DEBUG BEGIN_STMT
  _24 = pxLocScatterGather_52(D)->Stcd;
  # DEBUG ptTcd => _24
  # DEBUG Value => hwLinkCh_59
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetMinorLoop_LinkCh
  # DEBUG BEGIN_STMT
  reg_160 = MEM[(struct Dma_Ip_TcdRegType *)_24].reg_BITER.reg_ELINKYES;
  # DEBUG reg => reg_160
  # DEBUG BEGIN_STMT
  _161 = reg_160 & 49663;
  _162 = (short unsigned int) hwLinkCh_59;
  _163 = _162 << 9;
  _164 = _163 & 15872;
  _165 = _161 | _164;
  MEM[(struct Dma_Ip_TcdRegType *)_24].reg_BITER.reg_ELINKYES = _165;
  # DEBUG BEGIN_STMT
  reg_166 = MEM[(struct Dma_Ip_TcdRegType *)_24].reg_CITER.reg_ELINKYES;
  # DEBUG reg => reg_166
  # DEBUG BEGIN_STMT
  _167 = reg_166 & 49663;
  _168 = _164 | _167;
  MEM[(struct Dma_Ip_TcdRegType *)_24].reg_CITER.reg_ELINKYES = _168;
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  # DEBUG BEGIN_STMT
  _25 = pxLocScatterGather_52(D)->Stcd;
  _26 = pxLocScatterGather_52(D)->TransferConfig;
  _27 = _26->MinorLoop.Size;
  # DEBUG ptTcd => _25
  # DEBUG Value => _27
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetMinorLoop_Size
  # DEBUG BEGIN_STMT
  reg_153 = MEM[(struct Dma_Ip_TcdRegType *)_25].reg_NBYTES.reg_MLOFFNO;
  # DEBUG reg => reg_153
  # DEBUG BEGIN_STMT
  _154 = reg_153 & 3221225472;
  if (_154 != 0)
    goto <bb 24>; [50.00%]
  else
    goto <bb 25>; [50.00%]

  <bb 24> [local count: 97602059]:
  # DEBUG BEGIN_STMT
  _155 = reg_153 & 4294966272;
  _156 = _27 & 1023;
  _157 = _155 | _156;
  MEM[(struct Dma_Ip_TcdRegType *)_25].reg_NBYTES.reg_MLOFFNO = _157;
  goto <bb 26>; [100.00%]

  <bb 25> [local count: 97602059]:
  # DEBUG BEGIN_STMT
  _158 = _27 & 1073741823;
  _159 = _158;
  MEM[(struct Dma_Ip_TcdRegType *)_25].reg_NBYTES.reg_MLOFFNO = _159;

  <bb 26> [local count: 195204118]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  # DEBUG BEGIN_STMT
  _28 = pxLocScatterGather_52(D)->Stcd;
  _29 = pxLocScatterGather_52(D)->TransferConfig;
  _30 = _29->MajorLoop.EnLink;
  if (_30 != 0)
    goto <bb 28>; [50.00%]
  else
    goto <bb 27>; [50.00%]

  <bb 27> [local count: 97602059]:

  <bb 28> [local count: 195204118]:
  # iftmp.11_45 = PHI <1(26), 0(27)>
  # DEBUG ptTcd => _28
  # DEBUG Value => iftmp.11_45
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetMajorLoop_EnLink
  # DEBUG BEGIN_STMT
  reg_177 = MEM[(struct Dma_Ip_TcdRegType *)_28].reg_CSR;
  # DEBUG reg => reg_177
  # DEBUG BEGIN_STMT
  _178 = reg_177 & 65503;
  _179 = (short unsigned int) iftmp.11_45;
  _180 = _179 << 5;
  _181 = _180 & 32;
  _182 = _178 | _181;
  MEM[(struct Dma_Ip_TcdRegType *)_28].reg_CSR = _182;
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  # DEBUG BEGIN_STMT
  _31 = pxLocScatterGather_52(D)->TransferConfig;
  _32 = _31->MajorLoop.EnLink;
  if (_32 != 0)
    goto <bb 29>; [50.00%]
  else
    goto <bb 30>; [50.00%]

  <bb 29> [local count: 97602059]:
  # DEBUG BEGIN_STMT
  _33 = _31->MajorLoop.LogicLinkCh;
  _34 = (long unsigned int) _33;
  hwLinkCh_66 = Dma_Ip_ConvertLogicChToHwCh (_34);
  # DEBUG hwLinkCh => hwLinkCh_66
  # DEBUG BEGIN_STMT
  _35 = pxLocScatterGather_52(D)->Stcd;
  # DEBUG ptTcd => _35
  # DEBUG Value => hwLinkCh_66
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetMajorLoop_LinkCh
  # DEBUG BEGIN_STMT
  reg_183 = MEM[(struct Dma_Ip_TcdRegType *)_35].reg_CSR;
  # DEBUG reg => reg_183
  # DEBUG BEGIN_STMT
  _184 = reg_183 & 57599;
  _185 = (short unsigned int) hwLinkCh_66;
  _186 = _185 << 8;
  _187 = _186 & 7936;
  _188 = _184 | _187;
  MEM[(struct Dma_Ip_TcdRegType *)_35].reg_CSR = _188;
  goto <bb 31>; [100.00%]

  <bb 30> [local count: 97602059]:
  # DEBUG BEGIN_STMT
  _36 = pxLocScatterGather_52(D)->Stcd;
  # DEBUG ptTcd => _36
  # DEBUG Value => ElementId_63(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetMajorLoop_LinkCh
  # DEBUG BEGIN_STMT
  reg_189 = MEM[(struct Dma_Ip_TcdRegType *)_36].reg_CSR;
  # DEBUG reg => reg_189
  # DEBUG BEGIN_STMT
  _190 = reg_189 & 57599;
  _191 = (short unsigned int) ElementId_63(D);
  _192 = _191 << 8;
  _193 = _192 & 7936;
  _194 = _190 | _193;
  MEM[(struct Dma_Ip_TcdRegType *)_36].reg_CSR = _194;

  <bb 31> [local count: 195204118]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  # DEBUG BEGIN_STMT
  _37 = pxLocScatterGather_52(D)->Stcd;
  _38 = pxLocScatterGather_52(D)->TransferConfig;
  _39 = _38->MajorLoop.Count;
  hwv3AccInlineDmaCh_SetMajorLoop_Count (_37, _39);
  # DEBUG BEGIN_STMT
  _40 = pxLocScatterGather_52(D)->Stcd;
  _41 = pxLocScatterGather_52(D)->TransferConfig;
  _42 = _41->Source.LastAddrAdj;
  _43 = (long unsigned int) _42;
  # DEBUG ptTcd => _40
  # DEBUG Value => _43
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetSource_SignedLastAddrAdj
  # DEBUG BEGIN_STMT
  # DEBUG D#3 => MEM[(struct Dma_Ip_TcdRegType *)_40].reg_SLAST_SDA
  # DEBUG reg => D#3
  # DEBUG BEGIN_STMT
  MEM[(struct Dma_Ip_TcdRegType *)_40].reg_SLAST_SDA = _43;

  <bb 32> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG BEGIN_STMT
  return;

}



;; Function HwAccDmaCh_LoadSoftwareTcdIntoHardwareTcd (HwAccDmaCh_LoadSoftwareTcdIntoHardwareTcd, funcdef_no=132, decl_uid=6386, cgraph_uid=133, symbol_order=135)

HwAccDmaCh_LoadSoftwareTcdIntoHardwareTcd (const struct Dma_Ip_LogicChannelIdType * const pxLocLogicCh, const struct Dma_Ip_ScatterGatherConfigType * const pxLocScatterGather)
{
  uint32 reg;
  uint32 LocHwCh;
  uint32 LocHwInst;
  unsigned char _1;
  unsigned char _2;
  unsigned char _3;
  struct Dma_Ip_Hwv3ChTcdRegType * _4;
  struct Dma_Ip_SwTcdRegType * _5;
  long unsigned int _6;
  short unsigned int _7;
  short unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  short unsigned int _12;
  short unsigned int _13;
  long unsigned int _14;
  short unsigned int _15;
  short unsigned int _16;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = pxLocLogicCh_19(D)->HwVersId;
  # DEBUG LocHwVers => (uint32) _1
  # DEBUG BEGIN_STMT
  _2 = pxLocLogicCh_19(D)->HwInstId;
  LocHwInst_20 = (uint32) _2;
  # DEBUG LocHwInst => LocHwInst_20
  # DEBUG BEGIN_STMT
  _3 = pxLocLogicCh_19(D)->HwChId;
  LocHwCh_21 = (uint32) _3;
  # DEBUG LocHwCh => LocHwCh_21
  # DEBUG BEGIN_STMT
  if (_1 == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
  # DEBUG BEGIN_STMT
  _4 = g_ptHwChTcdPtrArray[LocHwInst_20][LocHwCh_21];
  # DEBUG D#52 => &_4->tChReg
  # DEBUG ptCh => D#52
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_CmdClearDone
  # DEBUG BEGIN_STMT
  reg_34 = MEM[(struct Dma_Ip_ChRegType *)_4].reg_CH_CSR;
  # DEBUG reg => reg_34
  # DEBUG BEGIN_STMT
  reg_35 = reg_34 | 1073741824;
  # DEBUG reg => reg_35
  # DEBUG BEGIN_STMT
  MEM[(struct Dma_Ip_ChRegType *)_4].reg_CH_CSR = reg_35;
  # DEBUG ptCh => NULL
  # DEBUG reg => NULL
  # DEBUG BEGIN_STMT
  _5 = pxLocScatterGather_22(D)->Stcd;
  _6 = _5->reg_SADDR;
  _4->tTcdReg.reg_SADDR = _6;
  # DEBUG BEGIN_STMT
  _7 = _5->reg_SOFF;
  _4->tTcdReg.reg_SOFF = _7;
  # DEBUG BEGIN_STMT
  _8 = _5->reg_ATTR;
  _4->tTcdReg.reg_ATTR = _8;
  # DEBUG BEGIN_STMT
  _9 = _5->reg_NBYTES.reg_MLOFFYES;
  _4->tTcdReg.reg_NBYTES.reg_MLOFFYES = _9;
  # DEBUG BEGIN_STMT
  _10 = _5->reg_SLAST_SDA;
  _4->tTcdReg.reg_SLAST_SDA = _10;
  # DEBUG BEGIN_STMT
  _11 = _5->reg_DADDR;
  _4->tTcdReg.reg_DADDR = _11;
  # DEBUG BEGIN_STMT
  _12 = _5->reg_DOFF;
  _4->tTcdReg.reg_DOFF = _12;
  # DEBUG BEGIN_STMT
  _13 = _5->reg_CITER.reg_ELINKYES;
  _4->tTcdReg.reg_CITER.reg_ELINKYES = _13;
  # DEBUG BEGIN_STMT
  _14 = _5->reg_DLAST_SGA;
  _4->tTcdReg.reg_DLAST_SGA = _14;
  # DEBUG BEGIN_STMT
  _15 = _5->reg_BITER.reg_ELINKYES;
  _4->tTcdReg.reg_BITER.reg_ELINKYES = _15;
  # DEBUG BEGIN_STMT
  _16 = _5->reg_CSR;
  _4->tTcdReg.reg_CSR = _16;

  <bb 4> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  return;

}



;; Function HwAccDmaCh_SetControl_ScatterGatherAddress (HwAccDmaCh_SetControl_ScatterGatherAddress, funcdef_no=133, decl_uid=6395, cgraph_uid=134, symbol_order=136)

HwAccDmaCh_SetControl_ScatterGatherAddress (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, uint32 LocValue)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072224]:
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_4(D)
  # DEBUG Value => LocValue_5(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetControl_ScatterGatherAddress
  # DEBUG BEGIN_STMT
  # DEBUG D#7 => pxLocTcd_4(D)->reg_DLAST_SGA
  # DEBUG reg => D#7
  # DEBUG BEGIN_STMT
  pxLocTcd_4(D)->reg_DLAST_SGA = LocValue_5(D);

  <bb 4> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  return;

}



;; Function HwAccDmaCh_SetControl_EnScatterGatherProcessing (HwAccDmaCh_SetControl_EnScatterGatherProcessing, funcdef_no=134, decl_uid=6399, cgraph_uid=135, symbol_order=137)


Symbols to be put in SSA form
{ D.7761 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 9
Number of blocks to update: 8 ( 89%)


Removing basic block 3
Removing basic block 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;; 2 succs { 6 3 }
;; 3 succs { 5 4 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 1 }
HwAccDmaCh_SetControl_EnScatterGatherProcessing (const uint32 LocHwVers, struct Dma_Ip_TcdRegType * pxLocTcd, boolean LocValue)
{
  uint16 reg;
  short unsigned int _8;
  short unsigned int iftmp.12_9;
  short unsigned int _10;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  if (LocHwVers_2(D) == 3)
    goto <bb 3>; [20.24%]
  else
    goto <bb 6>; [79.76%]

  <bb 3> [local count: 217325344]:
  # DEBUG BEGIN_STMT
  # DEBUG ptTcd => pxLocTcd_4(D)
  # DEBUG Value => LocValue_5(D)
  # DEBUG INLINE_ENTRY hwv3AccInlineDmaCh_SetAuxiliary_EnScatterGatherProcessing
  # DEBUG BEGIN_STMT
  reg_7 = pxLocTcd_4(D)->reg_CSR;
  # DEBUG reg => reg_7
  # DEBUG BEGIN_STMT
  _8 = reg_7 & 65519;
  if (LocValue_5(D) != 0)
    goto <bb 5>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 4> [local count: 108662672]:

  <bb 5> [local count: 217325344]:
  # iftmp.12_9 = PHI <16(3), 0(4)>
  _10 = _8 | iftmp.12_9;
  pxLocTcd_4(D)->reg_CSR = _10;

  <bb 6> [local count: 1073741824]:
  # DEBUG ptTcd => NULL
  # DEBUG Value => NULL
  # DEBUG reg => NULL
  return;

}


